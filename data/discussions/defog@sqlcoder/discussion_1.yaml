!!python/object:huggingface_hub.community.DiscussionWithDetails
author: tordbb
conflicting_files: null
created_at: 2023-08-22 08:57:33+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/d61d8da7d889ade6b0ae39f192dc0b89.svg
      fullname: "Tord Brands\xE6ter"
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: tordbb
      type: user
    createdAt: '2023-08-22T09:57:33.000Z'
    data:
      edited: false
      editors:
      - tordbb
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7209387421607971
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/d61d8da7d889ade6b0ae39f192dc0b89.svg
          fullname: "Tord Brands\xE6ter"
          isHf: false
          isPro: false
          name: tordbb
          type: user
        html: '<p>Thanks for an impressive sql coder!</p>

          <p>Although it came closer than many other sql coder models I have seen
          on huggingface, it still did not quite nail the prompt below, which GPT-3.5
          seems to nail.<br>Feel free to add the prompt to your training data if interested
          in improving the model further.</p>

          <p>Question:<br>"Among the artists having concerts in year 2020, which artist
          has a song whose title equals the name of the stadium on which the concert
          takes place?"</p>

          <p>Database Schema:<br>"""<br>CREATE TABLE stadium (<br>stadium_id number,<br>location
          text,<br>name text,<br>capacity number,<br>highest number,<br>lowest number,<br>average
          number<br>)</p>

          <p>CREATE TABLE singer (<br>singer_id number,<br>name text,<br>country text,<br>song_name
          text,<br>song_release_year text,<br>age number,<br>is_male others<br>)</p>

          <p>CREATE TABLE concert (<br>concert_id number,<br>concert_name text,<br>theme
          text,<br>stadium_id text,<br>year text<br>)</p>

          <p>CREATE TABLE singer_in_concert (<br>concert_id number,<br>singer_id text<br>)<br>"""</p>

          <p>Invalid response, as retreived at <a rel="nofollow" href="https://defog.ai/sqlcoder-demo/">https://defog.ai/sqlcoder-demo/</a>:<br>"""<br>SELECT
          singer.name<br>FROM   singer_in_concert join singer on singer_in_concert.singer_id
          = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id<br>WHERE  concert.year
          = ''2020''<br>   and singer.song_name = stadium.name<br>GROUP BY singer.name;<br>"""</p>

          <p>Valid(?) response, as given by GPT-3.5:<br>"""<br>SELECT s.name AS artist_name<br>FROM
          singer s<br>JOIN singer_in_concert sic ON s.singer_id = sic.singer_id<br>JOIN
          concert c ON sic.concert_id = c.concert_id<br>JOIN stadium st ON c.stadium_id
          = st.stadium_id<br>WHERE c.year = ''2020'' AND s.song_name = st.name;<br>"""</p>

          '
        raw: "Thanks for an impressive sql coder!\r\n\r\nAlthough it came closer than\
          \ many other sql coder models I have seen on huggingface, it still did not\
          \ quite nail the prompt below, which GPT-3.5 seems to nail. \r\nFeel free\
          \ to add the prompt to your training data if interested in improving the\
          \ model further.\r\n\r\nQuestion:\r\n\"Among the artists having concerts\
          \ in year 2020, which artist has a song whose title equals the name of the\
          \ stadium on which the concert takes place?\"\r\n\r\nDatabase Schema:\r\n\
          \"\"\"\r\nCREATE TABLE stadium (\r\nstadium_id number,\r\nlocation text,\r\
          \nname text,\r\ncapacity number,\r\nhighest number,\r\nlowest number,\r\n\
          average number\r\n)\r\n\r\nCREATE TABLE singer (\r\nsinger_id number,\r\n\
          name text,\r\ncountry text,\r\nsong_name text,\r\nsong_release_year text,\r\
          \nage number,\r\nis_male others\r\n)\r\n\r\nCREATE TABLE concert (\r\nconcert_id\
          \ number,\r\nconcert_name text,\r\ntheme text,\r\nstadium_id text,\r\nyear\
          \ text\r\n)\r\n\r\nCREATE TABLE singer_in_concert (\r\nconcert_id number,\r\
          \nsinger_id text\r\n)\r\n\"\"\"\r\n\r\nInvalid response, as retreived at\
          \ https://defog.ai/sqlcoder-demo/:\r\n\"\"\"\r\nSELECT singer.name\r\nFROM\
          \   singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id\
          \ join concert on singer_in_concert.concert_id = concert.concert_id\r\n\
          WHERE  concert.year = '2020'\r\n   and singer.song_name = stadium.name\r\
          \nGROUP BY singer.name;\r\n\"\"\"\r\n\r\nValid(?) response, as given by\
          \ GPT-3.5:\r\n\"\"\"\r\nSELECT s.name AS artist_name\r\nFROM singer s\r\n\
          JOIN singer_in_concert sic ON s.singer_id = sic.singer_id\r\nJOIN concert\
          \ c ON sic.concert_id = c.concert_id\r\nJOIN stadium st ON c.stadium_id\
          \ = st.stadium_id\r\nWHERE c.year = '2020' AND s.song_name = st.name;\r\n\
          \"\"\""
        updatedAt: '2023-08-22T09:57:33.051Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\U0001F44D"
        users:
        - rishdotblog
    id: 64e4868dfe53a047e5c49cba
    type: comment
  author: tordbb
  content: "Thanks for an impressive sql coder!\r\n\r\nAlthough it came closer than\
    \ many other sql coder models I have seen on huggingface, it still did not quite\
    \ nail the prompt below, which GPT-3.5 seems to nail. \r\nFeel free to add the\
    \ prompt to your training data if interested in improving the model further.\r\
    \n\r\nQuestion:\r\n\"Among the artists having concerts in year 2020, which artist\
    \ has a song whose title equals the name of the stadium on which the concert takes\
    \ place?\"\r\n\r\nDatabase Schema:\r\n\"\"\"\r\nCREATE TABLE stadium (\r\nstadium_id\
    \ number,\r\nlocation text,\r\nname text,\r\ncapacity number,\r\nhighest number,\r\
    \nlowest number,\r\naverage number\r\n)\r\n\r\nCREATE TABLE singer (\r\nsinger_id\
    \ number,\r\nname text,\r\ncountry text,\r\nsong_name text,\r\nsong_release_year\
    \ text,\r\nage number,\r\nis_male others\r\n)\r\n\r\nCREATE TABLE concert (\r\n\
    concert_id number,\r\nconcert_name text,\r\ntheme text,\r\nstadium_id text,\r\n\
    year text\r\n)\r\n\r\nCREATE TABLE singer_in_concert (\r\nconcert_id number,\r\
    \nsinger_id text\r\n)\r\n\"\"\"\r\n\r\nInvalid response, as retreived at https://defog.ai/sqlcoder-demo/:\r\
    \n\"\"\"\r\nSELECT singer.name\r\nFROM   singer_in_concert join singer on singer_in_concert.singer_id\
    \ = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id\r\
    \nWHERE  concert.year = '2020'\r\n   and singer.song_name = stadium.name\r\nGROUP\
    \ BY singer.name;\r\n\"\"\"\r\n\r\nValid(?) response, as given by GPT-3.5:\r\n\
    \"\"\"\r\nSELECT s.name AS artist_name\r\nFROM singer s\r\nJOIN singer_in_concert\
    \ sic ON s.singer_id = sic.singer_id\r\nJOIN concert c ON sic.concert_id = c.concert_id\r\
    \nJOIN stadium st ON c.stadium_id = st.stadium_id\r\nWHERE c.year = '2020' AND\
    \ s.song_name = st.name;\r\n\"\"\""
  created_at: 2023-08-22 08:57:33+00:00
  edited: false
  hidden: false
  id: 64e4868dfe53a047e5c49cba
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1629781294865-603bbad3fd770a9997b57cb6.jpeg?w=200&h=200&f=face
      fullname: Rishabh
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: rishdotblog
      type: user
    createdAt: '2023-08-22T10:52:06.000Z'
    data:
      edited: false
      editors:
      - rishdotblog
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.8032847046852112
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1629781294865-603bbad3fd770a9997b57cb6.jpeg?w=200&h=200&f=face
          fullname: Rishabh
          isHf: false
          isPro: false
          name: rishdotblog
          type: user
        html: "<p>HI there, thank you for  testing out the model \u2013 and for opening\
          \ an issue! We will definitely incorporate queries like this (without column\
          \ descriptions of join hints) in our training data in the future. Currently,\
          \ our model performs best when column descriptions and join hints are defined.</p>\n\
          <p>This is because \u2013 unlike gpt-3.5-turbo \u2013 we have not yet done\
          \ instruction fine-tuning with RLHF or Reward Modeling. We will do that\
          \ soon.</p>\n<p>With the metadata defined like below, the model does give\
          \ the right answer to this question. But in the future, we hope to start\
          \ returning high quality without any metadata definitions.</p>\n<p>Query\
          \ generated with additional metadata defined</p>\n<pre><code class=\"language-sql\"\
          ><span class=\"hljs-keyword\">SELECT</span> singer.name,\n       singer.song_name\n\
          <span class=\"hljs-keyword\">FROM</span>   singer_in_concert <span class=\"\
          hljs-keyword\">join</span> singer <span class=\"hljs-keyword\">on</span>\
          \ singer_in_concert.singer_id <span class=\"hljs-operator\">=</span> singer.singer_id\
          \ <span class=\"hljs-keyword\">join</span> concert <span class=\"hljs-keyword\"\
          >on</span> singer_in_concert.concert_id <span class=\"hljs-operator\">=</span>\
          \ concert.concert_id <span class=\"hljs-keyword\">join</span> stadium <span\
          \ class=\"hljs-keyword\">on</span> concert.stadium_id <span class=\"hljs-operator\"\
          >=</span> stadium.stadium_id\n<span class=\"hljs-keyword\">WHERE</span>\
          \  concert.year <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\"\
          >'2020'</span>\n   <span class=\"hljs-keyword\">and</span> singer.song_name\
          \ <span class=\"hljs-operator\">=</span> stadium.name\n<span class=\"hljs-keyword\"\
          >ORDER</span> <span class=\"hljs-keyword\">BY</span> singer.name;\n</code></pre>\n\
          <p>Additional metadata</p>\n<pre><code>CREATE TABLE stadium (\n  stadium_id\
          \ number, --unique id for each stadium\n  location text, --city and state\n\
          \  name text, --name of the stadium\n  capacity number, --maximum number\
          \ of people that can be seated\n  highest number, --highest number of people\
          \ that have attended a concert\n  lowest number, --lowest number of people\
          \ that have attended a concert\n  average number --average number of people\
          \ that have attended a concert\n)\n\nCREATE TABLE singer (\n  singer_id\
          \ number, --unique id for each singer\n  name text, --name of the singer\n\
          \  country text, --country of origin of the singer\n  song_name text, --name\
          \ of the song\n  song_release_year text, --year the song was released\n\
          \  age number, --age of the singer\n  is_male bool --whether or not the\
          \ singer is male\n)\n\nCREATE TABLE concert (\n  concert_id number, --unique\
          \ id for each concert\n  concert_name text, --name of the concert\n  theme\
          \ text, --theme of the concert\n  stadium_id text, --id of the stadium where\
          \ the concert takes place\n  year text --year the concert takes place\n\
          )\n\nCREATE TABLE singer_in_concert (\n  concert_id number, --id of the\
          \ concert\n  singer_id text --id of the singer\n)\n\n-- stadium.stadium_id\
          \ can be joined with concert.stadium_id\n-- singer.singer_id can be joined\
          \ with singer_in_concert.singer_id\n-- concert.concert_id can be joined\
          \ with singer_in_concert.concert_id\n</code></pre>\n"
        raw: "HI there, thank you for  testing out the model \u2013 and for opening\
          \ an issue! We will definitely incorporate queries like this (without column\
          \ descriptions of join hints) in our training data in the future. Currently,\
          \ our model performs best when column descriptions and join hints are defined.\n\
          \nThis is because \u2013 unlike gpt-3.5-turbo \u2013 we have not yet done\
          \ instruction fine-tuning with RLHF or Reward Modeling. We will do that\
          \ soon.\n\nWith the metadata defined like below, the model does give the\
          \ right answer to this question. But in the future, we hope to start returning\
          \ high quality without any metadata definitions.\n\nQuery generated with\
          \ additional metadata defined\n```sql\nSELECT singer.name,\n       singer.song_name\n\
          FROM   singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id\
          \ join concert on singer_in_concert.concert_id = concert.concert_id join\
          \ stadium on concert.stadium_id = stadium.stadium_id\nWHERE  concert.year\
          \ = '2020'\n   and singer.song_name = stadium.name\nORDER BY singer.name;\n\
          ```\n\nAdditional metadata\n```\nCREATE TABLE stadium (\n  stadium_id number,\
          \ --unique id for each stadium\n  location text, --city and state\n  name\
          \ text, --name of the stadium\n  capacity number, --maximum number of people\
          \ that can be seated\n  highest number, --highest number of people that\
          \ have attended a concert\n  lowest number, --lowest number of people that\
          \ have attended a concert\n  average number --average number of people that\
          \ have attended a concert\n)\n\nCREATE TABLE singer (\n  singer_id number,\
          \ --unique id for each singer\n  name text, --name of the singer\n  country\
          \ text, --country of origin of the singer\n  song_name text, --name of the\
          \ song\n  song_release_year text, --year the song was released\n  age number,\
          \ --age of the singer\n  is_male bool --whether or not the singer is male\n\
          )\n\nCREATE TABLE concert (\n  concert_id number, --unique id for each concert\n\
          \  concert_name text, --name of the concert\n  theme text, --theme of the\
          \ concert\n  stadium_id text, --id of the stadium where the concert takes\
          \ place\n  year text --year the concert takes place\n)\n\nCREATE TABLE singer_in_concert\
          \ (\n  concert_id number, --id of the concert\n  singer_id text --id of\
          \ the singer\n)\n\n-- stadium.stadium_id can be joined with concert.stadium_id\n\
          -- singer.singer_id can be joined with singer_in_concert.singer_id\n-- concert.concert_id\
          \ can be joined with singer_in_concert.concert_id\n```"
        updatedAt: '2023-08-22T10:52:06.711Z'
      numEdits: 0
      reactions: []
    id: 64e49356f91456cd78dbddb0
    type: comment
  author: rishdotblog
  content: "HI there, thank you for  testing out the model \u2013 and for opening\
    \ an issue! We will definitely incorporate queries like this (without column descriptions\
    \ of join hints) in our training data in the future. Currently, our model performs\
    \ best when column descriptions and join hints are defined.\n\nThis is because\
    \ \u2013 unlike gpt-3.5-turbo \u2013 we have not yet done instruction fine-tuning\
    \ with RLHF or Reward Modeling. We will do that soon.\n\nWith the metadata defined\
    \ like below, the model does give the right answer to this question. But in the\
    \ future, we hope to start returning high quality without any metadata definitions.\n\
    \nQuery generated with additional metadata defined\n```sql\nSELECT singer.name,\n\
    \       singer.song_name\nFROM   singer_in_concert join singer on singer_in_concert.singer_id\
    \ = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id\
    \ join stadium on concert.stadium_id = stadium.stadium_id\nWHERE  concert.year\
    \ = '2020'\n   and singer.song_name = stadium.name\nORDER BY singer.name;\n```\n\
    \nAdditional metadata\n```\nCREATE TABLE stadium (\n  stadium_id number, --unique\
    \ id for each stadium\n  location text, --city and state\n  name text, --name\
    \ of the stadium\n  capacity number, --maximum number of people that can be seated\n\
    \  highest number, --highest number of people that have attended a concert\n \
    \ lowest number, --lowest number of people that have attended a concert\n  average\
    \ number --average number of people that have attended a concert\n)\n\nCREATE\
    \ TABLE singer (\n  singer_id number, --unique id for each singer\n  name text,\
    \ --name of the singer\n  country text, --country of origin of the singer\n  song_name\
    \ text, --name of the song\n  song_release_year text, --year the song was released\n\
    \  age number, --age of the singer\n  is_male bool --whether or not the singer\
    \ is male\n)\n\nCREATE TABLE concert (\n  concert_id number, --unique id for each\
    \ concert\n  concert_name text, --name of the concert\n  theme text, --theme of\
    \ the concert\n  stadium_id text, --id of the stadium where the concert takes\
    \ place\n  year text --year the concert takes place\n)\n\nCREATE TABLE singer_in_concert\
    \ (\n  concert_id number, --id of the concert\n  singer_id text --id of the singer\n\
    )\n\n-- stadium.stadium_id can be joined with concert.stadium_id\n-- singer.singer_id\
    \ can be joined with singer_in_concert.singer_id\n-- concert.concert_id can be\
    \ joined with singer_in_concert.concert_id\n```"
  created_at: 2023-08-22 09:52:06+00:00
  edited: false
  hidden: false
  id: 64e49356f91456cd78dbddb0
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: defog/sqlcoder
repo_type: model
status: open
target_branch: null
title: Difficult prompt you may want to add to training data
