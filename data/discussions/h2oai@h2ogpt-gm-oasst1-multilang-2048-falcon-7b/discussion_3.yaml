!!python/object:huggingface_hub.community.DiscussionWithDetails
author: maddes8cht
conflicting_files: null
created_at: 2023-09-27 08:16:16+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/64314d56dd466752c73bce33/Hny4H26P7Zg0PbET-iYH-.jpeg?w=200&h=200&f=face
      fullname: Mathias Bachmann
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: maddes8cht
      type: user
    createdAt: '2023-09-27T09:16:16.000Z'
    data:
      edited: false
      editors:
      - maddes8cht
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9814403653144836
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/64314d56dd466752c73bce33/Hny4H26P7Zg0PbET-iYH-.jpeg?w=200&h=200&f=face
          fullname: Mathias Bachmann
          isHf: false
          isPro: false
          name: maddes8cht
          type: user
        html: '<p>This model is named "multilang", but the Readme does not say anything
          about why.</p>

          <p>Can you please say something about what is different with this model
          and what I can expect from it?<br>You can gladly point me to where I can
          find this information.<br>That would be very helpful. </p>

          '
        raw: "This model is named \"multilang\", but the Readme does not say anything\
          \ about why.\r\n\r\nCan you please say something about what is different\
          \ with this model and what I can expect from it?\r\nYou can gladly point\
          \ me to where I can find this information.\r\nThat would be very helpful.\
          \ \r\n"
        updatedAt: '2023-09-27T09:16:16.896Z'
      numEdits: 0
      reactions: []
    id: 6513f2e0d901d0d5e82e12a6
    type: comment
  author: maddes8cht
  content: "This model is named \"multilang\", but the Readme does not say anything\
    \ about why.\r\n\r\nCan you please say something about what is different with\
    \ this model and what I can expect from it?\r\nYou can gladly point me to where\
    \ I can find this information.\r\nThat would be very helpful. \r\n"
  created_at: 2023-09-27 08:16:16+00:00
  edited: false
  hidden: false
  id: 6513f2e0d901d0d5e82e12a6
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1676417502037-6316fc44c92fd6fee3161e9a.png?w=200&h=200&f=face
      fullname: Pascal Pfeiffer
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: ilu000
      type: user
    createdAt: '2023-09-27T10:58:51.000Z'
    data:
      edited: false
      editors:
      - ilu000
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.27731889486312866
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1676417502037-6316fc44c92fd6fee3161e9a.png?w=200&h=200&f=face
          fullname: Pascal Pfeiffer
          isHf: false
          isPro: false
          name: ilu000
          type: user
        html: "<p>Thanks for the question. This model was trained on all Q&amp;A pairs\
          \ from all languages in the OASST dataset (train_dataframe: data/user/oasst/train_full_multilang_allrank.pq).</p>\n\
          <p>It was prepared as this:</p>\n<pre><code class=\"language-python\"> \
          \   ds = load_dataset(<span class=\"hljs-string\">\"OpenAssistant/oasst1\"\
          </span>)\n    train = ds[<span class=\"hljs-string\">\"train\"</span>].to_pandas()\n\
          \    val = ds[<span class=\"hljs-string\">\"validation\"</span>].to_pandas()\n\
          \n    df = pd.concat([train, val], axis=<span class=\"hljs-number\">0</span>).reset_index(drop=<span\
          \ class=\"hljs-literal\">True</span>)\n\n    df_assistant = df[(df.role\
          \ == <span class=\"hljs-string\">\"assistant\"</span>)].copy()\n    df_prompter\
          \ = df[(df.role == <span class=\"hljs-string\">\"prompter\"</span>)].copy()\n\
          \    df_prompter = df_prompter.set_index(<span class=\"hljs-string\">\"\
          message_id\"</span>)\n    df_assistant[<span class=\"hljs-string\">\"output\"\
          </span>] = df_assistant[<span class=\"hljs-string\">\"text\"</span>].values\n\
          \n    inputs = []\n    parent_ids = []\n    <span class=\"hljs-keyword\"\
          >for</span> _, row <span class=\"hljs-keyword\">in</span> df_assistant.iterrows():\n\
          \        <span class=\"hljs-built_in\">input</span> = df_prompter.loc[row.parent_id]\n\
          \        inputs.append(<span class=\"hljs-built_in\">input</span>.text)\n\
          \        parent_ids.append(<span class=\"hljs-built_in\">input</span>.parent_id)\n\
          \n    df_assistant[<span class=\"hljs-string\">\"instruction\"</span>] =\
          \ inputs\n    df_assistant[<span class=\"hljs-string\">\"parent_id\"</span>]\
          \ = parent_ids\n\n    df_assistant = df_assistant[\n        [<span class=\"\
          hljs-string\">\"instruction\"</span>, <span class=\"hljs-string\">\"output\"\
          </span>, <span class=\"hljs-string\">\"message_id\"</span>, <span class=\"\
          hljs-string\">\"parent_id\"</span>, <span class=\"hljs-string\">\"lang\"\
          </span>, <span class=\"hljs-string\">\"rank\"</span>]\n    ].rename(columns={<span\
          \ class=\"hljs-string\">\"message_id\"</span>: <span class=\"hljs-string\"\
          >\"id\"</span>})\n\n    df_assistant[(df_assistant[<span class=\"hljs-string\"\
          >\"rank\"</span>] == <span class=\"hljs-number\">0.0</span>) &amp; (df_assistant[<span\
          \ class=\"hljs-string\">\"lang\"</span>] == <span class=\"hljs-string\"\
          >\"en\"</span>)][\n        [<span class=\"hljs-string\">\"instruction\"\
          </span>, <span class=\"hljs-string\">\"output\"</span>, <span class=\"hljs-string\"\
          >\"id\"</span>, <span class=\"hljs-string\">\"parent_id\"</span>]\n    ].to_parquet(os.path.join(path,\
          \ <span class=\"hljs-string\">\"train_full.pq\"</span>), index=<span class=\"\
          hljs-literal\">False</span>)\n\n    df_assistant[df_assistant[<span class=\"\
          hljs-string\">\"lang\"</span>] == <span class=\"hljs-string\">\"en\"</span>][\n\
          \        [<span class=\"hljs-string\">\"instruction\"</span>, <span class=\"\
          hljs-string\">\"output\"</span>, <span class=\"hljs-string\">\"id\"</span>,\
          \ <span class=\"hljs-string\">\"parent_id\"</span>]\n    ].to_parquet(os.path.join(path,\
          \ <span class=\"hljs-string\">\"train_full_allrank.pq\"</span>), index=<span\
          \ class=\"hljs-literal\">False</span>)\n\n    df_assistant[df_assistant[<span\
          \ class=\"hljs-string\">\"rank\"</span>] == <span class=\"hljs-number\"\
          >0.0</span>][\n        [<span class=\"hljs-string\">\"instruction\"</span>,\
          \ <span class=\"hljs-string\">\"output\"</span>, <span class=\"hljs-string\"\
          >\"id\"</span>, <span class=\"hljs-string\">\"parent_id\"</span>]\n    ].to_parquet(os.path.join(path,\
          \ <span class=\"hljs-string\">\"train_full_multilang.pq\"</span>), index=<span\
          \ class=\"hljs-literal\">False</span>)\n\n    df_assistant[[<span class=\"\
          hljs-string\">\"instruction\"</span>, <span class=\"hljs-string\">\"output\"\
          </span>, <span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-string\"\
          >\"parent_id\"</span>]].to_parquet(\n        os.path.join(path, <span class=\"\
          hljs-string\">\"train_full_multilang_allrank.pq\"</span>), index=<span class=\"\
          hljs-literal\">False</span>\n    )\n</code></pre>\n"
        raw: "Thanks for the question. This model was trained on all Q&A pairs from\
          \ all languages in the OASST dataset (train_dataframe: data/user/oasst/train_full_multilang_allrank.pq).\n\
          \nIt was prepared as this:\n```python\n    ds = load_dataset(\"OpenAssistant/oasst1\"\
          )\n    train = ds[\"train\"].to_pandas()\n    val = ds[\"validation\"].to_pandas()\n\
          \n    df = pd.concat([train, val], axis=0).reset_index(drop=True)\n\n  \
          \  df_assistant = df[(df.role == \"assistant\")].copy()\n    df_prompter\
          \ = df[(df.role == \"prompter\")].copy()\n    df_prompter = df_prompter.set_index(\"\
          message_id\")\n    df_assistant[\"output\"] = df_assistant[\"text\"].values\n\
          \n    inputs = []\n    parent_ids = []\n    for _, row in df_assistant.iterrows():\n\
          \        input = df_prompter.loc[row.parent_id]\n        inputs.append(input.text)\n\
          \        parent_ids.append(input.parent_id)\n\n    df_assistant[\"instruction\"\
          ] = inputs\n    df_assistant[\"parent_id\"] = parent_ids\n\n    df_assistant\
          \ = df_assistant[\n        [\"instruction\", \"output\", \"message_id\"\
          , \"parent_id\", \"lang\", \"rank\"]\n    ].rename(columns={\"message_id\"\
          : \"id\"})\n\n    df_assistant[(df_assistant[\"rank\"] == 0.0) & (df_assistant[\"\
          lang\"] == \"en\")][\n        [\"instruction\", \"output\", \"id\", \"parent_id\"\
          ]\n    ].to_parquet(os.path.join(path, \"train_full.pq\"), index=False)\n\
          \n    df_assistant[df_assistant[\"lang\"] == \"en\"][\n        [\"instruction\"\
          , \"output\", \"id\", \"parent_id\"]\n    ].to_parquet(os.path.join(path,\
          \ \"train_full_allrank.pq\"), index=False)\n\n    df_assistant[df_assistant[\"\
          rank\"] == 0.0][\n        [\"instruction\", \"output\", \"id\", \"parent_id\"\
          ]\n    ].to_parquet(os.path.join(path, \"train_full_multilang.pq\"), index=False)\n\
          \n    df_assistant[[\"instruction\", \"output\", \"id\", \"parent_id\"]].to_parquet(\n\
          \        os.path.join(path, \"train_full_multilang_allrank.pq\"), index=False\n\
          \    )\n```"
        updatedAt: '2023-09-27T10:58:51.703Z'
      numEdits: 0
      reactions: []
    id: 65140aeb0aa4e2fff9912620
    type: comment
  author: ilu000
  content: "Thanks for the question. This model was trained on all Q&A pairs from\
    \ all languages in the OASST dataset (train_dataframe: data/user/oasst/train_full_multilang_allrank.pq).\n\
    \nIt was prepared as this:\n```python\n    ds = load_dataset(\"OpenAssistant/oasst1\"\
    )\n    train = ds[\"train\"].to_pandas()\n    val = ds[\"validation\"].to_pandas()\n\
    \n    df = pd.concat([train, val], axis=0).reset_index(drop=True)\n\n    df_assistant\
    \ = df[(df.role == \"assistant\")].copy()\n    df_prompter = df[(df.role == \"\
    prompter\")].copy()\n    df_prompter = df_prompter.set_index(\"message_id\")\n\
    \    df_assistant[\"output\"] = df_assistant[\"text\"].values\n\n    inputs =\
    \ []\n    parent_ids = []\n    for _, row in df_assistant.iterrows():\n      \
    \  input = df_prompter.loc[row.parent_id]\n        inputs.append(input.text)\n\
    \        parent_ids.append(input.parent_id)\n\n    df_assistant[\"instruction\"\
    ] = inputs\n    df_assistant[\"parent_id\"] = parent_ids\n\n    df_assistant =\
    \ df_assistant[\n        [\"instruction\", \"output\", \"message_id\", \"parent_id\"\
    , \"lang\", \"rank\"]\n    ].rename(columns={\"message_id\": \"id\"})\n\n    df_assistant[(df_assistant[\"\
    rank\"] == 0.0) & (df_assistant[\"lang\"] == \"en\")][\n        [\"instruction\"\
    , \"output\", \"id\", \"parent_id\"]\n    ].to_parquet(os.path.join(path, \"train_full.pq\"\
    ), index=False)\n\n    df_assistant[df_assistant[\"lang\"] == \"en\"][\n     \
    \   [\"instruction\", \"output\", \"id\", \"parent_id\"]\n    ].to_parquet(os.path.join(path,\
    \ \"train_full_allrank.pq\"), index=False)\n\n    df_assistant[df_assistant[\"\
    rank\"] == 0.0][\n        [\"instruction\", \"output\", \"id\", \"parent_id\"\
    ]\n    ].to_parquet(os.path.join(path, \"train_full_multilang.pq\"), index=False)\n\
    \n    df_assistant[[\"instruction\", \"output\", \"id\", \"parent_id\"]].to_parquet(\n\
    \        os.path.join(path, \"train_full_multilang_allrank.pq\"), index=False\n\
    \    )\n```"
  created_at: 2023-09-27 09:58:51+00:00
  edited: false
  hidden: false
  id: 65140aeb0aa4e2fff9912620
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 3
repo_id: h2oai/h2ogpt-gm-oasst1-multilang-2048-falcon-7b
repo_type: model
status: open
target_branch: null
title: In which way is this "multilang?
