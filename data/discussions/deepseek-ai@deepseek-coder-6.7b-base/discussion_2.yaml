!!python/object:huggingface_hub.community.DiscussionWithDetails
author: fawogin598
conflicting_files: null
created_at: 2024-01-05 16:36:12+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/aa437548499a25db29faab2af3111837.svg
      fullname: fa wogin
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: fawogin598
      type: user
    createdAt: '2024-01-05T16:36:12.000Z'
    data:
      edited: false
      editors:
      - fawogin598
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.6614448428153992
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/aa437548499a25db29faab2af3111837.svg
          fullname: fa wogin
          isHf: false
          isPro: false
          name: fawogin598
          type: user
        html: '<p>Unfortunately, it was trained on data dating before 2023.<br>"prompt":"write
          sveltekit code for a todo app"<br>"response": "Sure, below is a basic example
          of a Todo application in SvelteKit. This includes creating and deleting
          todos:\n\n1. Firstly, install SvelteKit if you haven''t done so yet:\n<code>bash\nnpx
          degit sveltejs/svelte-kit my-app\ncd my-app\nnpm install\n</code>\n2. Create
          a new file <code>src/routes/index.svelte</code> for the todo app:\n\n<code>svelte\n&lt;script&gt;\n    let
          todos = [];\n    let inputValue = \"\";\n    \n    function addTodo() {\n        if
          (inputValue !== \"\") {\n            todos = [...todos, inputValue];\n            inputValue
          = \"\";\n        }\n    }\n\n    function deleteTodo(index) {\n        todos
          = todos.filter((_, i) =&gt; i !== index);\n    }\n&lt;/script&gt;\n\n&lt;input
          bind:value={inputValue} type=\"text\"&gt;\n&lt;button on:click={addTodo}&gt;Add
          Todo&lt;/button&gt;\n\n&lt;ul&gt;\n    {#each todos as todo, index (index)}\n        &lt;li&gt;\n            {todo}
          \n            &lt;button on:click={() =&gt; deleteTodo(index)}&gt;Delete&lt;/button&gt;\n        &lt;/li&gt;\n    {/each}\n&lt;/ul&gt;\n</code>\n3.
          Run the application by using <code>npm run dev</code> command in your terminal
          and then opening <code>localhost:5000</code> in your browser to view the
          result.\n\nThis is a very basic example, you may want to persist data (like
          saving todos to a database) or handle errors/edge cases based on your needs.
          For that, SvelteKit provides several features like actions and stores which
          can be used as per requirements.\n",<br>This is not recent sveltekit (routes/+page.svelte,
          ...).<br>So sad, it''s a pretty fast model.</p>

          '
        raw: "Unfortunately, it was trained on data dating before 2023.\r\n\"prompt\"\
          :\"write sveltekit code for a todo app\"\r\n\"response\": \"Sure, below\
          \ is a basic example of a Todo application in SvelteKit. This includes creating\
          \ and deleting todos:\\n\\n1. Firstly, install SvelteKit if you haven't\
          \ done so yet:\\n```bash\\nnpx degit sveltejs/svelte-kit my-app\\ncd my-app\\\
          nnpm install\\n```\\n2. Create a new file `src/routes/index.svelte` for\
          \ the todo app:\\n\\n```svelte\\n<script>\\n    let todos = [];\\n    let\
          \ inputValue = \\\"\\\";\\n    \\n    function addTodo() {\\n        if\
          \ (inputValue !== \\\"\\\") {\\n            todos = [...todos, inputValue];\\\
          n            inputValue = \\\"\\\";\\n        }\\n    }\\n\\n    function\
          \ deleteTodo(index) {\\n        todos = todos.filter((_, i) => i !== index);\\\
          n    }\\n</script>\\n\\n<input bind:value={inputValue} type=\\\"text\\\"\
          >\\n<button on:click={addTodo}>Add Todo</button>\\n\\n<ul>\\n    {#each\
          \ todos as todo, index (index)}\\n        <li>\\n            {todo} \\n\
          \            <button on:click={() => deleteTodo(index)}>Delete</button>\\\
          n        </li>\\n    {/each}\\n</ul>\\n```\\n3. Run the application by using\
          \ `npm run dev` command in your terminal and then opening `localhost:5000`\
          \ in your browser to view the result.\\n\\nThis is a very basic example,\
          \ you may want to persist data (like saving todos to a database) or handle\
          \ errors/edge cases based on your needs. For that, SvelteKit provides several\
          \ features like actions and stores which can be used as per requirements.\\\
          n\",\r\nThis is not recent sveltekit (routes/+page.svelte, ...).\r\nSo sad,\
          \ it's a pretty fast model.\r\n"
        updatedAt: '2024-01-05T16:36:12.060Z'
      numEdits: 0
      reactions: []
    id: 65982ffcb166a0b961cc16ce
    type: comment
  author: fawogin598
  content: "Unfortunately, it was trained on data dating before 2023.\r\n\"prompt\"\
    :\"write sveltekit code for a todo app\"\r\n\"response\": \"Sure, below is a basic\
    \ example of a Todo application in SvelteKit. This includes creating and deleting\
    \ todos:\\n\\n1. Firstly, install SvelteKit if you haven't done so yet:\\n```bash\\\
    nnpx degit sveltejs/svelte-kit my-app\\ncd my-app\\nnpm install\\n```\\n2. Create\
    \ a new file `src/routes/index.svelte` for the todo app:\\n\\n```svelte\\n<script>\\\
    n    let todos = [];\\n    let inputValue = \\\"\\\";\\n    \\n    function addTodo()\
    \ {\\n        if (inputValue !== \\\"\\\") {\\n            todos = [...todos,\
    \ inputValue];\\n            inputValue = \\\"\\\";\\n        }\\n    }\\n\\n\
    \    function deleteTodo(index) {\\n        todos = todos.filter((_, i) => i !==\
    \ index);\\n    }\\n</script>\\n\\n<input bind:value={inputValue} type=\\\"text\\\
    \">\\n<button on:click={addTodo}>Add Todo</button>\\n\\n<ul>\\n    {#each todos\
    \ as todo, index (index)}\\n        <li>\\n            {todo} \\n            <button\
    \ on:click={() => deleteTodo(index)}>Delete</button>\\n        </li>\\n    {/each}\\\
    n</ul>\\n```\\n3. Run the application by using `npm run dev` command in your terminal\
    \ and then opening `localhost:5000` in your browser to view the result.\\n\\nThis\
    \ is a very basic example, you may want to persist data (like saving todos to\
    \ a database) or handle errors/edge cases based on your needs. For that, SvelteKit\
    \ provides several features like actions and stores which can be used as per requirements.\\\
    n\",\r\nThis is not recent sveltekit (routes/+page.svelte, ...).\r\nSo sad, it's\
    \ a pretty fast model.\r\n"
  created_at: 2024-01-05 16:36:12+00:00
  edited: false
  hidden: false
  id: 65982ffcb166a0b961cc16ce
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 2
repo_id: deepseek-ai/deepseek-coder-6.7b-base
repo_type: model
status: open
target_branch: null
title: trained on old code
