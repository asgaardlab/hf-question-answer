!!python/object:huggingface_hub.community.DiscussionWithDetails
author: VirtualCorn
conflicting_files: null
created_at: 2023-06-07 17:20:37+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/419b958350ade0c31a12f005304fc984.svg
      fullname: gregoire
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: VirtualCorn
      type: user
    createdAt: '2023-06-07T18:20:37.000Z'
    data:
      edited: false
      editors:
      - VirtualCorn
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.8421200513839722
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/419b958350ade0c31a12f005304fc984.svg
          fullname: gregoire
          isHf: false
          isPro: false
          name: VirtualCorn
          type: user
        html: '<p>Hi, I''m trying to use this model in Python with transformers as
          follow:</p>

          <pre><code class="language-py"><span class="hljs-keyword">from</span> transformers
          <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM


          tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">"TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ"</span>)


          model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">"TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ"</span>)

          </code></pre>

          <p>but I get an obvious error in the last line:</p>

          <pre><code>OSError: TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ does not
          appear to have a file named pytorch_model.bin, tf_model.h5, model.ckpt or
          flax_model.msgpack.

          </code></pre>

          <p>There are none of those files in the model repository. I read the README.md
          but I didn''t find any info about that. Sorry for my newbie question but
          what am I doing wrong?</p>

          '
        raw: "Hi, I'm trying to use this model in Python with transformers as follow:\r\
          \n``` py\r\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\r\
          \n\r\ntokenizer = AutoTokenizer.from_pretrained(\"TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ\"\
          )\r\n\r\nmodel = AutoModelForCausalLM.from_pretrained(\"TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ\"\
          )\r\n```\r\n\r\nbut I get an obvious error in the last line:\r\n```\r\n\
          OSError: TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ does not appear to have\
          \ a file named pytorch_model.bin, tf_model.h5, model.ckpt or flax_model.msgpack.\r\
          \n```\r\n\r\nThere are none of those files in the model repository. I read\
          \ the README.md but I didn't find any info about that. Sorry for my newbie\
          \ question but what am I doing wrong?"
        updatedAt: '2023-06-07T18:20:37.902Z'
      numEdits: 0
      reactions: []
    id: 6480ca75de559d48dbb2d6bf
    type: comment
  author: VirtualCorn
  content: "Hi, I'm trying to use this model in Python with transformers as follow:\r\
    \n``` py\r\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\r\n\r\
    \ntokenizer = AutoTokenizer.from_pretrained(\"TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ\"\
    )\r\n\r\nmodel = AutoModelForCausalLM.from_pretrained(\"TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ\"\
    )\r\n```\r\n\r\nbut I get an obvious error in the last line:\r\n```\r\nOSError:\
    \ TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ does not appear to have a file named\
    \ pytorch_model.bin, tf_model.h5, model.ckpt or flax_model.msgpack.\r\n```\r\n\
    \r\nThere are none of those files in the model repository. I read the README.md\
    \ but I didn't find any info about that. Sorry for my newbie question but what\
    \ am I doing wrong?"
  created_at: 2023-06-07 17:20:37+00:00
  edited: false
  hidden: false
  id: 6480ca75de559d48dbb2d6bf
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/6426d3f3a7723d62b53c259b/tvPikpAzKTKGN5wrpadOJ.jpeg?w=200&h=200&f=face
      fullname: Tom Jobbins
      isHf: false
      isOrgMember: false
      isOwner: true
      isPro: true
      name: TheBloke
      type: user
    createdAt: '2023-06-07T18:28:11.000Z'
    data:
      edited: true
      editors:
      - TheBloke
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.323735773563385
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/6426d3f3a7723d62b53c259b/tvPikpAzKTKGN5wrpadOJ.jpeg?w=200&h=200&f=face
          fullname: Tom Jobbins
          isHf: false
          isPro: true
          name: TheBloke
          type: user
        html: "<p>This is a GPTQ quantised model. It can't be loaded directly from\
          \ transformers. Instead you need to use a library called <a rel=\"nofollow\"\
          \ href=\"https://github.com/PanQiWei/AutoGPTQ\">AutoGPTQ</a>.</p>\n<p>Here's\
          \ some sample code that can load any GPTQ model and do inference tests on\
          \ it:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\"\
          >from</span> transformers <span class=\"hljs-keyword\">import</span> AutoTokenizer,\
          \ pipeline, logging\n<span class=\"hljs-keyword\">from</span> auto_gptq\
          \ <span class=\"hljs-keyword\">import</span> AutoGPTQForCausalLM, BaseQuantizeConfig\n\
          <span class=\"hljs-keyword\">import</span> argparse\n\nparser = argparse.ArgumentParser(description=<span\
          \ class=\"hljs-string\">'Simple AutoGPTQ example'</span>)\nparser.add_argument(<span\
          \ class=\"hljs-string\">'model_name_or_path'</span>, <span class=\"hljs-built_in\"\
          >type</span>=<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\"\
          >help</span>=<span class=\"hljs-string\">'Model folder or repo'</span>)\n\
          parser.add_argument(<span class=\"hljs-string\">'--model_basename'</span>,\
          \ <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-built_in\"\
          >str</span>, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\"\
          >'Model file basename if model is not named gptq_model-Xb-Ygr'</span>)\n\
          parser.add_argument(<span class=\"hljs-string\">'--use_slow'</span>, action=<span\
          \ class=\"hljs-string\">\"store_true\"</span>, <span class=\"hljs-built_in\"\
          >help</span>=<span class=\"hljs-string\">'Use slow tokenizer'</span>)\n\
          parser.add_argument(<span class=\"hljs-string\">'--use_safetensors'</span>,\
          \ action=<span class=\"hljs-string\">\"store_true\"</span>, <span class=\"\
          hljs-built_in\">help</span>=<span class=\"hljs-string\">'Model file basename\
          \ if model is not named gptq_model-Xb-Ygr'</span>)\nparser.add_argument(<span\
          \ class=\"hljs-string\">'--use_triton'</span>, action=<span class=\"hljs-string\"\
          >\"store_true\"</span>, <span class=\"hljs-built_in\">help</span>=<span\
          \ class=\"hljs-string\">'Use Triton for inference?'</span>)\nparser.add_argument(<span\
          \ class=\"hljs-string\">'--bits'</span>, <span class=\"hljs-built_in\">type</span>=<span\
          \ class=\"hljs-built_in\">int</span>, default=<span class=\"hljs-number\"\
          >4</span>, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\"\
          >'Specify GPTQ bits. Only needed if no quantize_config.json is provided'</span>)\n\
          parser.add_argument(<span class=\"hljs-string\">'--group_size'</span>, <span\
          \ class=\"hljs-built_in\">type</span>=<span class=\"hljs-built_in\">int</span>,\
          \ default=<span class=\"hljs-number\">128</span>, <span class=\"hljs-built_in\"\
          >help</span>=<span class=\"hljs-string\">'Specify GPTQ group_size. Only\
          \ needed if no quantize_config.json is provided'</span>)\nparser.add_argument(<span\
          \ class=\"hljs-string\">'--desc_act'</span>, action=<span class=\"hljs-string\"\
          >\"store_true\"</span>, <span class=\"hljs-built_in\">help</span>=<span\
          \ class=\"hljs-string\">'Specify GPTQ desc_act. Only needed if no quantize_config.json\
          \ is provided'</span>)\n\nargs = parser.parse_args()\n\nquantized_model_dir\
          \ = args.model_name_or_path\n\ntokenizer = AutoTokenizer.from_pretrained(quantized_model_dir,\
          \ use_fast=<span class=\"hljs-keyword\">not</span> args.use_slow)\n\n<span\
          \ class=\"hljs-keyword\">try</span>:\n   quantize_config = BaseQuantizeConfig.from_pretrained(quantized_model_dir)\n\
          <span class=\"hljs-keyword\">except</span>:\n    quantize_config = BaseQuantizeConfig(\n\
          \            bits=args.bits,\n            group_size=args.group_size,\n\
          \            desc_act=args.desc_act\n        )\n\nmodel = AutoGPTQForCausalLM.from_quantized(quantized_model_dir,\n\
          \        use_safetensors=<span class=\"hljs-literal\">True</span>,\n   \
          \     model_basename=args.model_basename,\n        device=<span class=\"\
          hljs-string\">\"cuda:0\"</span>,\n        use_triton=args.use_triton,\n\
          \        quantize_config=quantize_config)\n\n<span class=\"hljs-comment\"\
          ># Prevent printing spurious transformers error when using pipeline with\
          \ AutoGPTQ</span>\nlogging.set_verbosity(logging.CRITICAL)\n\nprompt = <span\
          \ class=\"hljs-string\">\"Tell me about AI\"</span>\nprompt_template=<span\
          \ class=\"hljs-string\">f'''### Human: <span class=\"hljs-subst\">{prompt}</span></span>\n\
          <span class=\"hljs-string\">### Assistant:'''</span>\n\n<span class=\"hljs-built_in\"\
          >print</span>(<span class=\"hljs-string\">\"*** Pipeline:\"</span>)\npipe\
          \ = pipeline(\n    <span class=\"hljs-string\">\"text-generation\"</span>,\n\
          \    model=model,\n    tokenizer=tokenizer,\n    max_new_tokens=<span class=\"\
          hljs-number\">512</span>,\n    temperature=<span class=\"hljs-number\">0.7</span>,\n\
          \    top_p=<span class=\"hljs-number\">0.95</span>,\n    repetition_penalty=<span\
          \ class=\"hljs-number\">1.15</span>\n)\n\n<span class=\"hljs-built_in\"\
          >print</span>(pipe(prompt_template)[<span class=\"hljs-number\">0</span>][<span\
          \ class=\"hljs-string\">'generated_text'</span>])\n\n<span class=\"hljs-built_in\"\
          >print</span>(<span class=\"hljs-string\">\"\\n\\n*** Generate:\"</span>)\n\
          \ninput_ids = tokenizer(prompt_template, return_tensors=<span class=\"hljs-string\"\
          >'pt'</span>).input_ids.cuda()\noutput = model.generate(inputs=input_ids,\
          \ temperature=<span class=\"hljs-number\">0.7</span>, max_new_tokens=<span\
          \ class=\"hljs-number\">512</span>)\n<span class=\"hljs-built_in\">print</span>(tokenizer.decode(output[<span\
          \ class=\"hljs-number\">0</span>]))\n</code></pre>\n<p>For this model, you\
          \ would execute that script like this:</p>\n<pre><code>python simple_autogptq_example.py\
          \ 'TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ' --model_basename 'Wizard-Vicuna-13B-Uncensored-GPTQ-4bit-128g.compat.no-act-order'\
          \ --use_safetensors\n</code></pre>\n<p>So you can copy the bits you need\
          \ out of the script and use them in your own code.</p>\n"
        raw: "This is a GPTQ quantised model. It can't be loaded directly from transformers.\
          \ Instead you need to use a library called [AutoGPTQ](https://github.com/PanQiWei/AutoGPTQ).\n\
          \nHere's some sample code that can load any GPTQ model and do inference\
          \ tests on it:\n```python\nfrom transformers import AutoTokenizer, pipeline,\
          \ logging\nfrom auto_gptq import AutoGPTQForCausalLM, BaseQuantizeConfig\n\
          import argparse\n\nparser = argparse.ArgumentParser(description='Simple\
          \ AutoGPTQ example')\nparser.add_argument('model_name_or_path', type=str,\
          \ help='Model folder or repo')\nparser.add_argument('--model_basename',\
          \ type=str, help='Model file basename if model is not named gptq_model-Xb-Ygr')\n\
          parser.add_argument('--use_slow', action=\"store_true\", help='Use slow\
          \ tokenizer')\nparser.add_argument('--use_safetensors', action=\"store_true\"\
          , help='Model file basename if model is not named gptq_model-Xb-Ygr')\n\
          parser.add_argument('--use_triton', action=\"store_true\", help='Use Triton\
          \ for inference?')\nparser.add_argument('--bits', type=int, default=4, help='Specify\
          \ GPTQ bits. Only needed if no quantize_config.json is provided')\nparser.add_argument('--group_size',\
          \ type=int, default=128, help='Specify GPTQ group_size. Only needed if no\
          \ quantize_config.json is provided')\nparser.add_argument('--desc_act',\
          \ action=\"store_true\", help='Specify GPTQ desc_act. Only needed if no\
          \ quantize_config.json is provided')\n\nargs = parser.parse_args()\n\nquantized_model_dir\
          \ = args.model_name_or_path\n\ntokenizer = AutoTokenizer.from_pretrained(quantized_model_dir,\
          \ use_fast=not args.use_slow)\n\ntry:\n   quantize_config = BaseQuantizeConfig.from_pretrained(quantized_model_dir)\n\
          except:\n    quantize_config = BaseQuantizeConfig(\n            bits=args.bits,\n\
          \            group_size=args.group_size,\n            desc_act=args.desc_act\n\
          \        )\n\nmodel = AutoGPTQForCausalLM.from_quantized(quantized_model_dir,\n\
          \        use_safetensors=True,\n        model_basename=args.model_basename,\n\
          \        device=\"cuda:0\",\n        use_triton=args.use_triton,\n     \
          \   quantize_config=quantize_config)\n\n# Prevent printing spurious transformers\
          \ error when using pipeline with AutoGPTQ\nlogging.set_verbosity(logging.CRITICAL)\n\
          \nprompt = \"Tell me about AI\"\nprompt_template=f'''### Human: {prompt}\n\
          ### Assistant:'''\n\nprint(\"*** Pipeline:\")\npipe = pipeline(\n    \"\
          text-generation\",\n    model=model,\n    tokenizer=tokenizer,\n    max_new_tokens=512,\n\
          \    temperature=0.7,\n    top_p=0.95,\n    repetition_penalty=1.15\n)\n\
          \nprint(pipe(prompt_template)[0]['generated_text'])\n\nprint(\"\\n\\n***\
          \ Generate:\")\n\ninput_ids = tokenizer(prompt_template, return_tensors='pt').input_ids.cuda()\n\
          output = model.generate(inputs=input_ids, temperature=0.7, max_new_tokens=512)\n\
          print(tokenizer.decode(output[0]))\n```\n\nFor this model, you would execute\
          \ that script like this:\n\n```\npython simple_autogptq_example.py 'TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ'\
          \ --model_basename 'Wizard-Vicuna-13B-Uncensored-GPTQ-4bit-128g.compat.no-act-order'\
          \ --use_safetensors\n```\n\nSo you can copy the bits you need out of the\
          \ script and use them in your own code."
        updatedAt: '2023-06-07T18:28:37.459Z'
      numEdits: 1
      reactions: []
    id: 6480cc3be1421e205fdd3580
    type: comment
  author: TheBloke
  content: "This is a GPTQ quantised model. It can't be loaded directly from transformers.\
    \ Instead you need to use a library called [AutoGPTQ](https://github.com/PanQiWei/AutoGPTQ).\n\
    \nHere's some sample code that can load any GPTQ model and do inference tests\
    \ on it:\n```python\nfrom transformers import AutoTokenizer, pipeline, logging\n\
    from auto_gptq import AutoGPTQForCausalLM, BaseQuantizeConfig\nimport argparse\n\
    \nparser = argparse.ArgumentParser(description='Simple AutoGPTQ example')\nparser.add_argument('model_name_or_path',\
    \ type=str, help='Model folder or repo')\nparser.add_argument('--model_basename',\
    \ type=str, help='Model file basename if model is not named gptq_model-Xb-Ygr')\n\
    parser.add_argument('--use_slow', action=\"store_true\", help='Use slow tokenizer')\n\
    parser.add_argument('--use_safetensors', action=\"store_true\", help='Model file\
    \ basename if model is not named gptq_model-Xb-Ygr')\nparser.add_argument('--use_triton',\
    \ action=\"store_true\", help='Use Triton for inference?')\nparser.add_argument('--bits',\
    \ type=int, default=4, help='Specify GPTQ bits. Only needed if no quantize_config.json\
    \ is provided')\nparser.add_argument('--group_size', type=int, default=128, help='Specify\
    \ GPTQ group_size. Only needed if no quantize_config.json is provided')\nparser.add_argument('--desc_act',\
    \ action=\"store_true\", help='Specify GPTQ desc_act. Only needed if no quantize_config.json\
    \ is provided')\n\nargs = parser.parse_args()\n\nquantized_model_dir = args.model_name_or_path\n\
    \ntokenizer = AutoTokenizer.from_pretrained(quantized_model_dir, use_fast=not\
    \ args.use_slow)\n\ntry:\n   quantize_config = BaseQuantizeConfig.from_pretrained(quantized_model_dir)\n\
    except:\n    quantize_config = BaseQuantizeConfig(\n            bits=args.bits,\n\
    \            group_size=args.group_size,\n            desc_act=args.desc_act\n\
    \        )\n\nmodel = AutoGPTQForCausalLM.from_quantized(quantized_model_dir,\n\
    \        use_safetensors=True,\n        model_basename=args.model_basename,\n\
    \        device=\"cuda:0\",\n        use_triton=args.use_triton,\n        quantize_config=quantize_config)\n\
    \n# Prevent printing spurious transformers error when using pipeline with AutoGPTQ\n\
    logging.set_verbosity(logging.CRITICAL)\n\nprompt = \"Tell me about AI\"\nprompt_template=f'''###\
    \ Human: {prompt}\n### Assistant:'''\n\nprint(\"*** Pipeline:\")\npipe = pipeline(\n\
    \    \"text-generation\",\n    model=model,\n    tokenizer=tokenizer,\n    max_new_tokens=512,\n\
    \    temperature=0.7,\n    top_p=0.95,\n    repetition_penalty=1.15\n)\n\nprint(pipe(prompt_template)[0]['generated_text'])\n\
    \nprint(\"\\n\\n*** Generate:\")\n\ninput_ids = tokenizer(prompt_template, return_tensors='pt').input_ids.cuda()\n\
    output = model.generate(inputs=input_ids, temperature=0.7, max_new_tokens=512)\n\
    print(tokenizer.decode(output[0]))\n```\n\nFor this model, you would execute that\
    \ script like this:\n\n```\npython simple_autogptq_example.py 'TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ'\
    \ --model_basename 'Wizard-Vicuna-13B-Uncensored-GPTQ-4bit-128g.compat.no-act-order'\
    \ --use_safetensors\n```\n\nSo you can copy the bits you need out of the script\
    \ and use them in your own code."
  created_at: 2023-06-07 17:28:11+00:00
  edited: true
  hidden: false
  id: 6480cc3be1421e205fdd3580
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/419b958350ade0c31a12f005304fc984.svg
      fullname: gregoire
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: VirtualCorn
      type: user
    createdAt: '2023-06-09T16:29:55.000Z'
    data:
      edited: false
      editors:
      - VirtualCorn
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9874957203865051
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/419b958350ade0c31a12f005304fc984.svg
          fullname: gregoire
          isHf: false
          isPro: false
          name: VirtualCorn
          type: user
        html: '<p>Sorry for the late reply, it worked for me and I also learned a
          lot trying to implement things!</p>

          <p>Thanks a lot!</p>

          '
        raw: 'Sorry for the late reply, it worked for me and I also learned a lot
          trying to implement things!


          Thanks a lot!'
        updatedAt: '2023-06-09T16:29:55.045Z'
      numEdits: 0
      reactions: []
    id: 64835383ce92d8498dbbbc99
    type: comment
  author: VirtualCorn
  content: 'Sorry for the late reply, it worked for me and I also learned a lot trying
    to implement things!


    Thanks a lot!'
  created_at: 2023-06-09 15:29:55+00:00
  edited: false
  hidden: false
  id: 64835383ce92d8498dbbbc99
  type: comment
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: /avatars/419b958350ade0c31a12f005304fc984.svg
      fullname: gregoire
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: VirtualCorn
      type: user
    createdAt: '2023-06-09T16:30:01.000Z'
    data:
      status: closed
    id: 64835389c2270b9a375b6a53
    type: status-change
  author: VirtualCorn
  created_at: 2023-06-09 15:30:01+00:00
  id: 64835389c2270b9a375b6a53
  new_status: closed
  type: status-change
is_pull_request: false
merge_commit_oid: null
num: 10
repo_id: TheBloke/Wizard-Vicuna-13B-Uncensored-GPTQ
repo_type: model
status: closed
target_branch: null
title: Error missing files
