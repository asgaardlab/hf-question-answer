!!python/object:huggingface_hub.community.DiscussionWithDetails
author: fgatti675
conflicting_files: null
created_at: 2022-12-02 17:10:55+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/e27276b53f7e959ec4fa3e9dde5318a1.svg
      fullname: Francesco Gatti
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: fgatti675
      type: user
    createdAt: '2022-12-02T17:10:55.000Z'
    data:
      edited: false
      editors:
      - fgatti675
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/e27276b53f7e959ec4fa3e9dde5318a1.svg
          fullname: Francesco Gatti
          isHf: false
          isPro: false
          name: fgatti675
          type: user
        html: "<p>Hi everyone! I am trying bloom and I'm really enjoying the results\
          \ so far.<br>I would like to know if it is possible to get bloom to return\
          \ structured data.<br>Let's say I have a bunch of objects, and I would like\
          \ to fill the data for the missing fields:</p>\n<pre><code>[\n        {\n\
          \            \"title\": \"Adopt a Pescatarian diet\",\n            \"completed_question\"\
          : \"Have you managed to adopt a Pescatarian diet?\",\n        }, {\n   \
          \         \"title\": \"Regulate the temperature at home\",\n           \
          \ \"completed_question\": \"\", // I would like to fill this in\n      \
          \  },\n        // Ideally have additional objects or fields here!\n    ]\n\
          </code></pre>\n<p>Any help is greatly appreciated!!</p>\n"
        raw: "Hi everyone! I am trying bloom and I'm really enjoying the results so\
          \ far.\r\nI would like to know if it is possible to get bloom to return\
          \ structured data. \r\nLet's say I have a bunch of objects, and I would\
          \ like to fill the data for the missing fields:\r\n```\r\n[\r\n        {\r\
          \n            \"title\": \"Adopt a Pescatarian diet\",\r\n            \"\
          completed_question\": \"Have you managed to adopt a Pescatarian diet?\"\
          ,\r\n        }, {\r\n            \"title\": \"Regulate the temperature at\
          \ home\",\r\n            \"completed_question\": \"\", // I would like to\
          \ fill this in\r\n        },\r\n        // Ideally have additional objects\
          \ or fields here!\r\n    ]\r\n```\r\nAny help is greatly appreciated!!\r\
          \n"
        updatedAt: '2022-12-02T17:10:55.711Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\u2764\uFE0F"
        users:
        - julien-c
    id: 638a319fd87b130fa7fd6512
    type: comment
  author: fgatti675
  content: "Hi everyone! I am trying bloom and I'm really enjoying the results so\
    \ far.\r\nI would like to know if it is possible to get bloom to return structured\
    \ data. \r\nLet's say I have a bunch of objects, and I would like to fill the\
    \ data for the missing fields:\r\n```\r\n[\r\n        {\r\n            \"title\"\
    : \"Adopt a Pescatarian diet\",\r\n            \"completed_question\": \"Have\
    \ you managed to adopt a Pescatarian diet?\",\r\n        }, {\r\n            \"\
    title\": \"Regulate the temperature at home\",\r\n            \"completed_question\"\
    : \"\", // I would like to fill this in\r\n        },\r\n        // Ideally have\
    \ additional objects or fields here!\r\n    ]\r\n```\r\nAny help is greatly appreciated!!\r\
    \n"
  created_at: 2022-12-02 17:10:55+00:00
  edited: false
  hidden: false
  id: 638a319fd87b130fa7fd6512
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/3d6e4b4d02eda7b5ef28e1cc0fb8e08a.svg
      fullname: Thomas Wang
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: TimeRobber
      type: user
    createdAt: '2022-12-03T18:03:22.000Z'
    data:
      edited: false
      editors:
      - TimeRobber
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/3d6e4b4d02eda7b5ef28e1cc0fb8e08a.svg
          fullname: Thomas Wang
          isHf: false
          isPro: false
          name: TimeRobber
          type: user
        html: "<p>I tried prompting <a href=\"https://huggingface.co/bigscience/bloom\"\
          >BLOOM</a> with the following prompt:</p>\n<pre><code>What are the \"question\"\
          \ and \"objects\" in the following python script:\n\ndef get_json(question,\
          \ objects):\n    return [\n        {\n            \"title\": \"Adopt a Pescatarian\
          \ diet\",\n            \"completed_question\": \"Have you managed to adopt\
          \ a Pescatarian diet?\",\n        }, {\n            \"title\": \"Regulate\
          \ the temperature at home\",\n            \"completed_question\": question,\n\
          \        },\n        *objects\n    ]\n\njson_object = get_json(question=\"\
          \n</code></pre>\n<p>It's one way I tried prompting it, but you can try other\
          \ things that are probably going to work better. Essentially the key is\
          \ to figure out how exactly you want to translate your task in a \"language\
          \ modeling\" task, ie  so that the model when generating the next tokens\
          \ is going to be able to solve your task. Good luck with your prompt experiments!</p>\n"
        raw: "I tried prompting [BLOOM](https://huggingface.co/bigscience/bloom) with\
          \ the following prompt:\n\n```\nWhat are the \"question\" and \"objects\"\
          \ in the following python script:\n\ndef get_json(question, objects):\n\
          \    return [\n        {\n            \"title\": \"Adopt a Pescatarian diet\"\
          ,\n            \"completed_question\": \"Have you managed to adopt a Pescatarian\
          \ diet?\",\n        }, {\n            \"title\": \"Regulate the temperature\
          \ at home\",\n            \"completed_question\": question,\n        },\n\
          \        *objects\n    ]\n\njson_object = get_json(question=\"\n```\n\n\
          It's one way I tried prompting it, but you can try other things that are\
          \ probably going to work better. Essentially the key is to figure out how\
          \ exactly you want to translate your task in a \"language modeling\" task,\
          \ ie  so that the model when generating the next tokens is going to be able\
          \ to solve your task. Good luck with your prompt experiments!"
        updatedAt: '2022-12-03T18:03:22.602Z'
      numEdits: 0
      reactions: []
    id: 638b8f6a3bbf29e589047ec1
    type: comment
  author: TimeRobber
  content: "I tried prompting [BLOOM](https://huggingface.co/bigscience/bloom) with\
    \ the following prompt:\n\n```\nWhat are the \"question\" and \"objects\" in the\
    \ following python script:\n\ndef get_json(question, objects):\n    return [\n\
    \        {\n            \"title\": \"Adopt a Pescatarian diet\",\n           \
    \ \"completed_question\": \"Have you managed to adopt a Pescatarian diet?\",\n\
    \        }, {\n            \"title\": \"Regulate the temperature at home\",\n\
    \            \"completed_question\": question,\n        },\n        *objects\n\
    \    ]\n\njson_object = get_json(question=\"\n```\n\nIt's one way I tried prompting\
    \ it, but you can try other things that are probably going to work better. Essentially\
    \ the key is to figure out how exactly you want to translate your task in a \"\
    language modeling\" task, ie  so that the model when generating the next tokens\
    \ is going to be able to solve your task. Good luck with your prompt experiments!"
  created_at: 2022-12-03 18:03:22+00:00
  edited: false
  hidden: false
  id: 638b8f6a3bbf29e589047ec1
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/e27276b53f7e959ec4fa3e9dde5318a1.svg
      fullname: Francesco Gatti
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: fgatti675
      type: user
    createdAt: '2022-12-04T10:18:25.000Z'
    data:
      edited: false
      editors:
      - fgatti675
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/e27276b53f7e959ec4fa3e9dde5318a1.svg
          fullname: Francesco Gatti
          isHf: false
          isPro: false
          name: fgatti675
          type: user
        html: "<p>Hi <span data-props=\"{&quot;user&quot;:&quot;TimeRobber&quot;}\"\
          \ data-target=\"UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\"\
          >\n\n<span class=\"inline-block\"><span class=\"contents\"><a href=\"/TimeRobber\"\
          >@<span class=\"underline\">TimeRobber</span></a></span>\n\n\t</span></span><br>Thanks\
          \ for your answer :)<br>I have tried with different prompts and configs.\
          \ It generates the correct <code>completed_question</code> I would expect,\
          \ but I can't get the data right, which makes it hard to extract the result\
          \ in reliant way.<br>I would typically get results like:</p>\n<pre><code\
          \ class=\"language-[\">{'title': 'Adopt a Pescatarian diet', 'completed_question':\
          \ 'Have you managed to adopt a Pescatarian diet?'}, \n{'title': 'Regulate\
          \ the temperature at home', 'completed_question':  'Have you managed to\
          \ regulate the temperature at home?'}, \n{'title':\n</code></pre>\n<p>In\
          \ this case I could find a workaround, but I'm trying to generate an autocompletion\
          \ system based on existing data which I don't know the shape of. (this data\
          \ is just an example)<br>Ideally it could suggest additional fields, not\
          \ just one.<br>Thanks for your suggestions!</p>\n"
        raw: "Hi @TimeRobber \nThanks for your answer :)\nI have tried with different\
          \ prompts and configs. It generates the correct `completed_question` I would\
          \ expect, but I can't get the data right, which makes it hard to extract\
          \ the result in reliant way.\nI would typically get results like:\n```[\n\
          {'title': 'Adopt a Pescatarian diet', 'completed_question': 'Have you managed\
          \ to adopt a Pescatarian diet?'}, \n{'title': 'Regulate the temperature\
          \ at home', 'completed_question':  'Have you managed to regulate the temperature\
          \ at home?'}, \n{'title':\n```\nIn this case I could find a workaround,\
          \ but I'm trying to generate an autocompletion system based on existing\
          \ data which I don't know the shape of. (this data is just an example)\n\
          Ideally it could suggest additional fields, not just one.\nThanks for your\
          \ suggestions!"
        updatedAt: '2022-12-04T10:18:25.676Z'
      numEdits: 0
      reactions: []
    id: 638c73f15982970665526f95
    type: comment
  author: fgatti675
  content: "Hi @TimeRobber \nThanks for your answer :)\nI have tried with different\
    \ prompts and configs. It generates the correct `completed_question` I would expect,\
    \ but I can't get the data right, which makes it hard to extract the result in\
    \ reliant way.\nI would typically get results like:\n```[\n{'title': 'Adopt a\
    \ Pescatarian diet', 'completed_question': 'Have you managed to adopt a Pescatarian\
    \ diet?'}, \n{'title': 'Regulate the temperature at home', 'completed_question':\
    \  'Have you managed to regulate the temperature at home?'}, \n{'title':\n```\n\
    In this case I could find a workaround, but I'm trying to generate an autocompletion\
    \ system based on existing data which I don't know the shape of. (this data is\
    \ just an example)\nIdeally it could suggest additional fields, not just one.\n\
    Thanks for your suggestions!"
  created_at: 2022-12-04 10:18:25+00:00
  edited: false
  hidden: false
  id: 638c73f15982970665526f95
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 44
repo_id: bigscience/bloom-560m
repo_type: model
status: open
target_branch: null
title: Getting bloom to return structured data
