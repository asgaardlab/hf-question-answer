!!python/object:huggingface_hub.community.DiscussionWithDetails
author: milanabogovic
conflicting_files: null
created_at: 2023-10-17 09:10:12+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/40a5765e233f827dc64688d49d2676ae.svg
      fullname: Milana Bogovic
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: milanabogovic
      type: user
    createdAt: '2023-10-17T10:10:12.000Z'
    data:
      edited: false
      editors:
      - milanabogovic
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9634671211242676
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/40a5765e233f827dc64688d49d2676ae.svg
          fullname: Milana Bogovic
          isHf: false
          isPro: false
          name: milanabogovic
          type: user
        html: '<p>Hello.</p>

          <p>I''m using the code under "How to use", and I''d like to know whether
          there is a possibility to limit the number of languages used for detection,
          and if it is, how could I go about doing that?</p>

          <p>Thank you.</p>

          '
        raw: "Hello.\r\n\r\nI'm using the code under \"How to use\", and I'd like\
          \ to know whether there is a possibility to limit the number of languages\
          \ used for detection, and if it is, how could I go about doing that?\r\n\
          \r\nThank you."
        updatedAt: '2023-10-17T10:10:12.284Z'
      numEdits: 0
      reactions: []
    id: 652e5d84177bc5784f87b5b2
    type: comment
  author: milanabogovic
  content: "Hello.\r\n\r\nI'm using the code under \"How to use\", and I'd like to\
    \ know whether there is a possibility to limit the number of languages used for\
    \ detection, and if it is, how could I go about doing that?\r\n\r\nThank you."
  created_at: 2023-10-17 09:10:12+00:00
  edited: false
  hidden: false
  id: 652e5d84177bc5784f87b5b2
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/44bd30215ada4a43f2bbf1ad77ed6fef.svg
      fullname: Bojan Vukajlovic
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: DomacinskiBurek
      type: user
    createdAt: '2023-10-25T15:22:31.000Z'
    data:
      edited: false
      editors:
      - DomacinskiBurek
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.40058207511901855
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/44bd30215ada4a43f2bbf1ad77ed6fef.svg
          fullname: Bojan Vukajlovic
          isHf: false
          isPro: false
          name: DomacinskiBurek
          type: user
        html: "<p>Hi,<br>I was looking for same solution and I managed to create some\
          \ example.</p>\n<pre><code class=\"language-python\">audio_detector = EncoderClassifier.from_hparams(source=<span\
          \ class=\"hljs-string\">\"apenasissso/lang-id-voxlingua107-ecapa\"</span>,\
          \ savedir=<span class=\"hljs-string\">\"/tmp\"</span>)\nemb = audio_detector.encode_batch(audio)\n\
          \    out_prob = audio_detector.mods.classifier(emb).squeeze(<span class=\"\
          hljs-number\">1</span>)\n    probabilities = F.softmax(out_prob, dim=-<span\
          \ class=\"hljs-number\">1</span>)\n    top_k_values, top_k_indices = torch.topk(probabilities,\
          \ k=<span class=\"hljs-number\">5</span>)\n    results = [{\n        <span\
          \ class=\"hljs-string\">\"label\"</span>: audio_detector.hparams.label_encoder.decode_torch(torch.tensor([idx.item()])),\n\
          \        <span class=\"hljs-string\">\"score\"</span>: value.item()\n  \
          \  } <span class=\"hljs-keyword\">for</span> value, idx <span class=\"hljs-keyword\"\
          >in</span> <span class=\"hljs-built_in\">zip</span>(top_k_values[<span class=\"\
          hljs-number\">0</span>], top_k_indices[<span class=\"hljs-number\">0</span>])]\n\
          </code></pre>\n"
        raw: "Hi, \nI was looking for same solution and I managed to create some example.\n\
          \n```python\naudio_detector = EncoderClassifier.from_hparams(source=\"apenasissso/lang-id-voxlingua107-ecapa\"\
          , savedir=\"/tmp\")\nemb = audio_detector.encode_batch(audio)\n    out_prob\
          \ = audio_detector.mods.classifier(emb).squeeze(1)\n    probabilities =\
          \ F.softmax(out_prob, dim=-1)\n    top_k_values, top_k_indices = torch.topk(probabilities,\
          \ k=5)\n    results = [{\n        \"label\": audio_detector.hparams.label_encoder.decode_torch(torch.tensor([idx.item()])),\n\
          \        \"score\": value.item()\n    } for value, idx in zip(top_k_values[0],\
          \ top_k_indices[0])]\n```"
        updatedAt: '2023-10-25T15:22:31.571Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\U0001F44D"
        users:
        - milanabogovic
    id: 653932b7fc8dea94ef55efa8
    type: comment
  author: DomacinskiBurek
  content: "Hi, \nI was looking for same solution and I managed to create some example.\n\
    \n```python\naudio_detector = EncoderClassifier.from_hparams(source=\"apenasissso/lang-id-voxlingua107-ecapa\"\
    , savedir=\"/tmp\")\nemb = audio_detector.encode_batch(audio)\n    out_prob =\
    \ audio_detector.mods.classifier(emb).squeeze(1)\n    probabilities = F.softmax(out_prob,\
    \ dim=-1)\n    top_k_values, top_k_indices = torch.topk(probabilities, k=5)\n\
    \    results = [{\n        \"label\": audio_detector.hparams.label_encoder.decode_torch(torch.tensor([idx.item()])),\n\
    \        \"score\": value.item()\n    } for value, idx in zip(top_k_values[0],\
    \ top_k_indices[0])]\n```"
  created_at: 2023-10-25 14:22:31+00:00
  edited: false
  hidden: false
  id: 653932b7fc8dea94ef55efa8
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 5
repo_id: speechbrain/lang-id-voxlingua107-ecapa
repo_type: model
status: open
target_branch: null
title: Limiting the number of languages for detection.
