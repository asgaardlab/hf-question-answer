!!python/object:huggingface_hub.community.DiscussionWithDetails
author: scampion
conflicting_files: null
created_at: 2023-10-12 11:55:57+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/6377c9c344def3dd2a85abf6/3Odp10yY6s491P7wFGZ3g.jpeg?w=200&h=200&f=face
      fullname: "S\xE9bastien Campion"
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: scampion
      type: user
    createdAt: '2023-10-12T12:55:57.000Z'
    data:
      edited: false
      editors:
      - scampion
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.3235299289226532
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/6377c9c344def3dd2a85abf6/3Odp10yY6s491P7wFGZ3g.jpeg?w=200&h=200&f=face
          fullname: "S\xE9bastien Campion"
          isHf: false
          isPro: false
          name: scampion
          type: user
        html: '<p>If you need to translate Eurovoc terms, you can download the XML
          version on the <a rel="nofollow" href="https://data.europa.eu/data/datasets/eurovoc">official
          repository</a></p>

          '
        raw: "If you need to translate Eurovoc terms, you can download the XML version\
          \ on the [official repository](https://data.europa.eu/data/datasets/eurovoc)\r\
          \n"
        updatedAt: '2023-10-12T12:55:57.613Z'
      numEdits: 0
      reactions: []
    id: 6527ecdd44fcc8a1fdb18ca8
    type: comment
  author: scampion
  content: "If you need to translate Eurovoc terms, you can download the XML version\
    \ on the [official repository](https://data.europa.eu/data/datasets/eurovoc)\r\
    \n"
  created_at: 2023-10-12 11:55:57+00:00
  edited: false
  hidden: false
  id: 6527ecdd44fcc8a1fdb18ca8
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/04e4f6f58a94609497b280747ddc9ea6.svg
      fullname: Cheniki
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: Nasredine
      type: user
    createdAt: '2023-10-17T08:55:39.000Z'
    data:
      edited: true
      editors:
      - Nasredine
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.38121095299720764
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/04e4f6f58a94609497b280747ddc9ea6.svg
          fullname: Cheniki
          isHf: false
          isPro: false
          name: Nasredine
          type: user
        html: "<p>You can also utilize a SPARQL endpoint for this purpose.</p>\n<p>import\
          \ pandas as pd<br>import time<br>from SPARQLWrapper import SPARQLWrapper,\
          \ JSON<br>from tqdm import tqdm</p>\n<p>def get_eurovoc_code(label, max_retries=5,\
          \ sleep_time=5):<br>    \"\"\"This function returns the Eurovoc code for\
          \ a given label.\"\"\"</p>\n<pre><code># Define the SPARQL endpoint and\
          \ set the return format\nsparql = SPARQLWrapper(\"https://publications.europa.eu/webapi/rdf/sparql\"\
          )\nsparql.setReturnFormat(JSON)\n\n# Set the query with updated conditions\n\
          query = f\"\"\"\nPREFIX cdm: &lt;http://publications.europa.eu/ontology/cdm#&gt;\n\
          SELECT * WHERE {{\n    ?eurovoc &lt;http://www.w3.org/2004/02/skos/core#prefLabel&gt;\
          \ \"{label}\"@en.\n    FILTER(regex(str(?eurovoc), \"http://eurovoc.europa.eu/\"\
          \ ))\n}}\n\"\"\"\n\nsparql.setQuery(query)\n\nretries = 0\nwhile retries\
          \ &lt; max_retries:\n    try:\n        # Execute the query and return the\
          \ Eurovoc code\n        results = sparql.query().convert()\n        for\
          \ result in results[\"results\"][\"bindings\"]:\n            r = result[\"\
          eurovoc\"][\"value\"].split(\"/\")[-1]\n            return r  # assuming\
          \ the Eurovoc code is the last part of the URI\n        return None  # if\
          \ no code found\n    except Exception as e:\n        if \"HTTP Error 503\"\
          \ in str(e):\n            retries += 1\n            time.sleep(sleep_time)\n\
          \        else:\n            raise e\nraise Exception(f\"Failed after {max_retries}\
          \ attempts for label: {label}\")\n</code></pre>\n"
        raw: "You can also utilize a SPARQL endpoint for this purpose.\n\n\nimport\
          \ pandas as pd\nimport time\nfrom SPARQLWrapper import SPARQLWrapper, JSON\n\
          from tqdm import tqdm\n\ndef get_eurovoc_code(label, max_retries=5, sleep_time=5):\n\
          \    \"\"\"This function returns the Eurovoc code for a given label.\"\"\
          \"\n    \n    # Define the SPARQL endpoint and set the return format\n \
          \   sparql = SPARQLWrapper(\"https://publications.europa.eu/webapi/rdf/sparql\"\
          )\n    sparql.setReturnFormat(JSON)\n\n    # Set the query with updated\
          \ conditions\n    query = f\"\"\"\n    PREFIX cdm: <http://publications.europa.eu/ontology/cdm#>\n\
          \    SELECT * WHERE {{\n        ?eurovoc <http://www.w3.org/2004/02/skos/core#prefLabel>\
          \ \"{label}\"@en.\n        FILTER(regex(str(?eurovoc), \"http://eurovoc.europa.eu/\"\
          \ ))\n    }}\n    \"\"\"\n    \n    sparql.setQuery(query)\n\n    retries\
          \ = 0\n    while retries < max_retries:\n        try:\n            # Execute\
          \ the query and return the Eurovoc code\n            results = sparql.query().convert()\n\
          \            for result in results[\"results\"][\"bindings\"]:\n       \
          \         r = result[\"eurovoc\"][\"value\"].split(\"/\")[-1]\n        \
          \        return r  # assuming the Eurovoc code is the last part of the URI\n\
          \            return None  # if no code found\n        except Exception as\
          \ e:\n            if \"HTTP Error 503\" in str(e):\n                retries\
          \ += 1\n                time.sleep(sleep_time)\n            else:\n    \
          \            raise e\n    raise Exception(f\"Failed after {max_retries}\
          \ attempts for label: {label}\")"
        updatedAt: '2023-10-17T09:02:39.318Z'
      numEdits: 4
      reactions: []
    id: 652e4c0ba3da41257d714e47
    type: comment
  author: Nasredine
  content: "You can also utilize a SPARQL endpoint for this purpose.\n\n\nimport pandas\
    \ as pd\nimport time\nfrom SPARQLWrapper import SPARQLWrapper, JSON\nfrom tqdm\
    \ import tqdm\n\ndef get_eurovoc_code(label, max_retries=5, sleep_time=5):\n \
    \   \"\"\"This function returns the Eurovoc code for a given label.\"\"\"\n  \
    \  \n    # Define the SPARQL endpoint and set the return format\n    sparql =\
    \ SPARQLWrapper(\"https://publications.europa.eu/webapi/rdf/sparql\")\n    sparql.setReturnFormat(JSON)\n\
    \n    # Set the query with updated conditions\n    query = f\"\"\"\n    PREFIX\
    \ cdm: <http://publications.europa.eu/ontology/cdm#>\n    SELECT * WHERE {{\n\
    \        ?eurovoc <http://www.w3.org/2004/02/skos/core#prefLabel> \"{label}\"\
    @en.\n        FILTER(regex(str(?eurovoc), \"http://eurovoc.europa.eu/\" ))\n \
    \   }}\n    \"\"\"\n    \n    sparql.setQuery(query)\n\n    retries = 0\n    while\
    \ retries < max_retries:\n        try:\n            # Execute the query and return\
    \ the Eurovoc code\n            results = sparql.query().convert()\n         \
    \   for result in results[\"results\"][\"bindings\"]:\n                r = result[\"\
    eurovoc\"][\"value\"].split(\"/\")[-1]\n                return r  # assuming the\
    \ Eurovoc code is the last part of the URI\n            return None  # if no code\
    \ found\n        except Exception as e:\n            if \"HTTP Error 503\" in\
    \ str(e):\n                retries += 1\n                time.sleep(sleep_time)\n\
    \            else:\n                raise e\n    raise Exception(f\"Failed after\
    \ {max_retries} attempts for label: {label}\")"
  created_at: 2023-10-17 07:55:39+00:00
  edited: true
  hidden: false
  id: 652e4c0ba3da41257d714e47
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 2
repo_id: EuropeanParliament/eurovoc_en
repo_type: model
status: open
target_branch: null
title: Eurovoc dataset for translation or conversion link
