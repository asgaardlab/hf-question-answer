!!python/object:huggingface_hub.community.DiscussionWithDetails
author: tordbb
conflicting_files: null
created_at: 2023-08-22 07:01:45+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/d61d8da7d889ade6b0ae39f192dc0b89.svg
      fullname: "Tord Brands\xE6ter"
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: tordbb
      type: user
    createdAt: '2023-08-22T08:01:45.000Z'
    data:
      edited: false
      editors:
      - tordbb
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.6691533923149109
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/d61d8da7d889ade6b0ae39f192dc0b89.svg
          fullname: "Tord Brands\xE6ter"
          isHf: false
          isPro: false
          name: tordbb
          type: user
        html: '<p>Thanks for a great family of models!</p>

          <p>You may want to add the below prompt as training material when developing
          the nsql further, as nsql-6B (and also nsql-350M) return an invalid SQL-query
          to it. </p>

          <p>Prompt to nsql-6B<br>"""<br>text = """CREATE TABLE stadium (<br>    stadium_id
          number,<br>    location text,<br>    name text,<br>    capacity number,<br>    highest
          number,<br>    lowest number,<br>    average number<br>)</p>

          <p>CREATE TABLE singer (<br>    singer_id number,<br>    name text,<br>    country
          text,<br>    song_name text,<br>    song_release_year text,<br>    age number,<br>    is_male
          others<br>)</p>

          <p>CREATE TABLE concert (<br>    concert_id number,<br>    concert_name
          text,<br>    theme text,<br>    stadium_id text,<br>    year text<br>)</p>

          <p>CREATE TABLE singer_in_concert (<br>    concert_id number,<br>    singer_id
          text<br>)</p>

          <p>-- Using valid SQLite, answer the following questions for the tables
          provided above.</p>

          <p>-- Among the artists having concerts in year 2020, which artist has a
          song whose title equals the name of the stadium on which the concert takes
          place?</p>

          <p>SELECT<br>"""</p>

          <p>Invalid response, as retreived when using nsql-6B:<br>"""<br>SELECT T2.name<br>FROM
          concert AS T1<br>JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id<br>JOIN
          singer AS T3 ON T2.singer_id = T3.singer_id<br>WHERE T1.year = 2020 AND
          T3.song_name = (<br>   SELECT T3.song_name<br>   FROM stadium AS T4<br>   JOIN
          concert AS T5 ON T4.stadium_id = T5.stadium_id<br>   WHERE T5.year = 2020<br>);<br>"""</p>

          <p>Valid response, as given by GPT-3.5:<br>"""<br>SELECT s.name AS artist_name<br>FROM
          singer s<br>JOIN singer_in_concert sic ON s.singer_id = sic.singer_id<br>JOIN
          concert c ON sic.concert_id = c.concert_id<br>JOIN stadium st ON c.stadium_id
          = st.stadium_id<br>WHERE c.year = ''2020'' AND s.song_name = st.name;<br>"""</p>

          '
        raw: "Thanks for a great family of models!\r\n\r\nYou may want to add the\
          \ below prompt as training material when developing the nsql further, as\
          \ nsql-6B (and also nsql-350M) return an invalid SQL-query to it. \r\n\r\
          \nPrompt to nsql-6B\r\n\"\"\"\r\ntext = \"\"\"CREATE TABLE stadium (\r\n\
          \    stadium_id number,\r\n    location text,\r\n    name text,\r\n    capacity\
          \ number,\r\n    highest number,\r\n    lowest number,\r\n    average number\r\
          \n)\r\n\r\nCREATE TABLE singer (\r\n    singer_id number,\r\n    name text,\r\
          \n    country text,\r\n    song_name text,\r\n    song_release_year text,\r\
          \n    age number,\r\n    is_male others\r\n)\r\n\r\nCREATE TABLE concert\
          \ (\r\n    concert_id number,\r\n    concert_name text,\r\n    theme text,\r\
          \n    stadium_id text,\r\n    year text\r\n)\r\n\r\nCREATE TABLE singer_in_concert\
          \ (\r\n    concert_id number,\r\n    singer_id text\r\n)\r\n\r\n-- Using\
          \ valid SQLite, answer the following questions for the tables provided above.\r\
          \n\r\n-- Among the artists having concerts in year 2020, which artist has\
          \ a song whose title equals the name of the stadium on which the concert\
          \ takes place?\r\n\r\nSELECT\r\n\"\"\"\r\n\r\nInvalid response, as retreived\
          \ when using nsql-6B: \r\n\"\"\"\r\nSELECT T2.name \r\nFROM concert AS T1\
          \ \r\nJOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id \r\n\
          JOIN singer AS T3 ON T2.singer_id = T3.singer_id \r\nWHERE T1.year = 2020\
          \ AND T3.song_name = (\r\n   SELECT T3.song_name \r\n   FROM stadium AS\
          \ T4 \r\n   JOIN concert AS T5 ON T4.stadium_id = T5.stadium_id \r\n   WHERE\
          \ T5.year = 2020\r\n);\r\n\"\"\"\r\n\r\nValid response, as given by GPT-3.5:\r\
          \n\"\"\"\r\nSELECT s.name AS artist_name\r\nFROM singer s\r\nJOIN singer_in_concert\
          \ sic ON s.singer_id = sic.singer_id\r\nJOIN concert c ON sic.concert_id\
          \ = c.concert_id\r\nJOIN stadium st ON c.stadium_id = st.stadium_id\r\n\
          WHERE c.year = '2020' AND s.song_name = st.name;\r\n\"\"\""
        updatedAt: '2023-08-22T08:01:45.869Z'
      numEdits: 0
      reactions: []
    id: 64e46b69fe53a047e5c13044
    type: comment
  author: tordbb
  content: "Thanks for a great family of models!\r\n\r\nYou may want to add the below\
    \ prompt as training material when developing the nsql further, as nsql-6B (and\
    \ also nsql-350M) return an invalid SQL-query to it. \r\n\r\nPrompt to nsql-6B\r\
    \n\"\"\"\r\ntext = \"\"\"CREATE TABLE stadium (\r\n    stadium_id number,\r\n\
    \    location text,\r\n    name text,\r\n    capacity number,\r\n    highest number,\r\
    \n    lowest number,\r\n    average number\r\n)\r\n\r\nCREATE TABLE singer (\r\
    \n    singer_id number,\r\n    name text,\r\n    country text,\r\n    song_name\
    \ text,\r\n    song_release_year text,\r\n    age number,\r\n    is_male others\r\
    \n)\r\n\r\nCREATE TABLE concert (\r\n    concert_id number,\r\n    concert_name\
    \ text,\r\n    theme text,\r\n    stadium_id text,\r\n    year text\r\n)\r\n\r\
    \nCREATE TABLE singer_in_concert (\r\n    concert_id number,\r\n    singer_id\
    \ text\r\n)\r\n\r\n-- Using valid SQLite, answer the following questions for the\
    \ tables provided above.\r\n\r\n-- Among the artists having concerts in year 2020,\
    \ which artist has a song whose title equals the name of the stadium on which\
    \ the concert takes place?\r\n\r\nSELECT\r\n\"\"\"\r\n\r\nInvalid response, as\
    \ retreived when using nsql-6B: \r\n\"\"\"\r\nSELECT T2.name \r\nFROM concert\
    \ AS T1 \r\nJOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id \r\n\
    JOIN singer AS T3 ON T2.singer_id = T3.singer_id \r\nWHERE T1.year = 2020 AND\
    \ T3.song_name = (\r\n   SELECT T3.song_name \r\n   FROM stadium AS T4 \r\n  \
    \ JOIN concert AS T5 ON T4.stadium_id = T5.stadium_id \r\n   WHERE T5.year = 2020\r\
    \n);\r\n\"\"\"\r\n\r\nValid response, as given by GPT-3.5:\r\n\"\"\"\r\nSELECT\
    \ s.name AS artist_name\r\nFROM singer s\r\nJOIN singer_in_concert sic ON s.singer_id\
    \ = sic.singer_id\r\nJOIN concert c ON sic.concert_id = c.concert_id\r\nJOIN stadium\
    \ st ON c.stadium_id = st.stadium_id\r\nWHERE c.year = '2020' AND s.song_name\
    \ = st.name;\r\n\"\"\""
  created_at: 2023-08-22 07:01:45+00:00
  edited: false
  hidden: false
  id: 64e46b69fe53a047e5c13044
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/0c4682fe1fe9d9219f46b73bbe2e7b08.svg
      fullname: Sen Wu
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: senwu
      type: user
    createdAt: '2023-08-22T18:14:06.000Z'
    data:
      edited: false
      editors:
      - senwu
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7512829303741455
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/0c4682fe1fe9d9219f46b73bbe2e7b08.svg
          fullname: Sen Wu
          isHf: false
          isPro: false
          name: senwu
          type: user
        html: '<p>Awesome! Will incorporate it in the future release. Thanks!</p>

          '
        raw: Awesome! Will incorporate it in the future release. Thanks!
        updatedAt: '2023-08-22T18:14:06.139Z'
      numEdits: 0
      reactions: []
      relatedEventId: 64e4faee71071da798ceefdd
    id: 64e4faee71071da798ceefdb
    type: comment
  author: senwu
  content: Awesome! Will incorporate it in the future release. Thanks!
  created_at: 2023-08-22 17:14:06+00:00
  edited: false
  hidden: false
  id: 64e4faee71071da798ceefdb
  type: comment
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: /avatars/0c4682fe1fe9d9219f46b73bbe2e7b08.svg
      fullname: Sen Wu
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: senwu
      type: user
    createdAt: '2023-08-22T18:14:06.000Z'
    data:
      status: closed
    id: 64e4faee71071da798ceefdd
    type: status-change
  author: senwu
  created_at: 2023-08-22 17:14:06+00:00
  id: 64e4faee71071da798ceefdd
  new_status: closed
  type: status-change
is_pull_request: false
merge_commit_oid: null
num: 4
repo_id: NumbersStation/nsql-6B
repo_type: model
status: closed
target_branch: null
title: Example of prompt that GPT-3.5 solved, but nsql-6B did not.
