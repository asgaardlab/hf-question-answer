!!python/object:huggingface_hub.community.DiscussionWithDetails
author: sam-mosaic
conflicting_files: null
created_at: 2022-12-09 22:37:07+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1668560930781-noauth.png?w=200&h=200&f=face
      fullname: Sam Havens
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: sam-mosaic
      type: user
    createdAt: '2022-12-09T22:37:07.000Z'
    data:
      edited: false
      editors:
      - sam-mosaic
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1668560930781-noauth.png?w=200&h=200&f=face
          fullname: Sam Havens
          isHf: false
          isPro: false
          name: sam-mosaic
          type: user
        html: "<p>The docs say \"This API is experimental and may have some slight\
          \ breaking changes in the next releases\" \u2014 Is this still the right\
          \ way to share a model that requires custom code?</p>\n"
        raw: "The docs say \"This API is experimental and may have some slight breaking\
          \ changes in the next releases\" \u2014 Is this still the right way to share\
          \ a model that requires custom code?"
        updatedAt: '2022-12-09T22:37:07.362Z'
      numEdits: 0
      reactions: []
    id: 6393b8934b9a1e9330288853
    type: comment
  author: sam-mosaic
  content: "The docs say \"This API is experimental and may have some slight breaking\
    \ changes in the next releases\" \u2014 Is this still the right way to share a\
    \ model that requires custom code?"
  created_at: 2022-12-09 22:37:07+00:00
  edited: false
  hidden: false
  id: 6393b8934b9a1e9330288853
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1668560930781-noauth.png?w=200&h=200&f=face
      fullname: Sam Havens
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: sam-mosaic
      type: user
    createdAt: '2022-12-09T22:52:11.000Z'
    data:
      edited: false
      editors:
      - sam-mosaic
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1668560930781-noauth.png?w=200&h=200&f=face
          fullname: Sam Havens
          isHf: false
          isPro: false
          name: sam-mosaic
          type: user
        html: '<p>If one of the Python files depended on a library which needs to
          be pip installed... does the user just need to make sure to do that pip
          installation before calling <code>model = AutoModelForSomething.from_pretrained("custom-model-that-has-pip-dependency")</code>?</p>

          '
        raw: If one of the Python files depended on a library which needs to be pip
          installed... does the user just need to make sure to do that pip installation
          before calling `model = AutoModelForSomething.from_pretrained("custom-model-that-has-pip-dependency")`?
        updatedAt: '2022-12-09T22:52:11.827Z'
      numEdits: 0
      reactions: []
    id: 6393bc1b3e807c5775775fe0
    type: comment
  author: sam-mosaic
  content: If one of the Python files depended on a library which needs to be pip
    installed... does the user just need to make sure to do that pip installation
    before calling `model = AutoModelForSomething.from_pretrained("custom-model-that-has-pip-dependency")`?
  created_at: 2022-12-09 22:52:11+00:00
  edited: false
  hidden: false
  id: 6393bc1b3e807c5775775fe0
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1593126474392-5ef50182b71947201082a4e5.jpeg?w=200&h=200&f=face
      fullname: Sylvain Gugger
      isHf: false
      isOrgMember: false
      isOwner: true
      isPro: false
      name: sgugger
      type: user
    createdAt: '2022-12-12T15:58:43.000Z'
    data:
      edited: false
      editors:
      - sgugger
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1593126474392-5ef50182b71947201082a4e5.jpeg?w=200&h=200&f=face
          fullname: Sylvain Gugger
          isHf: false
          isPro: false
          name: sgugger
          type: user
        html: '<p>Yes, this is still the recommended way, and yes any dependency should
          be installed before calling the auto model API (note that you will need
          to add <code>trust_remote_code=True</code>. Normally, the API scans for
          imports and will raise a helpful error message if a dependency is missing.</p>

          '
        raw: Yes, this is still the recommended way, and yes any dependency should
          be installed before calling the auto model API (note that you will need
          to add `trust_remote_code=True`. Normally, the API scans for imports and
          will raise a helpful error message if a dependency is missing.
        updatedAt: '2022-12-12T15:58:43.240Z'
      numEdits: 0
      reactions:
      - count: 2
        reaction: "\U0001F44D"
        users:
        - sam-mosaic
        - taesiri
    id: 63974fb360352dfc7c9929cf
    type: comment
  author: sgugger
  content: Yes, this is still the recommended way, and yes any dependency should be
    installed before calling the auto model API (note that you will need to add `trust_remote_code=True`.
    Normally, the API scans for imports and will raise a helpful error message if
    a dependency is missing.
  created_at: 2022-12-12 15:58:43+00:00
  edited: false
  hidden: false
  id: 63974fb360352dfc7c9929cf
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1668560930781-noauth.png?w=200&h=200&f=face
      fullname: Sam Havens
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: sam-mosaic
      type: user
    createdAt: '2023-01-12T02:03:25.000Z'
    data:
      edited: false
      editors:
      - sam-mosaic
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1668560930781-noauth.png?w=200&h=200&f=face
          fullname: Sam Havens
          isHf: false
          isPro: false
          name: sam-mosaic
          type: user
        html: '<p>I tried to write a script based on <a href="https://huggingface.co/docs/transformers/custom_models">https://huggingface.co/docs/transformers/custom_models</a>
          which pulls a checkpoint from s3, imports the needed custom code, instantiates
          of HF wrapper model, then saves it so I can push it to the hub. However,
          after saving it, it won''t load from disk because of import errors. Are
          there any other code samples for generating custom models?</p>

          '
        raw: I tried to write a script based on https://huggingface.co/docs/transformers/custom_models
          which pulls a checkpoint from s3, imports the needed custom code, instantiates
          of HF wrapper model, then saves it so I can push it to the hub. However,
          after saving it, it won't load from disk because of import errors. Are there
          any other code samples for generating custom models?
        updatedAt: '2023-01-12T02:03:25.403Z'
      numEdits: 0
      reactions: []
    id: 63bf6a6d82f7306d07522575
    type: comment
  author: sam-mosaic
  content: I tried to write a script based on https://huggingface.co/docs/transformers/custom_models
    which pulls a checkpoint from s3, imports the needed custom code, instantiates
    of HF wrapper model, then saves it so I can push it to the hub. However, after
    saving it, it won't load from disk because of import errors. Are there any other
    code samples for generating custom models?
  created_at: 2023-01-12 02:03:25+00:00
  edited: false
  hidden: false
  id: 63bf6a6d82f7306d07522575
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1593126474392-5ef50182b71947201082a4e5.jpeg?w=200&h=200&f=face
      fullname: Sylvain Gugger
      isHf: false
      isOrgMember: false
      isOwner: true
      isPro: false
      name: sgugger
      type: user
    createdAt: '2023-01-12T09:16:08.000Z'
    data:
      edited: true
      editors:
      - sgugger
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1593126474392-5ef50182b71947201082a4e5.jpeg?w=200&h=200&f=face
          fullname: Sylvain Gugger
          isHf: false
          isPro: false
          name: sgugger
          type: user
        html: '<p>I''m afraid we can''t really help without seeing any code. Do you
          have a reproducer?</p>

          '
        raw: I'm afraid we can't really help without seeing any code. Do you have
          a reproducer?
        updatedAt: '2023-01-12T09:16:17.015Z'
      numEdits: 1
      reactions: []
    id: 63bfcfd8c42fb2d7f862fbb8
    type: comment
  author: sgugger
  content: I'm afraid we can't really help without seeing any code. Do you have a
    reproducer?
  created_at: 2023-01-12 09:16:08+00:00
  edited: true
  hidden: false
  id: 63bfcfd8c42fb2d7f862fbb8
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1668560930781-noauth.png?w=200&h=200&f=face
      fullname: Sam Havens
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: sam-mosaic
      type: user
    createdAt: '2023-01-13T02:07:33.000Z'
    data:
      edited: false
      editors:
      - sam-mosaic
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1668560930781-noauth.png?w=200&h=200&f=face
          fullname: Sam Havens
          isHf: false
          isPro: false
          name: sam-mosaic
          type: user
        html: "<p>Thanks for offering to look at code, I didn't want to be annoying\
          \ and was just hoping that I'd missed some docs.</p>\n<p>I have a directory\
          \ like this</p>\n<pre><code class=\"language-sh\">.\n\u251C\u2500\u2500\
          \ configuration_my_model.py\n\u251C\u2500\u2500 flash_attention.py\n\u251C\
          \u2500\u2500 flash_attn_triton.py\n\u251C\u2500\u2500 model-yamls\n\u2502\
          \   \u251C\u2500\u2500 checkpoint-and-config\n\u2502   \u2502   \u251C\u2500\
          \u2500 config.yaml\n\u2502   \u2502   \u2514\u2500\u2500 ep0-ba4800-rank0.pt\n\
          \u2502   \u2514\u2500\u2500 another-checkpoint-and-config\n\u2502      \
          \ \u251C\u2500\u2500 config.yaml\n\u2502       \u2514\u2500\u2500 ep0-ba24000-rank0.pt\n\
          \u251C\u2500\u2500 modeling.py\n\u2514\u2500\u2500 save_pretrained.py\n\
          </code></pre>\n<p>where save_pretrained.py loads the pytorch checkpoint\
          \ and yaml file, loads the modeling code from modeling.py (which imports\
          \ from the configuration and flash attention files):</p>\n<pre><code class=\"\
          language-python\"><span class=\"hljs-keyword\">import</span> glob\n<span\
          \ class=\"hljs-keyword\">import</span> os\n\n<span class=\"hljs-keyword\"\
          >import</span> torch\n<span class=\"hljs-keyword\">from</span> omegaconf\
          \ <span class=\"hljs-keyword\">import</span> OmegaConf <span class=\"hljs-keyword\"\
          >as</span> om\n\n<span class=\"hljs-keyword\">import</span> modeling\n\n\
          \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\"\
          >model_name</span>(<span class=\"hljs-params\">yaml_name: <span class=\"\
          hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n\
          \    <span class=\"hljs-comment\"># generate name from yaml_name</span>\n\
          \    <span class=\"hljs-keyword\">return</span> yaml_name\n\n\n<span class=\"\
          hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"\
          </span>:\n    model_yamls_dir = <span class=\"hljs-string\">'model-yamls'</span>\n\
          \n    <span class=\"hljs-comment\"># use glob to find all the yaml files\
          \ in the model-yamls directories</span>\n    yaml_paths = glob.glob(os.path.join(model_yamls_dir,\
          \ <span class=\"hljs-string\">'**/*.yaml'</span>), recursive=<span class=\"\
          hljs-literal\">True</span>)\n\n    <span class=\"hljs-keyword\">for</span>\
          \ yaml_path <span class=\"hljs-keyword\">in</span> yaml_paths:\n       \
          \ cfg = om.load(yaml_path)\n        cfg = cfg.parameters.model\n\n     \
          \   model_dir = os.path.dirname(yaml_path)\n        pt_paths = glob.glob(os.path.join(model_dir,\
          \ <span class=\"hljs-string\">'*.pt'</span>))\n        <span class=\"hljs-comment\"\
          ># there should only be one pt file, so use the first one</span>\n     \
          \   pt_path = pt_paths[<span class=\"hljs-number\">0</span>]\n\n       \
          \ checkpoint = torch.load(pt_path)\n        cm = modeling.MyModel(cfg)\n\
          \        cm.model.load_state_dict(checkpoint[<span class=\"hljs-string\"\
          >'state'</span>][<span class=\"hljs-string\">'model'</span>])\n        model\
          \ = cm.model\n\n        <span class=\"hljs-comment\"># this isn't working,\
          \ there are always import errors</span>\n        modeling.MyModelConfig.register_for_auto_class()\n\
          \        modeling.MyModel.register_for_auto_class(<span class=\"hljs-string\"\
          >\"AutoModelForCausalLM\"</span>)\n\n        save_path = model_name(yaml_name=yaml_path)\n\
          \n        model.save_pretrained(save_path)\n</code></pre>\n<p>but either\
          \ this gives</p>\n<pre><code class=\"language-sh\">from .configuration_my_model\
          \ import MyModelConfig\nImportError: attempted relative import with no known\
          \ parent package\n</code></pre>\n<p>if I use the <code>.</code> before the\
          \ module to import...  or if I don't, then the files don't get copied into\
          \ the huggingface model directory, since without the <code>.</code> prefix\
          \ it thinks the module I am importing is a pip package.</p>\n<p>So my question\
          \ is, how does one get imports right so that they get copied in to the created\
          \ directory and can be loaded with <code>.from_pretrained</code>? Thank\
          \ you</p>\n"
        raw: "Thanks for offering to look at code, I didn't want to be annoying and\
          \ was just hoping that I'd missed some docs.\n\nI have a directory like\
          \ this\n\n```sh\n.\n\u251C\u2500\u2500 configuration_my_model.py\n\u251C\
          \u2500\u2500 flash_attention.py\n\u251C\u2500\u2500 flash_attn_triton.py\n\
          \u251C\u2500\u2500 model-yamls\n\u2502   \u251C\u2500\u2500 checkpoint-and-config\n\
          \u2502   \u2502   \u251C\u2500\u2500 config.yaml\n\u2502   \u2502   \u2514\
          \u2500\u2500 ep0-ba4800-rank0.pt\n\u2502   \u2514\u2500\u2500 another-checkpoint-and-config\n\
          \u2502       \u251C\u2500\u2500 config.yaml\n\u2502       \u2514\u2500\u2500\
          \ ep0-ba24000-rank0.pt\n\u251C\u2500\u2500 modeling.py\n\u2514\u2500\u2500\
          \ save_pretrained.py\n```\n\nwhere save_pretrained.py loads the pytorch\
          \ checkpoint and yaml file, loads the modeling code from modeling.py (which\
          \ imports from the configuration and flash attention files):\n\n```python\n\
          import glob\nimport os\n\nimport torch\nfrom omegaconf import OmegaConf\
          \ as om\n\nimport modeling\n\n\ndef model_name(yaml_name: str) -> str:\n\
          \    # generate name from yaml_name\n    return yaml_name\n\n\nif __name__\
          \ == \"__main__\":\n    model_yamls_dir = 'model-yamls'\n\n    # use glob\
          \ to find all the yaml files in the model-yamls directories\n    yaml_paths\
          \ = glob.glob(os.path.join(model_yamls_dir, '**/*.yaml'), recursive=True)\n\
          \n    for yaml_path in yaml_paths:\n        cfg = om.load(yaml_path)\n \
          \       cfg = cfg.parameters.model\n\n        model_dir = os.path.dirname(yaml_path)\n\
          \        pt_paths = glob.glob(os.path.join(model_dir, '*.pt'))\n       \
          \ # there should only be one pt file, so use the first one\n        pt_path\
          \ = pt_paths[0]\n\n        checkpoint = torch.load(pt_path)\n        cm\
          \ = modeling.MyModel(cfg)\n        cm.model.load_state_dict(checkpoint['state']['model'])\n\
          \        model = cm.model\n\n        # this isn't working, there are always\
          \ import errors\n        modeling.MyModelConfig.register_for_auto_class()\n\
          \        modeling.MyModel.register_for_auto_class(\"AutoModelForCausalLM\"\
          )\n\n        save_path = model_name(yaml_name=yaml_path)\n\n        model.save_pretrained(save_path)\n\
          ```\n\nbut either this gives\n\n```sh\nfrom .configuration_my_model import\
          \ MyModelConfig\nImportError: attempted relative import with no known parent\
          \ package\n```\n\nif I use the `.` before the module to import...  or if\
          \ I don't, then the files don't get copied into the huggingface model directory,\
          \ since without the `.` prefix it thinks the module I am importing is a\
          \ pip package.\n\nSo my question is, how does one get imports right so that\
          \ they get copied in to the created directory and can be loaded with `.from_pretrained`?\
          \ Thank you"
        updatedAt: '2023-01-13T02:07:33.723Z'
      numEdits: 0
      reactions: []
    id: 63c0bce5d9e14fd887635d1b
    type: comment
  author: sam-mosaic
  content: "Thanks for offering to look at code, I didn't want to be annoying and\
    \ was just hoping that I'd missed some docs.\n\nI have a directory like this\n\
    \n```sh\n.\n\u251C\u2500\u2500 configuration_my_model.py\n\u251C\u2500\u2500 flash_attention.py\n\
    \u251C\u2500\u2500 flash_attn_triton.py\n\u251C\u2500\u2500 model-yamls\n\u2502\
    \   \u251C\u2500\u2500 checkpoint-and-config\n\u2502   \u2502   \u251C\u2500\u2500\
    \ config.yaml\n\u2502   \u2502   \u2514\u2500\u2500 ep0-ba4800-rank0.pt\n\u2502\
    \   \u2514\u2500\u2500 another-checkpoint-and-config\n\u2502       \u251C\u2500\
    \u2500 config.yaml\n\u2502       \u2514\u2500\u2500 ep0-ba24000-rank0.pt\n\u251C\
    \u2500\u2500 modeling.py\n\u2514\u2500\u2500 save_pretrained.py\n```\n\nwhere\
    \ save_pretrained.py loads the pytorch checkpoint and yaml file, loads the modeling\
    \ code from modeling.py (which imports from the configuration and flash attention\
    \ files):\n\n```python\nimport glob\nimport os\n\nimport torch\nfrom omegaconf\
    \ import OmegaConf as om\n\nimport modeling\n\n\ndef model_name(yaml_name: str)\
    \ -> str:\n    # generate name from yaml_name\n    return yaml_name\n\n\nif __name__\
    \ == \"__main__\":\n    model_yamls_dir = 'model-yamls'\n\n    # use glob to find\
    \ all the yaml files in the model-yamls directories\n    yaml_paths = glob.glob(os.path.join(model_yamls_dir,\
    \ '**/*.yaml'), recursive=True)\n\n    for yaml_path in yaml_paths:\n        cfg\
    \ = om.load(yaml_path)\n        cfg = cfg.parameters.model\n\n        model_dir\
    \ = os.path.dirname(yaml_path)\n        pt_paths = glob.glob(os.path.join(model_dir,\
    \ '*.pt'))\n        # there should only be one pt file, so use the first one\n\
    \        pt_path = pt_paths[0]\n\n        checkpoint = torch.load(pt_path)\n \
    \       cm = modeling.MyModel(cfg)\n        cm.model.load_state_dict(checkpoint['state']['model'])\n\
    \        model = cm.model\n\n        # this isn't working, there are always import\
    \ errors\n        modeling.MyModelConfig.register_for_auto_class()\n        modeling.MyModel.register_for_auto_class(\"\
    AutoModelForCausalLM\")\n\n        save_path = model_name(yaml_name=yaml_path)\n\
    \n        model.save_pretrained(save_path)\n```\n\nbut either this gives\n\n```sh\n\
    from .configuration_my_model import MyModelConfig\nImportError: attempted relative\
    \ import with no known parent package\n```\n\nif I use the `.` before the module\
    \ to import...  or if I don't, then the files don't get copied into the huggingface\
    \ model directory, since without the `.` prefix it thinks the module I am importing\
    \ is a pip package.\n\nSo my question is, how does one get imports right so that\
    \ they get copied in to the created directory and can be loaded with `.from_pretrained`?\
    \ Thank you"
  created_at: 2023-01-13 02:07:33+00:00
  edited: false
  hidden: false
  id: 63c0bce5d9e14fd887635d1b
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: sgugger/custom-resnet50d
repo_type: model
status: open
target_branch: null
title: Is this still the recommended way of sharing custom models?
