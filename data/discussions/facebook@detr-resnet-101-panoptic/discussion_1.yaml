!!python/object:huggingface_hub.community.DiscussionWithDetails
author: hungtooc
conflicting_files: null
created_at: 2022-07-09 00:46:05+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/8f430e1e79dc8da29f81caddd4f48952.svg
      fullname: vn
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: hungtooc
      type: user
    createdAt: '2022-07-09T01:46:05.000Z'
    data:
      edited: true
      editors:
      - julien-c
      - hungtooc
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/5dd96eb166059660ed1ee413/NQtzmrDdbG0H8qkZvRyGk.jpeg?w=200&h=200&f=face
          fullname: Julien Chaumond
          isHf: true
          isPro: true
          name: julien-c
          type: user
        html: '<p>thanks for great model and good result!<br>I''m stuck at post processing
          code for this original code:</p>

          <pre><code class="language-python"><span class="hljs-keyword">from</span>
          transformers <span class="hljs-keyword">import</span> DetrFeatureExtractor,
          DetrForSegmentation

          <span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span>
          Image

          <span class="hljs-keyword">import</span> requests


          url = <span class="hljs-string">''http://images.cocodataset.org/val2017/000000039769.jpg''</span>

          image = Image.<span class="hljs-built_in">open</span>(requests.get(url,
          stream=<span class="hljs-literal">True</span>).raw)


          feature_extractor = DetrFeatureExtractor.from_pretrained(<span class="hljs-string">''facebook/detr-resnet-101-panoptic''</span>)

          model = DetrForSegmentation.from_pretrained(<span class="hljs-string">''facebook/detr-resnet-101-panoptic''</span>)


          inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">"pt"</span>)

          outputs = model(**inputs)

          <span class="hljs-comment"># model predicts COCO classes, bounding boxes,
          and masks</span>

          logits = outputs.logits

          bboxes = outputs.pred_boxes

          masks = outputs.pred_masks

          </code></pre>

          <p>how to get the final mask and label? thanks.</p>

          '
        raw: 'thanks for great model and good result!

          I''m stuck at post processing code for this original code:

          ```python

          from transformers import DetrFeatureExtractor, DetrForSegmentation

          from PIL import Image

          import requests


          url = ''http://images.cocodataset.org/val2017/000000039769.jpg''

          image = Image.open(requests.get(url, stream=True).raw)


          feature_extractor = DetrFeatureExtractor.from_pretrained(''facebook/detr-resnet-101-panoptic'')

          model = DetrForSegmentation.from_pretrained(''facebook/detr-resnet-101-panoptic'')


          inputs = feature_extractor(images=image, return_tensors="pt")

          outputs = model(**inputs)

          # model predicts COCO classes, bounding boxes, and masks

          logits = outputs.logits

          bboxes = outputs.pred_boxes

          masks = outputs.pred_masks

          ```

          how to get the final mask and label? thanks.'
        updatedAt: '2022-07-09T08:29:22.570Z'
      numEdits: 1
      reactions:
      - count: 1
        reaction: "\u2764\uFE0F"
        users:
        - julien-c
    id: 62c8dddd81377bfcf46a1266
    type: comment
  author: hungtooc
  content: 'thanks for great model and good result!

    I''m stuck at post processing code for this original code:

    ```python

    from transformers import DetrFeatureExtractor, DetrForSegmentation

    from PIL import Image

    import requests


    url = ''http://images.cocodataset.org/val2017/000000039769.jpg''

    image = Image.open(requests.get(url, stream=True).raw)


    feature_extractor = DetrFeatureExtractor.from_pretrained(''facebook/detr-resnet-101-panoptic'')

    model = DetrForSegmentation.from_pretrained(''facebook/detr-resnet-101-panoptic'')


    inputs = feature_extractor(images=image, return_tensors="pt")

    outputs = model(**inputs)

    # model predicts COCO classes, bounding boxes, and masks

    logits = outputs.logits

    bboxes = outputs.pred_boxes

    masks = outputs.pred_masks

    ```

    how to get the final mask and label? thanks.'
  created_at: 2022-07-09 00:46:05+00:00
  edited: true
  hidden: false
  id: 62c8dddd81377bfcf46a1266
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/5dd96eb166059660ed1ee413/NQtzmrDdbG0H8qkZvRyGk.jpeg?w=200&h=200&f=face
      fullname: Julien Chaumond
      isHf: true
      isOrgMember: false
      isOwner: false
      isPro: true
      name: julien-c
      type: user
    createdAt: '2022-07-09T08:30:13.000Z'
    data:
      edited: false
      editors:
      - julien-c
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/5dd96eb166059660ed1ee413/NQtzmrDdbG0H8qkZvRyGk.jpeg?w=200&h=200&f=face
          fullname: Julien Chaumond
          isHf: true
          isPro: true
          name: julien-c
          type: user
        html: "<p>(off topic, but if you want Python syntax coloring <span data-props=\"\
          {&quot;user&quot;:&quot;hungtooc&quot;}\" data-target=\"UserMention\" class=\"\
          SVELTE_PARTIAL_HYDRATER contents\">\n\n<span class=\"inline-block\"><span\
          \ class=\"contents\"><a href=\"/hungtooc\">@<span class=\"underline\">hungtooc</span></a></span>\n\
          \n\t</span></span>, you can specify <code>python</code> right after your\
          \ code fence, like on GitHub)</p>\n"
        raw: (off topic, but if you want Python syntax coloring @hungtooc, you can
          specify `python` right after your code fence, like on GitHub)
        updatedAt: '2022-07-09T08:30:13.505Z'
      numEdits: 0
      reactions: []
    id: 62c93c9568457adefc48ab8d
    type: comment
  author: julien-c
  content: (off topic, but if you want Python syntax coloring @hungtooc, you can specify
    `python` right after your code fence, like on GitHub)
  created_at: 2022-07-09 07:30:13+00:00
  edited: false
  hidden: false
  id: 62c93c9568457adefc48ab8d
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1618450692745-5e3aec01f55e2b62848a5217.jpeg?w=200&h=200&f=face
      fullname: Lysandre
      isHf: true
      isOrgMember: true
      isOwner: false
      isPro: false
      name: lysandre
      type: user
    createdAt: '2022-07-11T07:13:57.000Z'
    data:
      edited: false
      editors:
      - lysandre
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1618450692745-5e3aec01f55e2b62848a5217.jpeg?w=200&h=200&f=face
          fullname: Lysandre
          isHf: true
          isPro: false
          name: lysandre
          type: user
        html: "<p>cc <span data-props=\"{&quot;user&quot;:&quot;nielsr&quot;}\" data-target=\"\
          UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\">\n\n<span class=\"\
          inline-block\"><span class=\"contents\"><a href=\"/nielsr\">@<span class=\"\
          underline\">nielsr</span></a></span>\n\n\t</span></span> :)</p>\n"
        raw: cc @nielsr :)
        updatedAt: '2022-07-11T07:13:57.763Z'
      numEdits: 0
      reactions: []
    id: 62cbcdb502e7a64f339ceefd
    type: comment
  author: lysandre
  content: cc @nielsr :)
  created_at: 2022-07-11 06:13:57+00:00
  edited: false
  hidden: false
  id: 62cbcdb502e7a64f339ceefd
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/8f700bd0257b477cd1a0f22c77d9e52b.svg
      fullname: kishore Battula
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: kishore25kumar
      type: user
    createdAt: '2022-09-24T16:31:42.000Z'
    data:
      edited: false
      editors:
      - kishore25kumar
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/8f700bd0257b477cd1a0f22c77d9e52b.svg
          fullname: kishore Battula
          isHf: false
          isPro: false
          name: kishore25kumar
          type: user
        html: "<p><span data-props=\"{&quot;user&quot;:&quot;hungtooc&quot;}\" data-target=\"\
          UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\">\n\n<span class=\"\
          inline-block\"><span class=\"contents\"><a href=\"/hungtooc\">@<span class=\"\
          underline\">hungtooc</span></a></span>\n\n\t</span></span> You can directly\
          \ use the pipelines like below to get final mask and label</p>\n<p>model\
          \ = pipeline(\"image-segmentation\", model=\"facebook/detr-resnet-101-panoptic\"\
          )<br>outputs = model(\"3.png\")<br>for i in range(len(outputs)):<br>   \
          \ outputs[i][\"mask\"].save(\"output/mask_\" + outputs[i][\"label\"] + \"\
          .png\")</p>\n"
        raw: "@hungtooc You can directly use the pipelines like below to get final\
          \ mask and label\n\nmodel = pipeline(\"image-segmentation\", model=\"facebook/detr-resnet-101-panoptic\"\
          )\noutputs = model(\"3.png\")\nfor i in range(len(outputs)):\n    outputs[i][\"\
          mask\"].save(\"output/mask_\" + outputs[i][\"label\"] + \".png\")"
        updatedAt: '2022-09-24T16:31:42.823Z'
      numEdits: 0
      reactions: []
    id: 632f30ee2a6ef6fb4ad1c253
    type: comment
  author: kishore25kumar
  content: "@hungtooc You can directly use the pipelines like below to get final mask\
    \ and label\n\nmodel = pipeline(\"image-segmentation\", model=\"facebook/detr-resnet-101-panoptic\"\
    )\noutputs = model(\"3.png\")\nfor i in range(len(outputs)):\n    outputs[i][\"\
    mask\"].save(\"output/mask_\" + outputs[i][\"label\"] + \".png\")"
  created_at: 2022-09-24 15:31:42+00:00
  edited: false
  hidden: false
  id: 632f30ee2a6ef6fb4ad1c253
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: facebook/detr-resnet-101-panoptic
repo_type: model
status: open
target_branch: null
title: 'How to post processing for inference time '
