!!python/object:huggingface_hub.community.DiscussionWithDetails
author: fmoorhof
conflicting_files: null
created_at: 2023-10-09 13:04:34+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/e321ef5d4adc5dad8e71aa8ca3d70344.svg
      fullname: F Moorhof
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: fmoorhof
      type: user
    createdAt: '2023-10-09T14:04:34.000Z'
    data:
      edited: false
      editors:
      - fmoorhof
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.768313467502594
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/e321ef5d4adc5dad8e71aa8ca3d70344.svg
          fullname: F Moorhof
          isHf: false
          isPro: false
          name: fmoorhof
          type: user
        html: "<p>Hey there,<br>thanks for the very easy to use tool. To make the\
          \ handling of output files as straight forward I wanted to share a quick\
          \ way of handling the many output files: The script is extracting the lowest\
          \ perplexity hits for each EC number (in the folder_path) and writes them\
          \ as lowest_perplexity_{ec_number_batch}.fasta:</p>\n<pre><code class=\"\
          language-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"\
          hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span>\
          \ defaultdict\n<span class=\"hljs-keyword\">from</span> Bio <span class=\"\
          hljs-keyword\">import</span> SeqIO\n\n<span class=\"hljs-comment\"># Folder\
          \ containing .fasta files</span>\nfolder_path = <span class=\"hljs-string\"\
          >\"Your_path_goes_here\"</span>\n\n<span class=\"hljs-comment\"># Dictionary\
          \ to store records grouped by EC number batch</span>\nbatch_records = defaultdict(<span\
          \ class=\"hljs-built_in\">list</span>)\n\n<span class=\"hljs-comment\">#\
          \ Iterate through all .fasta files in the folder</span>\n<span class=\"\
          hljs-keyword\">for</span> filename <span class=\"hljs-keyword\">in</span>\
          \ os.listdir(folder_path):\n    <span class=\"hljs-keyword\">if</span> filename.endswith(<span\
          \ class=\"hljs-string\">\"_0.fasta\"</span>):\n        file_path = os.path.join(folder_path,\
          \ filename)\n        <span class=\"hljs-keyword\">with</span> <span class=\"\
          hljs-built_in\">open</span>(file_path, <span class=\"hljs-string\">\"r\"\
          </span>) <span class=\"hljs-keyword\">as</span> fasta_file:\n          \
          \  <span class=\"hljs-keyword\">for</span> record <span class=\"hljs-keyword\"\
          >in</span> SeqIO.parse(fasta_file, <span class=\"hljs-string\">\"fasta\"\
          </span>):\n                <span class=\"hljs-comment\"># Extract perplexity\
          \ value from the record description</span>\n                description_parts\
          \ = record.description.split()\n                perplexity = <span class=\"\
          hljs-built_in\">float</span>(description_parts[-<span class=\"hljs-number\"\
          >1</span>])\n\n                <span class=\"hljs-comment\"># Extract EC\
          \ number batch from the filename</span>\n                ec_number_batch\
          \ = filename.split(<span class=\"hljs-string\">\"_\"</span>)[<span class=\"\
          hljs-number\">0</span>]\n\n                <span class=\"hljs-comment\"\
          ># Store the record and perplexity value as a tuple in the dictionary</span>\n\
          \                batch_records[ec_number_batch].append((record, perplexity))\n\
          \n<span class=\"hljs-comment\"># Iterate through the batches and select\
          \ the record with the lowest perplexity</span>\n<span class=\"hljs-keyword\"\
          >for</span> ec_number_batch, records <span class=\"hljs-keyword\">in</span>\
          \ batch_records.items():\n    records.sort(key=<span class=\"hljs-keyword\"\
          >lambda</span> x: x[<span class=\"hljs-number\">1</span>])  <span class=\"\
          hljs-comment\"># Sort records by perplexity</span>\n    lowest_perplexity_record\
          \ = records[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\"\
          >0</span>]  <span class=\"hljs-comment\"># Get the record with the lowest\
          \ perplexity</span>\n\n    <span class=\"hljs-comment\"># Write the lowest\
          \ perpl-exity record to a file for each batch</span>\n    output_file_path\
          \ = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{folder_path}</span>/lowest_perplexity_<span\
          \ class=\"hljs-subst\">{ec_number_batch}</span>.fasta\"</span>\n    <span\
          \ class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(output_file_path,\
          \ <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\"\
          >as</span> output_file:\n        SeqIO.write(lowest_perplexity_record, output_file,\
          \ <span class=\"hljs-string\">\"fasta\"</span>)\n</code></pre>\n"
        raw: "Hey there,\r\nthanks for the very easy to use tool. To make the handling\
          \ of output files as straight forward I wanted to share a quick way of handling\
          \ the many output files: The script is extracting the lowest perplexity\
          \ hits for each EC number (in the folder_path) and writes them as lowest_perplexity_{ec_number_batch}.fasta:\r\
          \n\r\n```python\r\nimport os\r\nfrom collections import defaultdict\r\n\
          from Bio import SeqIO\r\n\r\n# Folder containing .fasta files\r\nfolder_path\
          \ = \"Your_path_goes_here\"\r\n\r\n# Dictionary to store records grouped\
          \ by EC number batch\r\nbatch_records = defaultdict(list)\r\n\r\n# Iterate\
          \ through all .fasta files in the folder\r\nfor filename in os.listdir(folder_path):\r\
          \n    if filename.endswith(\"_0.fasta\"):\r\n        file_path = os.path.join(folder_path,\
          \ filename)\r\n        with open(file_path, \"r\") as fasta_file:\r\n  \
          \          for record in SeqIO.parse(fasta_file, \"fasta\"):\r\n       \
          \         # Extract perplexity value from the record description\r\n   \
          \             description_parts = record.description.split()\r\n       \
          \         perplexity = float(description_parts[-1])\r\n\r\n            \
          \    # Extract EC number batch from the filename\r\n                ec_number_batch\
          \ = filename.split(\"_\")[0]\r\n\r\n                # Store the record and\
          \ perplexity value as a tuple in the dictionary\r\n                batch_records[ec_number_batch].append((record,\
          \ perplexity))\r\n\r\n# Iterate through the batches and select the record\
          \ with the lowest perplexity\r\nfor ec_number_batch, records in batch_records.items():\r\
          \n    records.sort(key=lambda x: x[1])  # Sort records by perplexity\r\n\
          \    lowest_perplexity_record = records[0][0]  # Get the record with the\
          \ lowest perplexity\r\n\r\n    # Write the lowest perpl-exity record to\
          \ a file for each batch\r\n    output_file_path = f\"{folder_path}/lowest_perplexity_{ec_number_batch}.fasta\"\
          \r\n    with open(output_file_path, \"w\") as output_file:\r\n        SeqIO.write(lowest_perplexity_record,\
          \ output_file, \"fasta\")\r\n```"
        updatedAt: '2023-10-09T14:04:34.133Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\u2764\uFE0F"
        users:
        - nferruz
    id: 65240872b623a04e6c357121
    type: comment
  author: fmoorhof
  content: "Hey there,\r\nthanks for the very easy to use tool. To make the handling\
    \ of output files as straight forward I wanted to share a quick way of handling\
    \ the many output files: The script is extracting the lowest perplexity hits for\
    \ each EC number (in the folder_path) and writes them as lowest_perplexity_{ec_number_batch}.fasta:\r\
    \n\r\n```python\r\nimport os\r\nfrom collections import defaultdict\r\nfrom Bio\
    \ import SeqIO\r\n\r\n# Folder containing .fasta files\r\nfolder_path = \"Your_path_goes_here\"\
    \r\n\r\n# Dictionary to store records grouped by EC number batch\r\nbatch_records\
    \ = defaultdict(list)\r\n\r\n# Iterate through all .fasta files in the folder\r\
    \nfor filename in os.listdir(folder_path):\r\n    if filename.endswith(\"_0.fasta\"\
    ):\r\n        file_path = os.path.join(folder_path, filename)\r\n        with\
    \ open(file_path, \"r\") as fasta_file:\r\n            for record in SeqIO.parse(fasta_file,\
    \ \"fasta\"):\r\n                # Extract perplexity value from the record description\r\
    \n                description_parts = record.description.split()\r\n         \
    \       perplexity = float(description_parts[-1])\r\n\r\n                # Extract\
    \ EC number batch from the filename\r\n                ec_number_batch = filename.split(\"\
    _\")[0]\r\n\r\n                # Store the record and perplexity value as a tuple\
    \ in the dictionary\r\n                batch_records[ec_number_batch].append((record,\
    \ perplexity))\r\n\r\n# Iterate through the batches and select the record with\
    \ the lowest perplexity\r\nfor ec_number_batch, records in batch_records.items():\r\
    \n    records.sort(key=lambda x: x[1])  # Sort records by perplexity\r\n    lowest_perplexity_record\
    \ = records[0][0]  # Get the record with the lowest perplexity\r\n\r\n    # Write\
    \ the lowest perpl-exity record to a file for each batch\r\n    output_file_path\
    \ = f\"{folder_path}/lowest_perplexity_{ec_number_batch}.fasta\"\r\n    with open(output_file_path,\
    \ \"w\") as output_file:\r\n        SeqIO.write(lowest_perplexity_record, output_file,\
    \ \"fasta\")\r\n```"
  created_at: 2023-10-09 13:04:34+00:00
  edited: false
  hidden: false
  id: 65240872b623a04e6c357121
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 9
repo_id: AI4PD/ZymCTRL
repo_type: model
status: open
target_branch: null
title: Hit handling for bulk generation
