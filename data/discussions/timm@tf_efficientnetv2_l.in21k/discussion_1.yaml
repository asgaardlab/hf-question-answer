!!python/object:huggingface_hub.community.DiscussionWithDetails
author: cerzol
conflicting_files: null
created_at: 2023-08-30 15:00:05+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/174c1d7b07cf3503b44be35ce412fcf3.svg
      fullname: EZ
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: cerzol
      type: user
    createdAt: '2023-08-30T16:00:05.000Z'
    data:
      edited: false
      editors:
      - cerzol
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7602392435073853
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/174c1d7b07cf3503b44be35ce412fcf3.svg
          fullname: EZ
          isHf: false
          isPro: false
          name: cerzol
          type: user
        html: "<p>Are there any examples available for implementing inference for\
          \ this model, with label descriptions? I found <code>ImageNetInfo</code>\
          \ in the source code and gave that a try:</p>\n<pre><code class=\"language-python\"\
          >        indices = top5_class_indices.cpu().numpy()\n\n        subset =\
          \ infer_imagenet_subset(model)\n        info = ImageNetInfo(subset=subset)\n\
          \n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\"\
          >in</span> indices[<span class=\"hljs-number\">0</span>]:\n            <span\
          \ class=\"hljs-built_in\">print</span>(info.index_to_description(index))\n\
          </code></pre>\n<p>And this seems to be <em>close</em> to what I need, but\
          \ the id2label set that it uses doesn't seem to line up with the actual\
          \ indexes. The output I get for the example beignets image:</p>\n<pre><code\
          \ class=\"language-text\">homo, man, human being, human\nbird\nworld, human\
          \ race, humanity, humankind, human beings, humans, mankind, man\nequipment\n\
          animal, animate being, beast, brute, creature, fauna\n</code></pre>\n<p>I\
          \ assume right now that I'm just using this wrong, so I'd love an example\
          \ if one is available. I also tried building an id2label dict from <code>huggingface/label-files</code></p>\n\
          <pre><code class=\"language-python\">    repo_id = <span class=\"hljs-string\"\
          >\"huggingface/label-files\"</span>\n    filename = <span class=\"hljs-string\"\
          >\"imagenet-22k-id2label.json\"</span>\n    id2label = json.load(<span class=\"\
          hljs-built_in\">open</span>(hf_hub_download(repo_id, filename, repo_type=<span\
          \ class=\"hljs-string\">\"dataset\"</span>), <span class=\"hljs-string\"\
          >\"r\"</span>))\n    id2label = {<span class=\"hljs-built_in\">int</span>(k):\
          \ v <span class=\"hljs-keyword\">for</span> k, v <span class=\"hljs-keyword\"\
          >in</span> id2label.items()}\n</code></pre>\n<p>But this yielded identical\
          \ results</p>\n"
        raw: "Are there any examples available for implementing inference for this\
          \ model, with label descriptions? I found `ImageNetInfo` in the source code\
          \ and gave that a try:\r\n\r\n```python\r\n        indices = top5_class_indices.cpu().numpy()\r\
          \n\r\n        subset = infer_imagenet_subset(model)\r\n        info = ImageNetInfo(subset=subset)\r\
          \n\r\n        for index in indices[0]:\r\n            print(info.index_to_description(index))\r\
          \n```\r\n\r\nAnd this seems to be _close_ to what I need, but the id2label\
          \ set that it uses doesn't seem to line up with the actual indexes. The\
          \ output I get for the example beignets image:\r\n\r\n```text\r\nhomo, man,\
          \ human being, human\r\nbird\r\nworld, human race, humanity, humankind,\
          \ human beings, humans, mankind, man\r\nequipment\r\nanimal, animate being,\
          \ beast, brute, creature, fauna\r\n```\r\n\r\nI assume right now that I'm\
          \ just using this wrong, so I'd love an example if one is available. I also\
          \ tried building an id2label dict from `huggingface/label-files`\r\n\r\n\
          ```python\r\n    repo_id = \"huggingface/label-files\"\r\n    filename =\
          \ \"imagenet-22k-id2label.json\"\r\n    id2label = json.load(open(hf_hub_download(repo_id,\
          \ filename, repo_type=\"dataset\"), \"r\"))\r\n    id2label = {int(k): v\
          \ for k, v in id2label.items()}\r\n```\r\nBut this yielded identical results"
        updatedAt: '2023-08-30T16:00:05.804Z'
      numEdits: 0
      reactions: []
    id: 64ef6785d4ff7d4e76dcc29a
    type: comment
  author: cerzol
  content: "Are there any examples available for implementing inference for this model,\
    \ with label descriptions? I found `ImageNetInfo` in the source code and gave\
    \ that a try:\r\n\r\n```python\r\n        indices = top5_class_indices.cpu().numpy()\r\
    \n\r\n        subset = infer_imagenet_subset(model)\r\n        info = ImageNetInfo(subset=subset)\r\
    \n\r\n        for index in indices[0]:\r\n            print(info.index_to_description(index))\r\
    \n```\r\n\r\nAnd this seems to be _close_ to what I need, but the id2label set\
    \ that it uses doesn't seem to line up with the actual indexes. The output I get\
    \ for the example beignets image:\r\n\r\n```text\r\nhomo, man, human being, human\r\
    \nbird\r\nworld, human race, humanity, humankind, human beings, humans, mankind,\
    \ man\r\nequipment\r\nanimal, animate being, beast, brute, creature, fauna\r\n\
    ```\r\n\r\nI assume right now that I'm just using this wrong, so I'd love an example\
    \ if one is available. I also tried building an id2label dict from `huggingface/label-files`\r\
    \n\r\n```python\r\n    repo_id = \"huggingface/label-files\"\r\n    filename =\
    \ \"imagenet-22k-id2label.json\"\r\n    id2label = json.load(open(hf_hub_download(repo_id,\
    \ filename, repo_type=\"dataset\"), \"r\"))\r\n    id2label = {int(k): v for k,\
    \ v in id2label.items()}\r\n```\r\nBut this yielded identical results"
  created_at: 2023-08-30 15:00:05+00:00
  edited: false
  hidden: false
  id: 64ef6785d4ff7d4e76dcc29a
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1667002643224-604a5184dca2c7ac7508b849.jpeg?w=200&h=200&f=face
      fullname: Ross Wightman
      isHf: true
      isOrgMember: true
      isOwner: false
      isPro: false
      name: rwightman
      type: user
    createdAt: '2023-09-01T05:19:15.000Z'
    data:
      edited: false
      editors:
      - rwightman
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7454232573509216
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1667002643224-604a5184dca2c7ac7508b849.jpeg?w=200&h=200&f=face
          fullname: Ross Wightman
          isHf: true
          isPro: false
          name: rwightman
          type: user
        html: "<p><span data-props=\"{&quot;user&quot;:&quot;cerzol&quot;}\" data-target=\"\
          UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\">\n\n<span class=\"\
          inline-block\"><span class=\"contents\"><a href=\"/cerzol\">@<span class=\"\
          underline\">cerzol</span></a></span>\n\n\t</span></span> you can see the\
          \ timm API inference code that's used by the classification widget here:\
          \ <a rel=\"nofollow\" href=\"https://github.com/huggingface/api-inference-community/blob/main/docker_images/timm/app/pipelines/image_classification.py\"\
          >https://github.com/huggingface/api-inference-community/blob/main/docker_images/timm/app/pipelines/image_classification.py</a>\
          \ </p>\n<p>It uses internal timm imagenet mappings since having redundant\
          \ 22k line maps for every timm model seemed pointless when the variations\
          \ are limited.</p>\n"
        raw: "@cerzol you can see the timm API inference code that's used by the classification\
          \ widget here: https://github.com/huggingface/api-inference-community/blob/main/docker_images/timm/app/pipelines/image_classification.py\
          \ \n\nIt uses internal timm imagenet mappings since having redundant 22k\
          \ line maps for every timm model seemed pointless when the variations are\
          \ limited.\n\n"
        updatedAt: '2023-09-01T05:19:15.391Z'
      numEdits: 0
      reactions: []
    id: 64f174532514798aedebb31d
    type: comment
  author: rwightman
  content: "@cerzol you can see the timm API inference code that's used by the classification\
    \ widget here: https://github.com/huggingface/api-inference-community/blob/main/docker_images/timm/app/pipelines/image_classification.py\
    \ \n\nIt uses internal timm imagenet mappings since having redundant 22k line\
    \ maps for every timm model seemed pointless when the variations are limited.\n\
    \n"
  created_at: 2023-09-01 04:19:15+00:00
  edited: false
  hidden: false
  id: 64f174532514798aedebb31d
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: timm/tf_efficientnetv2_l.in21k
repo_type: model
status: open
target_branch: null
title: Lemma implementaiton examples
