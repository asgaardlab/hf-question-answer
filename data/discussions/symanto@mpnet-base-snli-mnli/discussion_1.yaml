!!python/object:huggingface_hub.community.DiscussionWithDetails
author: quaeast
conflicting_files: null
created_at: 2022-11-11 10:09:45+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/e1aa6dd7180788fe4658b83c62386f38.svg
      fullname: "\u65B9\u5B50\u4E1C"
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: quaeast
      type: user
    createdAt: '2022-11-11T10:09:45.000Z'
    data:
      edited: true
      editors:
      - quaeast
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/e1aa6dd7180788fe4658b83c62386f38.svg
          fullname: "\u65B9\u5B50\u4E1C"
          isHf: false
          isPro: false
          name: quaeast
          type: user
        html: '<p>In the 9th line of the usage python snippet, the separator of two
          sentence is <code>&lt;/s&gt;&lt;/s&gt;</code>. Should it be <code>&lt;/s&gt;&lt;s&gt;
          </code>?</p>

          <pre><code class="language-python">inputs = tokenizer([<span class="hljs-string">"&lt;/s&gt;&lt;/s&gt;"</span>.join(input_pair)
          <span class="hljs-keyword">for</span> input_pair <span class="hljs-keyword">in</span>
          input_pairs], return_tensors=<span class="hljs-string">"pt"</span>)

          </code></pre>

          '
        raw: 'In the 9th line of the usage python snippet, the separator of two sentence
          is `</s></s>`. Should it be `</s><s> `?


          ```python

          inputs = tokenizer(["</s></s>".join(input_pair) for input_pair in input_pairs],
          return_tensors="pt")

          ```'
        updatedAt: '2022-11-11T10:14:10.836Z'
      numEdits: 2
      reactions: []
    id: 636e1f698ba65db4a093dec1
    type: comment
  author: quaeast
  content: 'In the 9th line of the usage python snippet, the separator of two sentence
    is `</s></s>`. Should it be `</s><s> `?


    ```python

    inputs = tokenizer(["</s></s>".join(input_pair) for input_pair in input_pairs],
    return_tensors="pt")

    ```'
  created_at: 2022-11-11 10:09:45+00:00
  edited: true
  hidden: false
  id: 636e1f698ba65db4a093dec1
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1626775306698-noauth.jpeg?w=200&h=200&f=face
      fullname: "Guillermo P\xE9rez-Torr\xF3"
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: gperez
      type: user
    createdAt: '2023-01-12T08:30:10.000Z'
    data:
      edited: true
      editors:
      - gperez
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1626775306698-noauth.jpeg?w=200&h=200&f=face
          fullname: "Guillermo P\xE9rez-Torr\xF3"
          isHf: false
          isPro: false
          name: gperez
          type: user
        html: "<p>Hi! Sorry we forgot to answer \U0001F64F\U0001F3FB</p>\n<p>Actually\
          \ it seems that for NLI tasks it isn't as you say. You can check that passing\
          \ to the tokenizer directly the list of tuples (premise, hypothesis) and\
          \ then check the token_ids:</p>\n<pre><code class=\"language-python\">input_pairs\
          \ = [(<span class=\"hljs-string\">\"I like this pizza.\"</span>, <span class=\"\
          hljs-string\">\"The sentence is positive.\"</span>), (<span class=\"hljs-string\"\
          >\"I like this pizza.\"</span>, <span class=\"hljs-string\">\"The sentence\
          \ is negative.\"</span>)]\ninputs = tokenizer(input_pairs, return_tensors=<span\
          \ class=\"hljs-string\">\"pt\"</span>)\n<span class=\"hljs-comment\"># Output</span>\n\
          <span class=\"hljs-comment\">#{'input_ids': tensor([[    0,  1049,  2070,\
          \  2027, 10737,  1016,     2,     2,  2000,  6255,</span>\n<span class=\"\
          hljs-comment\">#         2007,  3897,  1016,     2],</span>\n<span class=\"\
          hljs-comment\">#        [    0,  1049,  2070,  2027, 10737,  1016,     2,\
          \     2,  2000,  6255,</span>\n<span class=\"hljs-comment\">#          2007,\
          \  5001,  1016,     2]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1,\
          \ 1, 1, 1, 1, 1, 1, 1],</span>\n<span class=\"hljs-comment\">#        [1,\
          \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}</span>\n</code></pre>\n<p>If\
          \ you check the vocab.txt file of the model, you'll see that the token_id=2\
          \ is <code>&lt;/s&gt;</code>.</p>\n<p>Cheers!</p>\n"
        raw: "Hi! Sorry we forgot to answer \U0001F64F\U0001F3FB\n\nActually it seems\
          \ that for NLI tasks it isn't as you say. You can check that passing to\
          \ the tokenizer directly the list of tuples (premise, hypothesis) and then\
          \ check the token_ids:\n\n```python\ninput_pairs = [(\"I like this pizza.\"\
          , \"The sentence is positive.\"), (\"I like this pizza.\", \"The sentence\
          \ is negative.\")]\ninputs = tokenizer(input_pairs, return_tensors=\"pt\"\
          )\n# Output\n#{'input_ids': tensor([[    0,  1049,  2070,  2027, 10737,\
          \  1016,     2,     2,  2000,  6255,\n#         2007,  3897,  1016,    \
          \ 2],\n#        [    0,  1049,  2070,  2027, 10737,  1016,     2,     2,\
          \  2000,  6255,\n#          2007,  5001,  1016,     2]]), 'attention_mask':\
          \ tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n#        [1, 1, 1,\
          \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}\n```\n\nIf you check the vocab.txt\
          \ file of the model, you'll see that the token_id=2 is ``</s>``.\n\nCheers!"
        updatedAt: '2023-01-12T08:31:26.102Z'
      numEdits: 1
      reactions: []
    id: 63bfc51295cbca1d881e0baa
    type: comment
  author: gperez
  content: "Hi! Sorry we forgot to answer \U0001F64F\U0001F3FB\n\nActually it seems\
    \ that for NLI tasks it isn't as you say. You can check that passing to the tokenizer\
    \ directly the list of tuples (premise, hypothesis) and then check the token_ids:\n\
    \n```python\ninput_pairs = [(\"I like this pizza.\", \"The sentence is positive.\"\
    ), (\"I like this pizza.\", \"The sentence is negative.\")]\ninputs = tokenizer(input_pairs,\
    \ return_tensors=\"pt\")\n# Output\n#{'input_ids': tensor([[    0,  1049,  2070,\
    \  2027, 10737,  1016,     2,     2,  2000,  6255,\n#         2007,  3897,  1016,\
    \     2],\n#        [    0,  1049,  2070,  2027, 10737,  1016,     2,     2, \
    \ 2000,  6255,\n#          2007,  5001,  1016,     2]]), 'attention_mask': tensor([[1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n#        [1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1]])}\n```\n\nIf you check the vocab.txt file of the model, you'll\
    \ see that the token_id=2 is ``</s>``.\n\nCheers!"
  created_at: 2023-01-12 08:30:10+00:00
  edited: true
  hidden: false
  id: 63bfc51295cbca1d881e0baa
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: symanto/mpnet-base-snli-mnli
repo_type: model
status: open
target_branch: null
title: Typo in Model card
