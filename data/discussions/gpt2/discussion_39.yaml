!!python/object:huggingface_hub.community.DiscussionWithDetails
author: workpiece
conflicting_files: null
created_at: 2023-04-04 00:51:13+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/b6e3aa2436de3f90bfb4e713f85fcbd7.svg
      fullname: Karunya
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: workpiece
      type: user
    createdAt: '2023-04-04T01:51:13.000Z'
    data:
      edited: true
      editors:
      - workpiece
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/b6e3aa2436de3f90bfb4e713f85fcbd7.svg
          fullname: Karunya
          isHf: false
          isPro: false
          name: workpiece
          type: user
        html: '<p>#The below is my code:</p>

          <p>import matplotlib.pyplot as plt<br>import numpy as np<br>from transformers
          import Trainer, TrainingArguments<br>from transformers import EarlyStoppingCallback</p>

          <p>training_args = TrainingArguments(<br>    output_dir="gpt_model",<br>    overwrite_output_dir=True,<br>    learning_rate=7e-5,<br>    weight_decay=0.01,<br>    num_train_epochs=20,<br>    logging_steps=50,<br>    save_total_limit=2,<br>    per_device_train_batch_size=3,<br>    save_steps=10_000,<br>    evaluation_strategy=''no''<br>)</p>

          <p>trainer = Trainer(<br>    model=mpm_model,<br>    args=training_args,<br>    data_collator=data_collator,<br>    train_dataset=mpm_dataset[''train''],<br>)</p>

          <h1 id="train-your-model">train your model</h1>

          <p>trainer.train()</p>

          <h1 id="get-the-training-loss">Get the training loss</h1>

          <p>losses = [x[''loss''] for x in trainer.state.log_history]</p>

          <h1 id="plot-the-training-loss">plot the training loss</h1>

          <p>steps = np.linspace(0, len(losses), len(losses))<br>plt.plot(steps, losses)<br>plt.title("Training
          loss")<br>plt.xlabel("Steps")<br>plt.ylabel("Loss")<br>plt.show()</p>

          <hr>

          <p>Error generated for the above code</p>

          <p>KeyError: ''loss''<br><a rel="nofollow" href="https://cdn-uploads.huggingface.co/production/uploads/63de595015266dd945f23d5a/758A2Se8MDCogiTWY0sRf.jpeg"><img
          alt="KeyError.jpg" src="https://cdn-uploads.huggingface.co/production/uploads/63de595015266dd945f23d5a/758A2Se8MDCogiTWY0sRf.jpeg"></a></p>

          '
        raw: "#The below is my code:\n\nimport matplotlib.pyplot as plt\nimport numpy\
          \ as np\nfrom transformers import Trainer, TrainingArguments\nfrom transformers\
          \ import EarlyStoppingCallback\n\n\ntraining_args = TrainingArguments( \n\
          \    output_dir=\"gpt_model\",\n    overwrite_output_dir=True,\n    learning_rate=7e-5,\n\
          \    weight_decay=0.01,\n    num_train_epochs=20,\n    logging_steps=50,\n\
          \    save_total_limit=2,\n    per_device_train_batch_size=3,\n    save_steps=10_000,\n\
          \    evaluation_strategy='no'\n)\n    \ntrainer = Trainer(\n    model=mpm_model,\n\
          \    args=training_args,\n    data_collator=data_collator,\n    train_dataset=mpm_dataset['train'],\n\
          )\n\n# train your model\ntrainer.train()\n\n# Get the training loss\nlosses\
          \ = [x['loss'] for x in trainer.state.log_history]\n\n# plot the training\
          \ loss\nsteps = np.linspace(0, len(losses), len(losses))\nplt.plot(steps,\
          \ losses)\nplt.title(\"Training loss\")\nplt.xlabel(\"Steps\")\nplt.ylabel(\"\
          Loss\")\nplt.show()\n\n------------------------------------------------------------\n\
          \nError generated for the above code\n\nKeyError: 'loss'\n![KeyError.jpg](https://cdn-uploads.huggingface.co/production/uploads/63de595015266dd945f23d5a/758A2Se8MDCogiTWY0sRf.jpeg)"
        updatedAt: '2023-04-04T01:53:26.678Z'
      numEdits: 1
      reactions: []
    id: 642b829148f67b6f21d4b168
    type: comment
  author: workpiece
  content: "#The below is my code:\n\nimport matplotlib.pyplot as plt\nimport numpy\
    \ as np\nfrom transformers import Trainer, TrainingArguments\nfrom transformers\
    \ import EarlyStoppingCallback\n\n\ntraining_args = TrainingArguments( \n    output_dir=\"\
    gpt_model\",\n    overwrite_output_dir=True,\n    learning_rate=7e-5,\n    weight_decay=0.01,\n\
    \    num_train_epochs=20,\n    logging_steps=50,\n    save_total_limit=2,\n  \
    \  per_device_train_batch_size=3,\n    save_steps=10_000,\n    evaluation_strategy='no'\n\
    )\n    \ntrainer = Trainer(\n    model=mpm_model,\n    args=training_args,\n \
    \   data_collator=data_collator,\n    train_dataset=mpm_dataset['train'],\n)\n\
    \n# train your model\ntrainer.train()\n\n# Get the training loss\nlosses = [x['loss']\
    \ for x in trainer.state.log_history]\n\n# plot the training loss\nsteps = np.linspace(0,\
    \ len(losses), len(losses))\nplt.plot(steps, losses)\nplt.title(\"Training loss\"\
    )\nplt.xlabel(\"Steps\")\nplt.ylabel(\"Loss\")\nplt.show()\n\n------------------------------------------------------------\n\
    \nError generated for the above code\n\nKeyError: 'loss'\n![KeyError.jpg](https://cdn-uploads.huggingface.co/production/uploads/63de595015266dd945f23d5a/758A2Se8MDCogiTWY0sRf.jpeg)"
  created_at: 2023-04-04 00:51:13+00:00
  edited: true
  hidden: false
  id: 642b829148f67b6f21d4b168
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 39
repo_id: gpt2
repo_type: model
status: open
target_branch: null
title: Cannot plot a loss curve for the text generation gpt2 model
