!!python/object:huggingface_hub.community.DiscussionWithDetails
author: rombodawg
conflicting_files: null
created_at: 2023-12-07 03:51:21+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/642cc1c253e76b4c2286c58e/n8h5JKRgaAoYrE36BtHRO.jpeg?w=200&h=200&f=face
      fullname: rombo dawg
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: rombodawg
      type: user
    createdAt: '2023-12-07T03:51:21.000Z'
    data:
      edited: false
      editors:
      - rombodawg
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7708927392959595
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/642cc1c253e76b4c2286c58e/n8h5JKRgaAoYrE36BtHRO.jpeg?w=200&h=200&f=face
          fullname: rombo dawg
          isHf: false
          isPro: false
          name: rombodawg
          type: user
        html: "<p>OMG this model is amazing look at this code its perfect!!! It wrote\
          \ the games of snake perfectly first try. Its as good as gpt 3.5 maybe better\
          \ at coding!!!</p>\n<p>This is the verison i used<br>TheBloke/Magicoder-S-DS-6.7B-GPTQ<br>gptq-8bit--1g-actorder_True</p>\n\
          <p>Here is the code the model wrote, try running it yourself its flawless,\
          \ and it wrote it the first time, no need to fix anything,:</p>\n<pre><code>import\
          \ turtle\nimport time\nimport random\n\ndelay = 0.1\nscore = 0\nhigh_score\
          \ = 0\n\n# Set up screen\nwn = turtle.Screen()\nwn.title(\"Snake by @TokyoEdTech\"\
          )  # Change title as per your preference\nwn.bgcolor(\"green\")        \
          \        # Change background color if needed\nwn.setup(width=600, height=600)\
          \     # Size of window\nwn.tracer(0)                       # Turn off automatic\
          \ animation on screen updates\n\n# Snake head\nhead = turtle.Turtle()\n\
          head.speed(0)                      # Animation speed set to max possible\
          \ speed (fastest)\nhead.shape(\"square\")               # Shape of our object\
          \ will be square\nhead.color(\"black\")                 # Color of our object\
          \ will be black\nhead.penup()                        # Penup function prevents\
          \ drawing line while moving\nhead.goto(0, 0)                     # Initial\
          \ position of snake at center of screen\nhead.direction = \"stop\"     \
          \       # Default direction of movement when no key pressed\n\nsegments\
          \ = []\n\n# Food\nfood = turtle.Turtle()\nfood.speed(0)\nfood.shape(\"circle\"\
          )              # Circular shape food item\nfood.color(\"red\")         \
          \         # Red colour for food\nfood.penup()\nfood.goto(0, 100)       \
          \            # Positioning food initially above the screen\n\n# Score board\n\
          pen = turtle.Turtle()\npen.speed(0)\npen.shape(\"square\")\npen.color(\"\
          white\")\npen.penup()\npen.hideturtle()\npen.goto(0, 260)              \
          \      # Placing scoreboard below the screen\npen.write(\"Score : 0 High\
          \ Score : 0\", align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          def go_up():\n    if head.direction != \"down\":   # If we are not currently\
          \ facing downwards then change heading towards upward\n        head.direction\
          \ = \"up\"\n\ndef go_down():\n    if head.direction != \"up\":      # Same\
          \ logic applies here but this time checking against opposite direction\n\
          \        head.direction = \"down\"\n\ndef go_left():\n    if head.direction\
          \ != \"right\":\n        head.direction = \"left\"\n\ndef go_right():\n\
          \    if head.direction != \"left\":\n        head.direction = \"right\"\n\
          \ndef move():\n    if head.direction == \"up\":       # Movement based on\
          \ current direction faced\n        y = head.ycor()\n        head.sety(y\
          \ + 20)\n\n    elif head.direction == \"down\":\n        y = head.ycor()\n\
          \        head.sety(y - 20)\n\n    elif head.direction == \"left\":\n   \
          \     x = head.xcor()\n        head.setx(x - 20)\n\n    else:          \
          \                   # This means that direction must have been right so\
          \ increment X coordinate\n        x = head.xcor()\n        head.setx(x +\
          \ 20)\n\n# Keyboard bindings\nwn.listen()                          # Listen\
          \ for keyboard input from player\nwn.onkeypress(go_up, \"w\")          \
          \ # When 'W' key is pressed call go_up method\nwn.onkeypress(go_down, \"\
          s\")          # When 'S' key is pressed call go_down method\nwn.onkeypress(go_left,\
          \ \"a\")          # When 'A' key is pressed call go_left method\nwn.onkeypress(go_right,\
          \ \"d\")         # When 'D' key is pressed call go_right method\n\nwhile\
          \ True:                           # Main loop which runs until break statement\
          \ encountered or error occurs\n    wn.update()                       # Update\
          \ the screen everytime loop iterates\n\n    # Check collision between head\
          \ &amp; body segments\n    for segment in segments:\n        if segment.distance(head)\
          \ &lt; 20:\n            time.sleep(1)\n            head.goto(0, 0)\n   \
          \         head.direction = \"stop\"\n\n            # Hide all segments before\
          \ resetting them\n            for seg in segments:\n                seg.goto(1000,\
          \ 1000)\n\n            # Clear list of segments\n            segments =\
          \ []\n\n            # Reset score\n            score = 0\n\n           \
          \ pen.clear()\n            pen.write(\"Score : {} High Score : {}\".format(score,\
          \ high_score), align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          \    # Check for boundary collisions\n    if head.xcor() &gt; 290 or head.xcor()\
          \ &lt; -290 or head.ycor() &gt; 290 or head.ycor() &lt; -290:\n        time.sleep(1)\n\
          \        head.goto(0, 0)\n        head.direction = \"stop\"\n\n        #\
          \ Hide all segments before resetting them\n        for seg in segments:\n\
          \            seg.goto(1000, 1000)\n\n        # Clear list of segments\n\
          \        segments = []\n\n        # Reset score\n        score = 0\n\n \
          \       pen.clear()\n        pen.write(\"Score : {} High Score : {}\".format(score,\
          \ high_score), align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          \    # Check for eating food\n    if head.distance(food) &lt; 20:\n    \
          \    # Move food to new location randomly within boundaries\n        x =\
          \ random.randint(-280, 280)\n        y = random.randint(-280, 280)\n   \
          \     food.goto(x, y)\n\n        # Add a new segment\n        new_segment\
          \ = turtle.Turtle()\n        new_segment.speed(0)\n        new_segment.shape(\"\
          square\")\n        new_segment.color(\"grey\")\n        new_segment.penup()\n\
          \        segments.append(new_segment)\n\n        delay -= 0.001\n\n    \
          \    # Increase score\n        score += 10\n\n        if score &gt; high_score:\n\
          \            high_score = score\n\n        pen.clear()\n        pen.write(\"\
          Score : {} High Score : {}\".format(score, high_score), align=\"center\"\
          , font=(\"Courier\", 24, \"normal\"))\n\n    # Move end segments first in\
          \ reverse order\n    for index in range(len(segments)-1, 0, -1):\n     \
          \   x = segments[index-1].xcor()\n        y = segments[index-1].ycor()\n\
          \        segments[index].goto(x, y)\n\n    # Move segment zero to where\
          \ the head was\n    if len(segments) &gt; 0:\n        x = head.xcor()\n\
          \        y = head.ycor()\n        segments[0].goto(x, y)\n\n    move()\n\
          \n    # Delay after each iteration\n    time.sleep(delay)\n\nturtle.done()\n\
          </code></pre>\n"
        raw: "OMG this model is amazing look at this code its perfect!!! It wrote\
          \ the games of snake perfectly first try. Its as good as gpt 3.5 maybe better\
          \ at coding!!!\r\n\r\nThis is the verison i used \r\nTheBloke/Magicoder-S-DS-6.7B-GPTQ\r\
          \ngptq-8bit--1g-actorder_True\r\n\r\nHere is the code the model wrote, try\
          \ running it yourself its flawless, and it wrote it the first time, no need\
          \ to fix anything,:\r\n\r\n```\r\nimport turtle\r\nimport time\r\nimport\
          \ random\r\n\r\ndelay = 0.1\r\nscore = 0\r\nhigh_score = 0\r\n\r\n# Set\
          \ up screen\r\nwn = turtle.Screen()\r\nwn.title(\"Snake by @TokyoEdTech\"\
          )  # Change title as per your preference\r\nwn.bgcolor(\"green\")      \
          \          # Change background color if needed\r\nwn.setup(width=600, height=600)\
          \     # Size of window\r\nwn.tracer(0)                       # Turn off\
          \ automatic animation on screen updates\r\n\r\n# Snake head\r\nhead = turtle.Turtle()\r\
          \nhead.speed(0)                      # Animation speed set to max possible\
          \ speed (fastest)\r\nhead.shape(\"square\")               # Shape of our\
          \ object will be square\r\nhead.color(\"black\")                 # Color\
          \ of our object will be black\r\nhead.penup()                        # Penup\
          \ function prevents drawing line while moving\r\nhead.goto(0, 0)       \
          \              # Initial position of snake at center of screen\r\nhead.direction\
          \ = \"stop\"            # Default direction of movement when no key pressed\r\
          \n\r\nsegments = []\r\n\r\n# Food\r\nfood = turtle.Turtle()\r\nfood.speed(0)\r\
          \nfood.shape(\"circle\")              # Circular shape food item\r\nfood.color(\"\
          red\")                  # Red colour for food\r\nfood.penup()\r\nfood.goto(0,\
          \ 100)                   # Positioning food initially above the screen\r\
          \n\r\n# Score board\r\npen = turtle.Turtle()\r\npen.speed(0)\r\npen.shape(\"\
          square\")\r\npen.color(\"white\")\r\npen.penup()\r\npen.hideturtle()\r\n\
          pen.goto(0, 260)                    # Placing scoreboard below the screen\r\
          \npen.write(\"Score : 0 High Score : 0\", align=\"center\", font=(\"Courier\"\
          , 24, \"normal\"))\r\n\r\ndef go_up():\r\n    if head.direction != \"down\"\
          :   # If we are not currently facing downwards then change heading towards\
          \ upward\r\n        head.direction = \"up\"\r\n\r\ndef go_down():\r\n  \
          \  if head.direction != \"up\":      # Same logic applies here but this\
          \ time checking against opposite direction\r\n        head.direction = \"\
          down\"\r\n\r\ndef go_left():\r\n    if head.direction != \"right\":\r\n\
          \        head.direction = \"left\"\r\n\r\ndef go_right():\r\n    if head.direction\
          \ != \"left\":\r\n        head.direction = \"right\"\r\n\r\ndef move():\r\
          \n    if head.direction == \"up\":       # Movement based on current direction\
          \ faced\r\n        y = head.ycor()\r\n        head.sety(y + 20)\r\n\r\n\
          \    elif head.direction == \"down\":\r\n        y = head.ycor()\r\n   \
          \     head.sety(y - 20)\r\n\r\n    elif head.direction == \"left\":\r\n\
          \        x = head.xcor()\r\n        head.setx(x - 20)\r\n\r\n    else: \
          \                            # This means that direction must have been\
          \ right so increment X coordinate\r\n        x = head.xcor()\r\n       \
          \ head.setx(x + 20)\r\n\r\n# Keyboard bindings\r\nwn.listen()          \
          \                # Listen for keyboard input from player\r\nwn.onkeypress(go_up,\
          \ \"w\")           # When 'W' key is pressed call go_up method\r\nwn.onkeypress(go_down,\
          \ \"s\")          # When 'S' key is pressed call go_down method\r\nwn.onkeypress(go_left,\
          \ \"a\")          # When 'A' key is pressed call go_left method\r\nwn.onkeypress(go_right,\
          \ \"d\")         # When 'D' key is pressed call go_right method\r\n\r\n\
          while True:                           # Main loop which runs until break\
          \ statement encountered or error occurs\r\n    wn.update()             \
          \          # Update the screen everytime loop iterates\r\n\r\n    # Check\
          \ collision between head & body segments\r\n    for segment in segments:\r\
          \n        if segment.distance(head) < 20:\r\n            time.sleep(1)\r\
          \n            head.goto(0, 0)\r\n            head.direction = \"stop\"\r\
          \n\r\n            # Hide all segments before resetting them\r\n        \
          \    for seg in segments:\r\n                seg.goto(1000, 1000)\r\n\r\n\
          \            # Clear list of segments\r\n            segments = []\r\n\r\
          \n            # Reset score\r\n            score = 0\r\n\r\n           \
          \ pen.clear()\r\n            pen.write(\"Score : {} High Score : {}\".format(score,\
          \ high_score), align=\"center\", font=(\"Courier\", 24, \"normal\"))\r\n\
          \r\n    # Check for boundary collisions\r\n    if head.xcor() > 290 or head.xcor()\
          \ < -290 or head.ycor() > 290 or head.ycor() < -290:\r\n        time.sleep(1)\r\
          \n        head.goto(0, 0)\r\n        head.direction = \"stop\"\r\n\r\n \
          \       # Hide all segments before resetting them\r\n        for seg in\
          \ segments:\r\n            seg.goto(1000, 1000)\r\n\r\n        # Clear list\
          \ of segments\r\n        segments = []\r\n\r\n        # Reset score\r\n\
          \        score = 0\r\n\r\n        pen.clear()\r\n        pen.write(\"Score\
          \ : {} High Score : {}\".format(score, high_score), align=\"center\", font=(\"\
          Courier\", 24, \"normal\"))\r\n\r\n    # Check for eating food\r\n    if\
          \ head.distance(food) < 20:\r\n        # Move food to new location randomly\
          \ within boundaries\r\n        x = random.randint(-280, 280)\r\n       \
          \ y = random.randint(-280, 280)\r\n        food.goto(x, y)\r\n\r\n     \
          \   # Add a new segment\r\n        new_segment = turtle.Turtle()\r\n   \
          \     new_segment.speed(0)\r\n        new_segment.shape(\"square\")\r\n\
          \        new_segment.color(\"grey\")\r\n        new_segment.penup()\r\n\
          \        segments.append(new_segment)\r\n\r\n        delay -= 0.001\r\n\r\
          \n        # Increase score\r\n        score += 10\r\n\r\n        if score\
          \ > high_score:\r\n            high_score = score\r\n\r\n        pen.clear()\r\
          \n        pen.write(\"Score : {} High Score : {}\".format(score, high_score),\
          \ align=\"center\", font=(\"Courier\", 24, \"normal\"))\r\n\r\n    # Move\
          \ end segments first in reverse order\r\n    for index in range(len(segments)-1,\
          \ 0, -1):\r\n        x = segments[index-1].xcor()\r\n        y = segments[index-1].ycor()\r\
          \n        segments[index].goto(x, y)\r\n\r\n    # Move segment zero to where\
          \ the head was\r\n    if len(segments) > 0:\r\n        x = head.xcor()\r\
          \n        y = head.ycor()\r\n        segments[0].goto(x, y)\r\n\r\n    move()\r\
          \n\r\n    # Delay after each iteration\r\n    time.sleep(delay)\r\n\r\n\
          turtle.done()\r\n```"
        updatedAt: '2023-12-07T03:51:21.913Z'
      numEdits: 0
      reactions:
      - count: 4
        reaction: "\u2764\uFE0F"
        users:
        - yuxiang630
        - ganler
        - not-lain
        - lingming
      - count: 4
        reaction: "\U0001F44D"
        users:
        - yuxiang630
        - ganler
        - Ji-Xiang
        - gnomealone
    id: 657141396bbfca64615d2b33
    type: comment
  author: rombodawg
  content: "OMG this model is amazing look at this code its perfect!!! It wrote the\
    \ games of snake perfectly first try. Its as good as gpt 3.5 maybe better at coding!!!\r\
    \n\r\nThis is the verison i used \r\nTheBloke/Magicoder-S-DS-6.7B-GPTQ\r\ngptq-8bit--1g-actorder_True\r\
    \n\r\nHere is the code the model wrote, try running it yourself its flawless,\
    \ and it wrote it the first time, no need to fix anything,:\r\n\r\n```\r\nimport\
    \ turtle\r\nimport time\r\nimport random\r\n\r\ndelay = 0.1\r\nscore = 0\r\nhigh_score\
    \ = 0\r\n\r\n# Set up screen\r\nwn = turtle.Screen()\r\nwn.title(\"Snake by @TokyoEdTech\"\
    )  # Change title as per your preference\r\nwn.bgcolor(\"green\")            \
    \    # Change background color if needed\r\nwn.setup(width=600, height=600)  \
    \   # Size of window\r\nwn.tracer(0)                       # Turn off automatic\
    \ animation on screen updates\r\n\r\n# Snake head\r\nhead = turtle.Turtle()\r\n\
    head.speed(0)                      # Animation speed set to max possible speed\
    \ (fastest)\r\nhead.shape(\"square\")               # Shape of our object will\
    \ be square\r\nhead.color(\"black\")                 # Color of our object will\
    \ be black\r\nhead.penup()                        # Penup function prevents drawing\
    \ line while moving\r\nhead.goto(0, 0)                     # Initial position\
    \ of snake at center of screen\r\nhead.direction = \"stop\"            # Default\
    \ direction of movement when no key pressed\r\n\r\nsegments = []\r\n\r\n# Food\r\
    \nfood = turtle.Turtle()\r\nfood.speed(0)\r\nfood.shape(\"circle\")          \
    \    # Circular shape food item\r\nfood.color(\"red\")                  # Red\
    \ colour for food\r\nfood.penup()\r\nfood.goto(0, 100)                   # Positioning\
    \ food initially above the screen\r\n\r\n# Score board\r\npen = turtle.Turtle()\r\
    \npen.speed(0)\r\npen.shape(\"square\")\r\npen.color(\"white\")\r\npen.penup()\r\
    \npen.hideturtle()\r\npen.goto(0, 260)                    # Placing scoreboard\
    \ below the screen\r\npen.write(\"Score : 0 High Score : 0\", align=\"center\"\
    , font=(\"Courier\", 24, \"normal\"))\r\n\r\ndef go_up():\r\n    if head.direction\
    \ != \"down\":   # If we are not currently facing downwards then change heading\
    \ towards upward\r\n        head.direction = \"up\"\r\n\r\ndef go_down():\r\n\
    \    if head.direction != \"up\":      # Same logic applies here but this time\
    \ checking against opposite direction\r\n        head.direction = \"down\"\r\n\
    \r\ndef go_left():\r\n    if head.direction != \"right\":\r\n        head.direction\
    \ = \"left\"\r\n\r\ndef go_right():\r\n    if head.direction != \"left\":\r\n\
    \        head.direction = \"right\"\r\n\r\ndef move():\r\n    if head.direction\
    \ == \"up\":       # Movement based on current direction faced\r\n        y =\
    \ head.ycor()\r\n        head.sety(y + 20)\r\n\r\n    elif head.direction == \"\
    down\":\r\n        y = head.ycor()\r\n        head.sety(y - 20)\r\n\r\n    elif\
    \ head.direction == \"left\":\r\n        x = head.xcor()\r\n        head.setx(x\
    \ - 20)\r\n\r\n    else:                             # This means that direction\
    \ must have been right so increment X coordinate\r\n        x = head.xcor()\r\n\
    \        head.setx(x + 20)\r\n\r\n# Keyboard bindings\r\nwn.listen()         \
    \                 # Listen for keyboard input from player\r\nwn.onkeypress(go_up,\
    \ \"w\")           # When 'W' key is pressed call go_up method\r\nwn.onkeypress(go_down,\
    \ \"s\")          # When 'S' key is pressed call go_down method\r\nwn.onkeypress(go_left,\
    \ \"a\")          # When 'A' key is pressed call go_left method\r\nwn.onkeypress(go_right,\
    \ \"d\")         # When 'D' key is pressed call go_right method\r\n\r\nwhile True:\
    \                           # Main loop which runs until break statement encountered\
    \ or error occurs\r\n    wn.update()                       # Update the screen\
    \ everytime loop iterates\r\n\r\n    # Check collision between head & body segments\r\
    \n    for segment in segments:\r\n        if segment.distance(head) < 20:\r\n\
    \            time.sleep(1)\r\n            head.goto(0, 0)\r\n            head.direction\
    \ = \"stop\"\r\n\r\n            # Hide all segments before resetting them\r\n\
    \            for seg in segments:\r\n                seg.goto(1000, 1000)\r\n\r\
    \n            # Clear list of segments\r\n            segments = []\r\n\r\n  \
    \          # Reset score\r\n            score = 0\r\n\r\n            pen.clear()\r\
    \n            pen.write(\"Score : {} High Score : {}\".format(score, high_score),\
    \ align=\"center\", font=(\"Courier\", 24, \"normal\"))\r\n\r\n    # Check for\
    \ boundary collisions\r\n    if head.xcor() > 290 or head.xcor() < -290 or head.ycor()\
    \ > 290 or head.ycor() < -290:\r\n        time.sleep(1)\r\n        head.goto(0,\
    \ 0)\r\n        head.direction = \"stop\"\r\n\r\n        # Hide all segments before\
    \ resetting them\r\n        for seg in segments:\r\n            seg.goto(1000,\
    \ 1000)\r\n\r\n        # Clear list of segments\r\n        segments = []\r\n\r\
    \n        # Reset score\r\n        score = 0\r\n\r\n        pen.clear()\r\n  \
    \      pen.write(\"Score : {} High Score : {}\".format(score, high_score), align=\"\
    center\", font=(\"Courier\", 24, \"normal\"))\r\n\r\n    # Check for eating food\r\
    \n    if head.distance(food) < 20:\r\n        # Move food to new location randomly\
    \ within boundaries\r\n        x = random.randint(-280, 280)\r\n        y = random.randint(-280,\
    \ 280)\r\n        food.goto(x, y)\r\n\r\n        # Add a new segment\r\n     \
    \   new_segment = turtle.Turtle()\r\n        new_segment.speed(0)\r\n        new_segment.shape(\"\
    square\")\r\n        new_segment.color(\"grey\")\r\n        new_segment.penup()\r\
    \n        segments.append(new_segment)\r\n\r\n        delay -= 0.001\r\n\r\n \
    \       # Increase score\r\n        score += 10\r\n\r\n        if score > high_score:\r\
    \n            high_score = score\r\n\r\n        pen.clear()\r\n        pen.write(\"\
    Score : {} High Score : {}\".format(score, high_score), align=\"center\", font=(\"\
    Courier\", 24, \"normal\"))\r\n\r\n    # Move end segments first in reverse order\r\
    \n    for index in range(len(segments)-1, 0, -1):\r\n        x = segments[index-1].xcor()\r\
    \n        y = segments[index-1].ycor()\r\n        segments[index].goto(x, y)\r\
    \n\r\n    # Move segment zero to where the head was\r\n    if len(segments) >\
    \ 0:\r\n        x = head.xcor()\r\n        y = head.ycor()\r\n        segments[0].goto(x,\
    \ y)\r\n\r\n    move()\r\n\r\n    # Delay after each iteration\r\n    time.sleep(delay)\r\
    \n\r\nturtle.done()\r\n```"
  created_at: 2023-12-07 03:51:21+00:00
  edited: false
  hidden: false
  id: 657141396bbfca64615d2b33
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/9e2ad426d26aa90cd8cce28896ec248a.svg
      fullname: sairampv
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ramsaipv
      type: user
    createdAt: '2023-12-12T12:53:40.000Z'
    data:
      edited: false
      editors:
      - ramsaipv
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7601496577262878
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/9e2ad426d26aa90cd8cce28896ec248a.svg
          fullname: sairampv
          isHf: false
          isPro: false
          name: ramsaipv
          type: user
        html: "<blockquote>\n<p>OMG this model is amazing look at this code its perfect!!!\
          \ It wrote the games of snake perfectly first try. Its as good as gpt 3.5\
          \ maybe better at coding!!!</p>\n<p>This is the verison i used<br>TheBloke/Magicoder-S-DS-6.7B-GPTQ<br>gptq-8bit--1g-actorder_True</p>\n\
          <p>Here is the code the model wrote, try running it yourself its flawless,\
          \ and it wrote it the first time, no need to fix anything,:</p>\n<pre><code>import\
          \ turtle\nimport time\nimport random\n\ndelay = 0.1\nscore = 0\nhigh_score\
          \ = 0\n\n# Set up screen\nwn = turtle.Screen()\nwn.title(\"Snake by @TokyoEdTech\"\
          )  # Change title as per your preference\nwn.bgcolor(\"green\")        \
          \        # Change background color if needed\nwn.setup(width=600, height=600)\
          \     # Size of window\nwn.tracer(0)                       # Turn off automatic\
          \ animation on screen updates\n\n# Snake head\nhead = turtle.Turtle()\n\
          head.speed(0)                      # Animation speed set to max possible\
          \ speed (fastest)\nhead.shape(\"square\")               # Shape of our object\
          \ will be square\nhead.color(\"black\")                 # Color of our object\
          \ will be black\nhead.penup()                        # Penup function prevents\
          \ drawing line while moving\nhead.goto(0, 0)                     # Initial\
          \ position of snake at center of screen\nhead.direction = \"stop\"     \
          \       # Default direction of movement when no key pressed\n\nsegments\
          \ = []\n\n# Food\nfood = turtle.Turtle()\nfood.speed(0)\nfood.shape(\"circle\"\
          )              # Circular shape food item\nfood.color(\"red\")         \
          \         # Red colour for food\nfood.penup()\nfood.goto(0, 100)       \
          \            # Positioning food initially above the screen\n\n# Score board\n\
          pen = turtle.Turtle()\npen.speed(0)\npen.shape(\"square\")\npen.color(\"\
          white\")\npen.penup()\npen.hideturtle()\npen.goto(0, 260)              \
          \      # Placing scoreboard below the screen\npen.write(\"Score : 0 High\
          \ Score : 0\", align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          def go_up():\n    if head.direction != \"down\":   # If we are not currently\
          \ facing downwards then change heading towards upward\n        head.direction\
          \ = \"up\"\n\ndef go_down():\n    if head.direction != \"up\":      # Same\
          \ logic applies here but this time checking against opposite direction\n\
          \        head.direction = \"down\"\n\ndef go_left():\n    if head.direction\
          \ != \"right\":\n        head.direction = \"left\"\n\ndef go_right():\n\
          \    if head.direction != \"left\":\n        head.direction = \"right\"\n\
          \ndef move():\n    if head.direction == \"up\":       # Movement based on\
          \ current direction faced\n        y = head.ycor()\n        head.sety(y\
          \ + 20)\n\n    elif head.direction == \"down\":\n        y = head.ycor()\n\
          \        head.sety(y - 20)\n\n    elif head.direction == \"left\":\n   \
          \     x = head.xcor()\n        head.setx(x - 20)\n\n    else:          \
          \                   # This means that direction must have been right so\
          \ increment X coordinate\n        x = head.xcor()\n        head.setx(x +\
          \ 20)\n\n# Keyboard bindings\nwn.listen()                          # Listen\
          \ for keyboard input from player\nwn.onkeypress(go_up, \"w\")          \
          \ # When 'W' key is pressed call go_up method\nwn.onkeypress(go_down, \"\
          s\")          # When 'S' key is pressed call go_down method\nwn.onkeypress(go_left,\
          \ \"a\")          # When 'A' key is pressed call go_left method\nwn.onkeypress(go_right,\
          \ \"d\")         # When 'D' key is pressed call go_right method\n\nwhile\
          \ True:                           # Main loop which runs until break statement\
          \ encountered or error occurs\n    wn.update()                       # Update\
          \ the screen everytime loop iterates\n\n    # Check collision between head\
          \ &amp; body segments\n    for segment in segments:\n        if segment.distance(head)\
          \ &lt; 20:\n            time.sleep(1)\n            head.goto(0, 0)\n   \
          \         head.direction = \"stop\"\n\n            # Hide all segments before\
          \ resetting them\n            for seg in segments:\n                seg.goto(1000,\
          \ 1000)\n\n            # Clear list of segments\n            segments =\
          \ []\n\n            # Reset score\n            score = 0\n\n           \
          \ pen.clear()\n            pen.write(\"Score : {} High Score : {}\".format(score,\
          \ high_score), align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          \    # Check for boundary collisions\n    if head.xcor() &gt; 290 or head.xcor()\
          \ &lt; -290 or head.ycor() &gt; 290 or head.ycor() &lt; -290:\n        time.sleep(1)\n\
          \        head.goto(0, 0)\n        head.direction = \"stop\"\n\n        #\
          \ Hide all segments before resetting them\n        for seg in segments:\n\
          \            seg.goto(1000, 1000)\n\n        # Clear list of segments\n\
          \        segments = []\n\n        # Reset score\n        score = 0\n\n \
          \       pen.clear()\n        pen.write(\"Score : {} High Score : {}\".format(score,\
          \ high_score), align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          \    # Check for eating food\n    if head.distance(food) &lt; 20:\n    \
          \    # Move food to new location randomly within boundaries\n        x =\
          \ random.randint(-280, 280)\n        y = random.randint(-280, 280)\n   \
          \     food.goto(x, y)\n\n        # Add a new segment\n        new_segment\
          \ = turtle.Turtle()\n        new_segment.speed(0)\n        new_segment.shape(\"\
          square\")\n        new_segment.color(\"grey\")\n        new_segment.penup()\n\
          \        segments.append(new_segment)\n\n        delay -= 0.001\n\n    \
          \    # Increase score\n        score += 10\n\n        if score &gt; high_score:\n\
          \            high_score = score\n\n        pen.clear()\n        pen.write(\"\
          Score : {} High Score : {}\".format(score, high_score), align=\"center\"\
          , font=(\"Courier\", 24, \"normal\"))\n\n    # Move end segments first in\
          \ reverse order\n    for index in range(len(segments)-1, 0, -1):\n     \
          \   x = segments[index-1].xcor()\n        y = segments[index-1].ycor()\n\
          \        segments[index].goto(x, y)\n\n    # Move segment zero to where\
          \ the head was\n    if len(segments) &gt; 0:\n        x = head.xcor()\n\
          \        y = head.ycor()\n        segments[0].goto(x, y)\n\n    move()\n\
          \n    # Delay after each iteration\n    time.sleep(delay)\n\nturtle.done()\n\
          </code></pre>\n</blockquote>\n<p>How did you inference the model (did you\
          \ write a python code? Or did you use the various model loaders?)what platform\
          \ are you on and what are the minimum requirements you think it needs to\
          \ run as in GPU(vram)/cpu(cores)/ram_size</p>\n"
        raw: "> OMG this model is amazing look at this code its perfect!!! It wrote\
          \ the games of snake perfectly first try. Its as good as gpt 3.5 maybe better\
          \ at coding!!!\n> \n> This is the verison i used \n> TheBloke/Magicoder-S-DS-6.7B-GPTQ\n\
          > gptq-8bit--1g-actorder_True\n> \n> Here is the code the model wrote, try\
          \ running it yourself its flawless, and it wrote it the first time, no need\
          \ to fix anything,:\n> \n> ```\n> import turtle\n> import time\n> import\
          \ random\n> \n> delay = 0.1\n> score = 0\n> high_score = 0\n> \n> # Set\
          \ up screen\n> wn = turtle.Screen()\n> wn.title(\"Snake by @TokyoEdTech\"\
          )  # Change title as per your preference\n> wn.bgcolor(\"green\")      \
          \          # Change background color if needed\n> wn.setup(width=600, height=600)\
          \     # Size of window\n> wn.tracer(0)                       # Turn off\
          \ automatic animation on screen updates\n> \n> # Snake head\n> head = turtle.Turtle()\n\
          > head.speed(0)                      # Animation speed set to max possible\
          \ speed (fastest)\n> head.shape(\"square\")               # Shape of our\
          \ object will be square\n> head.color(\"black\")                 # Color\
          \ of our object will be black\n> head.penup()                        # Penup\
          \ function prevents drawing line while moving\n> head.goto(0, 0)       \
          \              # Initial position of snake at center of screen\n> head.direction\
          \ = \"stop\"            # Default direction of movement when no key pressed\n\
          > \n> segments = []\n> \n> # Food\n> food = turtle.Turtle()\n> food.speed(0)\n\
          > food.shape(\"circle\")              # Circular shape food item\n> food.color(\"\
          red\")                  # Red colour for food\n> food.penup()\n> food.goto(0,\
          \ 100)                   # Positioning food initially above the screen\n\
          > \n> # Score board\n> pen = turtle.Turtle()\n> pen.speed(0)\n> pen.shape(\"\
          square\")\n> pen.color(\"white\")\n> pen.penup()\n> pen.hideturtle()\n>\
          \ pen.goto(0, 260)                    # Placing scoreboard below the screen\n\
          > pen.write(\"Score : 0 High Score : 0\", align=\"center\", font=(\"Courier\"\
          , 24, \"normal\"))\n> \n> def go_up():\n>     if head.direction != \"down\"\
          :   # If we are not currently facing downwards then change heading towards\
          \ upward\n>         head.direction = \"up\"\n> \n> def go_down():\n>   \
          \  if head.direction != \"up\":      # Same logic applies here but this\
          \ time checking against opposite direction\n>         head.direction = \"\
          down\"\n> \n> def go_left():\n>     if head.direction != \"right\":\n> \
          \        head.direction = \"left\"\n> \n> def go_right():\n>     if head.direction\
          \ != \"left\":\n>         head.direction = \"right\"\n> \n> def move():\n\
          >     if head.direction == \"up\":       # Movement based on current direction\
          \ faced\n>         y = head.ycor()\n>         head.sety(y + 20)\n> \n> \
          \    elif head.direction == \"down\":\n>         y = head.ycor()\n>    \
          \     head.sety(y - 20)\n> \n>     elif head.direction == \"left\":\n> \
          \        x = head.xcor()\n>         head.setx(x - 20)\n> \n>     else: \
          \                            # This means that direction must have been\
          \ right so increment X coordinate\n>         x = head.xcor()\n>        \
          \ head.setx(x + 20)\n> \n> # Keyboard bindings\n> wn.listen()          \
          \                # Listen for keyboard input from player\n> wn.onkeypress(go_up,\
          \ \"w\")           # When 'W' key is pressed call go_up method\n> wn.onkeypress(go_down,\
          \ \"s\")          # When 'S' key is pressed call go_down method\n> wn.onkeypress(go_left,\
          \ \"a\")          # When 'A' key is pressed call go_left method\n> wn.onkeypress(go_right,\
          \ \"d\")         # When 'D' key is pressed call go_right method\n> \n> while\
          \ True:                           # Main loop which runs until break statement\
          \ encountered or error occurs\n>     wn.update()                       #\
          \ Update the screen everytime loop iterates\n> \n>     # Check collision\
          \ between head & body segments\n>     for segment in segments:\n>      \
          \   if segment.distance(head) < 20:\n>             time.sleep(1)\n>    \
          \         head.goto(0, 0)\n>             head.direction = \"stop\"\n> \n\
          >             # Hide all segments before resetting them\n>             for\
          \ seg in segments:\n>                 seg.goto(1000, 1000)\n> \n>      \
          \       # Clear list of segments\n>             segments = []\n> \n>   \
          \          # Reset score\n>             score = 0\n> \n>             pen.clear()\n\
          >             pen.write(\"Score : {} High Score : {}\".format(score, high_score),\
          \ align=\"center\", font=(\"Courier\", 24, \"normal\"))\n> \n>     # Check\
          \ for boundary collisions\n>     if head.xcor() > 290 or head.xcor() < -290\
          \ or head.ycor() > 290 or head.ycor() < -290:\n>         time.sleep(1)\n\
          >         head.goto(0, 0)\n>         head.direction = \"stop\"\n> \n>  \
          \       # Hide all segments before resetting them\n>         for seg in\
          \ segments:\n>             seg.goto(1000, 1000)\n> \n>         # Clear list\
          \ of segments\n>         segments = []\n> \n>         # Reset score\n> \
          \        score = 0\n> \n>         pen.clear()\n>         pen.write(\"Score\
          \ : {} High Score : {}\".format(score, high_score), align=\"center\", font=(\"\
          Courier\", 24, \"normal\"))\n> \n>     # Check for eating food\n>     if\
          \ head.distance(food) < 20:\n>         # Move food to new location randomly\
          \ within boundaries\n>         x = random.randint(-280, 280)\n>        \
          \ y = random.randint(-280, 280)\n>         food.goto(x, y)\n> \n>      \
          \   # Add a new segment\n>         new_segment = turtle.Turtle()\n>    \
          \     new_segment.speed(0)\n>         new_segment.shape(\"square\")\n> \
          \        new_segment.color(\"grey\")\n>         new_segment.penup()\n> \
          \        segments.append(new_segment)\n> \n>         delay -= 0.001\n> \n\
          >         # Increase score\n>         score += 10\n> \n>         if score\
          \ > high_score:\n>             high_score = score\n> \n>         pen.clear()\n\
          >         pen.write(\"Score : {} High Score : {}\".format(score, high_score),\
          \ align=\"center\", font=(\"Courier\", 24, \"normal\"))\n> \n>     # Move\
          \ end segments first in reverse order\n>     for index in range(len(segments)-1,\
          \ 0, -1):\n>         x = segments[index-1].xcor()\n>         y = segments[index-1].ycor()\n\
          >         segments[index].goto(x, y)\n> \n>     # Move segment zero to where\
          \ the head was\n>     if len(segments) > 0:\n>         x = head.xcor()\n\
          >         y = head.ycor()\n>         segments[0].goto(x, y)\n> \n>     move()\n\
          > \n>     # Delay after each iteration\n>     time.sleep(delay)\n> \n> turtle.done()\n\
          > ```\n\nHow did you inference the model (did you write a python code? Or\
          \ did you use the various model loaders?)what platform are you on and what\
          \ are the minimum requirements you think it needs to run as in GPU(vram)/cpu(cores)/ram_size"
        updatedAt: '2023-12-12T12:53:40.919Z'
      numEdits: 0
      reactions: []
    id: 657857d49c5c26f96cff19c2
    type: comment
  author: ramsaipv
  content: "> OMG this model is amazing look at this code its perfect!!! It wrote\
    \ the games of snake perfectly first try. Its as good as gpt 3.5 maybe better\
    \ at coding!!!\n> \n> This is the verison i used \n> TheBloke/Magicoder-S-DS-6.7B-GPTQ\n\
    > gptq-8bit--1g-actorder_True\n> \n> Here is the code the model wrote, try running\
    \ it yourself its flawless, and it wrote it the first time, no need to fix anything,:\n\
    > \n> ```\n> import turtle\n> import time\n> import random\n> \n> delay = 0.1\n\
    > score = 0\n> high_score = 0\n> \n> # Set up screen\n> wn = turtle.Screen()\n\
    > wn.title(\"Snake by @TokyoEdTech\")  # Change title as per your preference\n\
    > wn.bgcolor(\"green\")                # Change background color if needed\n>\
    \ wn.setup(width=600, height=600)     # Size of window\n> wn.tracer(0)       \
    \                # Turn off automatic animation on screen updates\n> \n> # Snake\
    \ head\n> head = turtle.Turtle()\n> head.speed(0)                      # Animation\
    \ speed set to max possible speed (fastest)\n> head.shape(\"square\")        \
    \       # Shape of our object will be square\n> head.color(\"black\")        \
    \         # Color of our object will be black\n> head.penup()                \
    \        # Penup function prevents drawing line while moving\n> head.goto(0, 0)\
    \                     # Initial position of snake at center of screen\n> head.direction\
    \ = \"stop\"            # Default direction of movement when no key pressed\n\
    > \n> segments = []\n> \n> # Food\n> food = turtle.Turtle()\n> food.speed(0)\n\
    > food.shape(\"circle\")              # Circular shape food item\n> food.color(\"\
    red\")                  # Red colour for food\n> food.penup()\n> food.goto(0,\
    \ 100)                   # Positioning food initially above the screen\n> \n>\
    \ # Score board\n> pen = turtle.Turtle()\n> pen.speed(0)\n> pen.shape(\"square\"\
    )\n> pen.color(\"white\")\n> pen.penup()\n> pen.hideturtle()\n> pen.goto(0, 260)\
    \                    # Placing scoreboard below the screen\n> pen.write(\"Score\
    \ : 0 High Score : 0\", align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\
    > \n> def go_up():\n>     if head.direction != \"down\":   # If we are not currently\
    \ facing downwards then change heading towards upward\n>         head.direction\
    \ = \"up\"\n> \n> def go_down():\n>     if head.direction != \"up\":      # Same\
    \ logic applies here but this time checking against opposite direction\n>    \
    \     head.direction = \"down\"\n> \n> def go_left():\n>     if head.direction\
    \ != \"right\":\n>         head.direction = \"left\"\n> \n> def go_right():\n\
    >     if head.direction != \"left\":\n>         head.direction = \"right\"\n>\
    \ \n> def move():\n>     if head.direction == \"up\":       # Movement based on\
    \ current direction faced\n>         y = head.ycor()\n>         head.sety(y +\
    \ 20)\n> \n>     elif head.direction == \"down\":\n>         y = head.ycor()\n\
    >         head.sety(y - 20)\n> \n>     elif head.direction == \"left\":\n>   \
    \      x = head.xcor()\n>         head.setx(x - 20)\n> \n>     else:         \
    \                    # This means that direction must have been right so increment\
    \ X coordinate\n>         x = head.xcor()\n>         head.setx(x + 20)\n> \n>\
    \ # Keyboard bindings\n> wn.listen()                          # Listen for keyboard\
    \ input from player\n> wn.onkeypress(go_up, \"w\")           # When 'W' key is\
    \ pressed call go_up method\n> wn.onkeypress(go_down, \"s\")          # When 'S'\
    \ key is pressed call go_down method\n> wn.onkeypress(go_left, \"a\")        \
    \  # When 'A' key is pressed call go_left method\n> wn.onkeypress(go_right, \"\
    d\")         # When 'D' key is pressed call go_right method\n> \n> while True:\
    \                           # Main loop which runs until break statement encountered\
    \ or error occurs\n>     wn.update()                       # Update the screen\
    \ everytime loop iterates\n> \n>     # Check collision between head & body segments\n\
    >     for segment in segments:\n>         if segment.distance(head) < 20:\n> \
    \            time.sleep(1)\n>             head.goto(0, 0)\n>             head.direction\
    \ = \"stop\"\n> \n>             # Hide all segments before resetting them\n> \
    \            for seg in segments:\n>                 seg.goto(1000, 1000)\n> \n\
    >             # Clear list of segments\n>             segments = []\n> \n>   \
    \          # Reset score\n>             score = 0\n> \n>             pen.clear()\n\
    >             pen.write(\"Score : {} High Score : {}\".format(score, high_score),\
    \ align=\"center\", font=(\"Courier\", 24, \"normal\"))\n> \n>     # Check for\
    \ boundary collisions\n>     if head.xcor() > 290 or head.xcor() < -290 or head.ycor()\
    \ > 290 or head.ycor() < -290:\n>         time.sleep(1)\n>         head.goto(0,\
    \ 0)\n>         head.direction = \"stop\"\n> \n>         # Hide all segments before\
    \ resetting them\n>         for seg in segments:\n>             seg.goto(1000,\
    \ 1000)\n> \n>         # Clear list of segments\n>         segments = []\n> \n\
    >         # Reset score\n>         score = 0\n> \n>         pen.clear()\n>   \
    \      pen.write(\"Score : {} High Score : {}\".format(score, high_score), align=\"\
    center\", font=(\"Courier\", 24, \"normal\"))\n> \n>     # Check for eating food\n\
    >     if head.distance(food) < 20:\n>         # Move food to new location randomly\
    \ within boundaries\n>         x = random.randint(-280, 280)\n>         y = random.randint(-280,\
    \ 280)\n>         food.goto(x, y)\n> \n>         # Add a new segment\n>      \
    \   new_segment = turtle.Turtle()\n>         new_segment.speed(0)\n>         new_segment.shape(\"\
    square\")\n>         new_segment.color(\"grey\")\n>         new_segment.penup()\n\
    >         segments.append(new_segment)\n> \n>         delay -= 0.001\n> \n>  \
    \       # Increase score\n>         score += 10\n> \n>         if score > high_score:\n\
    >             high_score = score\n> \n>         pen.clear()\n>         pen.write(\"\
    Score : {} High Score : {}\".format(score, high_score), align=\"center\", font=(\"\
    Courier\", 24, \"normal\"))\n> \n>     # Move end segments first in reverse order\n\
    >     for index in range(len(segments)-1, 0, -1):\n>         x = segments[index-1].xcor()\n\
    >         y = segments[index-1].ycor()\n>         segments[index].goto(x, y)\n\
    > \n>     # Move segment zero to where the head was\n>     if len(segments) >\
    \ 0:\n>         x = head.xcor()\n>         y = head.ycor()\n>         segments[0].goto(x,\
    \ y)\n> \n>     move()\n> \n>     # Delay after each iteration\n>     time.sleep(delay)\n\
    > \n> turtle.done()\n> ```\n\nHow did you inference the model (did you write a\
    \ python code? Or did you use the various model loaders?)what platform are you\
    \ on and what are the minimum requirements you think it needs to run as in GPU(vram)/cpu(cores)/ram_size"
  created_at: 2023-12-12 12:53:40+00:00
  edited: false
  hidden: false
  id: 657857d49c5c26f96cff19c2
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/642cc1c253e76b4c2286c58e/n8h5JKRgaAoYrE36BtHRO.jpeg?w=200&h=200&f=face
      fullname: rombo dawg
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: rombodawg
      type: user
    createdAt: '2023-12-12T21:16:08.000Z'
    data:
      edited: false
      editors:
      - rombodawg
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5494834780693054
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/642cc1c253e76b4c2286c58e/n8h5JKRgaAoYrE36BtHRO.jpeg?w=200&h=200&f=face
          fullname: rombo dawg
          isHf: false
          isPro: false
          name: rombodawg
          type: user
        html: "<p><span data-props=\"{&quot;user&quot;:&quot;ramsaipv&quot;}\" data-target=\"\
          UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\">\n\n<span class=\"\
          inline-block\"><span class=\"contents\"><a href=\"/ramsaipv\">@<span class=\"\
          underline\">ramsaipv</span></a></span>\n\n\t</span></span> I used text generation\
          \ web ui (oobagooba), the simplest way to infrence tbh. and i used the llamacpp\
          \ loader. Which actually runs llamacpp-python if you didnt know</p>\n"
        raw: '@ramsaipv I used text generation web ui (oobagooba), the simplest way
          to infrence tbh. and i used the llamacpp loader. Which actually runs llamacpp-python
          if you didnt know'
        updatedAt: '2023-12-12T21:16:08.103Z'
      numEdits: 0
      reactions: []
    id: 6578cd9817166d821e31037a
    type: comment
  author: rombodawg
  content: '@ramsaipv I used text generation web ui (oobagooba), the simplest way
    to infrence tbh. and i used the llamacpp loader. Which actually runs llamacpp-python
    if you didnt know'
  created_at: 2023-12-12 21:16:08+00:00
  edited: false
  hidden: false
  id: 6578cd9817166d821e31037a
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/642cc1c253e76b4c2286c58e/n8h5JKRgaAoYrE36BtHRO.jpeg?w=200&h=200&f=face
      fullname: rombo dawg
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: rombodawg
      type: user
    createdAt: '2023-12-12T21:16:43.000Z'
    data:
      edited: false
      editors:
      - rombodawg
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9758880138397217
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/642cc1c253e76b4c2286c58e/n8h5JKRgaAoYrE36BtHRO.jpeg?w=200&h=200&f=face
          fullname: rombo dawg
          isHf: false
          isPro: false
          name: rombodawg
          type: user
        html: '<p>Oh and requirements are on the blokes page for vram usage, refer
          to that for each version of the models quantizations</p>

          '
        raw: Oh and requirements are on the blokes page for vram usage, refer to that
          for each version of the models quantizations
        updatedAt: '2023-12-12T21:16:43.782Z'
      numEdits: 0
      reactions: []
    id: 6578cdbb76b6de79781cb625
    type: comment
  author: rombodawg
  content: Oh and requirements are on the blokes page for vram usage, refer to that
    for each version of the models quantizations
  created_at: 2023-12-12 21:16:43+00:00
  edited: false
  hidden: false
  id: 6578cdbb76b6de79781cb625
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/70bfddcf585e2f191ba24f47274c9e94.svg
      fullname: John
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: cmp-nct
      type: user
    createdAt: '2023-12-13T06:03:04.000Z'
    data:
      edited: false
      editors:
      - cmp-nct
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9264832735061646
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/70bfddcf585e2f191ba24f47274c9e94.svg
          fullname: John
          isHf: false
          isPro: false
          name: cmp-nct
          type: user
        html: '<p>It''s almost a 1:1 copy of this: <a rel="nofollow" href="https://www.geeksforgeeks.org/create-a-snake-game-using-turtle-in-python/">https://www.geeksforgeeks.org/create-a-snake-game-using-turtle-in-python/</a></p>

          <p>When testing a coding model you should test it with novel tasks, not
          things it likely has been fine-tuned with intensely.</p>

          '
        raw: 'It''s almost a 1:1 copy of this: https://www.geeksforgeeks.org/create-a-snake-game-using-turtle-in-python/


          When testing a coding model you should test it with novel tasks, not things
          it likely has been fine-tuned with intensely.

          '
        updatedAt: '2023-12-13T06:03:04.843Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\u2764\uFE0F"
        users:
        - rombodawg
    id: 65794918197a6182c372d5e3
    type: comment
  author: cmp-nct
  content: 'It''s almost a 1:1 copy of this: https://www.geeksforgeeks.org/create-a-snake-game-using-turtle-in-python/


    When testing a coding model you should test it with novel tasks, not things it
    likely has been fine-tuned with intensely.

    '
  created_at: 2023-12-13 06:03:04+00:00
  edited: false
  hidden: false
  id: 65794918197a6182c372d5e3
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/642cc1c253e76b4c2286c58e/n8h5JKRgaAoYrE36BtHRO.jpeg?w=200&h=200&f=face
      fullname: rombo dawg
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: rombodawg
      type: user
    createdAt: '2023-12-14T03:56:27.000Z'
    data:
      edited: false
      editors:
      - rombodawg
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5564703345298767
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/642cc1c253e76b4c2286c58e/n8h5JKRgaAoYrE36BtHRO.jpeg?w=200&h=200&f=face
          fullname: rombo dawg
          isHf: false
          isPro: false
          name: rombodawg
          type: user
        html: '<p>Thats great lol</p>

          '
        raw: Thats great lol
        updatedAt: '2023-12-14T03:56:27.475Z'
      numEdits: 0
      reactions: []
    id: 657a7cebf10a984150a5c443
    type: comment
  author: rombodawg
  content: Thats great lol
  created_at: 2023-12-14 03:56:27+00:00
  edited: false
  hidden: false
  id: 657a7cebf10a984150a5c443
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/70bfddcf585e2f191ba24f47274c9e94.svg
      fullname: John
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: cmp-nct
      type: user
    createdAt: '2023-12-14T18:15:41.000Z'
    data:
      edited: false
      editors:
      - cmp-nct
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9989661574363708
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/70bfddcf585e2f191ba24f47274c9e94.svg
          fullname: John
          isHf: false
          isPro: false
          name: cmp-nct
          type: user
        html: '<p>I tried</p>

          '
        raw: I tried
        updatedAt: '2023-12-14T18:15:41.347Z'
      numEdits: 0
      reactions: []
    id: 657b464d64dab2f4c9e33bab
    type: comment
  author: cmp-nct
  content: I tried
  created_at: 2023-12-14 18:15:41+00:00
  edited: false
  hidden: false
  id: 657b464d64dab2f4c9e33bab
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
      fullname: Ziggy Stardust
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nurb432
      type: user
    createdAt: '2023-12-14T19:37:05.000Z'
    data:
      edited: false
      editors:
      - Nurb432
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9968408942222595
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
          fullname: Ziggy Stardust
          isHf: false
          isPro: false
          name: Nurb432
          type: user
        html: '<p>I have been testing, and while its faster, its not doing as well
          as wizard coder for me.   It even came back with functions in libraries
          that were mis-spelled.  Sure, easily fixable as they called the function
          correctly, but really?</p>

          '
        raw: I have been testing, and while its faster, its not doing as well as wizard
          coder for me.   It even came back with functions in libraries that were
          mis-spelled.  Sure, easily fixable as they called the function correctly,
          but really?
        updatedAt: '2023-12-14T19:37:05.273Z'
      numEdits: 0
      reactions: []
    id: 657b59618c3aee70545fccd5
    type: comment
  author: Nurb432
  content: I have been testing, and while its faster, its not doing as well as wizard
    coder for me.   It even came back with functions in libraries that were mis-spelled.  Sure,
    easily fixable as they called the function correctly, but really?
  created_at: 2023-12-14 19:37:05+00:00
  edited: false
  hidden: false
  id: 657b59618c3aee70545fccd5
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/9e2ad426d26aa90cd8cce28896ec248a.svg
      fullname: sairampv
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ramsaipv
      type: user
    createdAt: '2023-12-19T02:22:30.000Z'
    data:
      edited: false
      editors:
      - ramsaipv
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9894611835479736
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/9e2ad426d26aa90cd8cce28896ec248a.svg
          fullname: sairampv
          isHf: false
          isPro: false
          name: ramsaipv
          type: user
        html: '<blockquote>

          <p>I have been testing, and while its faster, its not doing as well as wizard
          coder for me.   It even came back with functions in libraries that were
          mis-spelled.  Sure, easily fixable as they called the function correctly,
          but really?</p>

          </blockquote>

          <p>I think you should try the much better and faster (magicoder s-cl) which
          worked great for me I downloaded my model from LoneStriker (just needed
          to create a instruct template for it to work)</p>

          '
        raw: '> I have been testing, and while its faster, its not doing as well as
          wizard coder for me.   It even came back with functions in libraries that
          were mis-spelled.  Sure, easily fixable as they called the function correctly,
          but really?


          I think you should try the much better and faster (magicoder s-cl) which
          worked great for me I downloaded my model from LoneStriker (just needed
          to create a instruct template for it to work)'
        updatedAt: '2023-12-19T02:22:30.427Z'
      numEdits: 0
      reactions: []
    id: 6580fe66cc33cac1934c913f
    type: comment
  author: ramsaipv
  content: '> I have been testing, and while its faster, its not doing as well as
    wizard coder for me.   It even came back with functions in libraries that were
    mis-spelled.  Sure, easily fixable as they called the function correctly, but
    really?


    I think you should try the much better and faster (magicoder s-cl) which worked
    great for me I downloaded my model from LoneStriker (just needed to create a instruct
    template for it to work)'
  created_at: 2023-12-19 02:22:30+00:00
  edited: false
  hidden: false
  id: 6580fe66cc33cac1934c913f
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
      fullname: Ziggy Stardust
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nurb432
      type: user
    createdAt: '2023-12-19T12:01:11.000Z'
    data:
      edited: false
      editors:
      - Nurb432
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.979615330696106
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
          fullname: Ziggy Stardust
          isHf: false
          isPro: false
          name: Nurb432
          type: user
        html: '<blockquote>

          <p>I think you should try the much better and faster (magicoder s-cl) which
          worked great for me I downloaded my model from LoneStriker (just needed
          to create a instruct template for it to work)</p>

          </blockquote>

          <p>I thought i read ''d'' was the best of the sets as far as quality output,
          but i can try that this weekend too. nothing to lose.</p>

          '
        raw: " \n> I think you should try the much better and faster (magicoder s-cl)\
          \ which worked great for me I downloaded my model from LoneStriker (just\
          \ needed to create a instruct template for it to work)\n\nI thought i read\
          \ 'd' was the best of the sets as far as quality output, but i can try that\
          \ this weekend too. nothing to lose."
        updatedAt: '2023-12-19T12:01:11.634Z'
      numEdits: 0
      reactions: []
    id: 658186078ab7e9a6164aab1f
    type: comment
  author: Nurb432
  content: " \n> I think you should try the much better and faster (magicoder s-cl)\
    \ which worked great for me I downloaded my model from LoneStriker (just needed\
    \ to create a instruct template for it to work)\n\nI thought i read 'd' was the\
    \ best of the sets as far as quality output, but i can try that this weekend too.\
    \ nothing to lose."
  created_at: 2023-12-19 12:01:11+00:00
  edited: false
  hidden: false
  id: 658186078ab7e9a6164aab1f
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: ise-uiuc/Magicoder-S-DS-6.7B
repo_type: model
status: open
target_branch: null
title: AMAZING CODING MODEL!!!
