!!python/object:huggingface_hub.community.DiscussionWithDetails
author: nagolinc
conflicting_files: null
created_at: 2023-09-19 23:01:45+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1653395218540-noauth.png?w=200&h=200&f=face
      fullname: logan zoellner
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: nagolinc
      type: user
    createdAt: '2023-09-20T00:01:45.000Z'
    data:
      edited: false
      editors:
      - nagolinc
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5152776837348938
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1653395218540-noauth.png?w=200&h=200&f=face
          fullname: logan zoellner
          isHf: false
          isPro: false
          name: nagolinc
          type: user
        html: "<p>How do I do img2img with this model?</p>\n<p>I naively tried this,\
          \ but it didn't work, obviously.</p>\n<pre><code>from diffusers import StableDiffusionImg2ImgPipeline\n\
          \n\nimg2img = StableDiffusionImg2ImgPipeline.from_pretrained('Deci/DeciDiffusion-v1-0',\n\
          \                                                   custom_pipeline='Deci/DeciDiffusion-v1-0',\n\
          \                                                   torch_dtype=torch.float16\n\
          \                                                   )\n\nimg2img.unet =\
          \ img2img.unet.from_pretrained('Deci/DeciDiffusion-v1-0',\n            \
          \                                  subfolder='flexible_unet',\n        \
          \                                      torch_dtype=torch.float16)\n\n# Move\
          \ pipeline to device\nimg2img = img2img.to('cuda')\n</code></pre>\n"
        raw: "How do I do img2img with this model?\r\n\r\nI naively tried this, but\
          \ it didn't work, obviously.\r\n\r\n```\r\nfrom diffusers import StableDiffusionImg2ImgPipeline\r\
          \n\r\n\r\nimg2img = StableDiffusionImg2ImgPipeline.from_pretrained('Deci/DeciDiffusion-v1-0',\r\
          \n                                                   custom_pipeline='Deci/DeciDiffusion-v1-0',\r\
          \n                                                   torch_dtype=torch.float16\r\
          \n                                                   )\r\n\r\nimg2img.unet\
          \ = img2img.unet.from_pretrained('Deci/DeciDiffusion-v1-0',\r\n        \
          \                                      subfolder='flexible_unet',\r\n  \
          \                                            torch_dtype=torch.float16)\r\
          \n\r\n# Move pipeline to device\r\nimg2img = img2img.to('cuda')\r\n```"
        updatedAt: '2023-09-20T00:01:45.160Z'
      numEdits: 0
      reactions: []
    id: 650a366911afda55cae99b15
    type: comment
  author: nagolinc
  content: "How do I do img2img with this model?\r\n\r\nI naively tried this, but\
    \ it didn't work, obviously.\r\n\r\n```\r\nfrom diffusers import StableDiffusionImg2ImgPipeline\r\
    \n\r\n\r\nimg2img = StableDiffusionImg2ImgPipeline.from_pretrained('Deci/DeciDiffusion-v1-0',\r\
    \n                                                   custom_pipeline='Deci/DeciDiffusion-v1-0',\r\
    \n                                                   torch_dtype=torch.float16\r\
    \n                                                   )\r\n\r\nimg2img.unet = img2img.unet.from_pretrained('Deci/DeciDiffusion-v1-0',\r\
    \n                                              subfolder='flexible_unet',\r\n\
    \                                              torch_dtype=torch.float16)\r\n\r\
    \n# Move pipeline to device\r\nimg2img = img2img.to('cuda')\r\n```"
  created_at: 2023-09-19 23:01:45+00:00
  edited: false
  hidden: false
  id: 650a366911afda55cae99b15
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1653395218540-noauth.png?w=200&h=200&f=face
      fullname: logan zoellner
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: nagolinc
      type: user
    createdAt: '2023-09-20T00:15:40.000Z'
    data:
      edited: false
      editors:
      - nagolinc
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.3217005729675293
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1653395218540-noauth.png?w=200&h=200&f=face
          fullname: logan zoellner
          isHf: false
          isPro: false
          name: nagolinc
          type: user
        html: "<p>Ah, turns out I can just edit DeciDiffusionPipeline</p>\n<pre><code>class\
          \ DeciDiffusionPipeline_img2img(StableDiffusionImg2ImgPipeline):\n    deci_default_number_of_iterations\
          \ = 30\n    deci_default_guidance_rescale = 0.7\n\n    def __init__(self,\n\
          \                 vae: AutoencoderKL,\n                 text_encoder: CLIPTextModel,\n\
          \                 tokenizer: CLIPTokenizer,\n                 unet: UNet2DConditionModel,\n\
          \                 scheduler: KarrasDiffusionSchedulers,\n              \
          \   safety_checker: StableDiffusionSafetyChecker,\n                 feature_extractor:\
          \ CLIPImageProcessor,\n                 requires_safety_checker: bool =\
          \ True\n                 ):\n        # Replace UNet with Deci`s unet\n \
          \       del unet\n        unet = FlexibleUNet2DConditionModel()\n\n    \
          \    super().__init__(vae=vae,\n                         text_encoder=text_encoder,\n\
          \                         tokenizer=tokenizer,\n                       \
          \  unet=unet,\n                         scheduler=scheduler,\n         \
          \                safety_checker=safety_checker,\n                      \
          \   feature_extractor=feature_extractor,\n                         requires_safety_checker=requires_safety_checker\n\
          \                         )\n\n        self.register_modules(vae=vae,\n\
          \                              text_encoder=text_encoder,\n            \
          \                  tokenizer=tokenizer,\n                              unet=unet,\n\
          \                              scheduler=scheduler,\n                  \
          \            safety_checker=safety_checker,\n                          \
          \    feature_extractor=feature_extractor)\n\n    def __call__(self, *args,\
          \ **kwargs):\n        # Set up default training parameters (if not given\
          \ by user specifically)\n        #if \"guidance_rescale\" not in kwargs:\n\
          \        #    kwargs.update({'guidance_rescale': self.deci_default_guidance_rescale})\n\
          \        if \"num_inference_steps\" not in kwargs:\n            kwargs.update({'num_inference_steps':\
          \ self.deci_default_number_of_iterations})\n        return super().__call__(*args,\
          \ **kwargs)\n</code></pre>\n"
        raw: "Ah, turns out I can just edit DeciDiffusionPipeline\n\n```\nclass DeciDiffusionPipeline_img2img(StableDiffusionImg2ImgPipeline):\n\
          \    deci_default_number_of_iterations = 30\n    deci_default_guidance_rescale\
          \ = 0.7\n\n    def __init__(self,\n                 vae: AutoencoderKL,\n\
          \                 text_encoder: CLIPTextModel,\n                 tokenizer:\
          \ CLIPTokenizer,\n                 unet: UNet2DConditionModel,\n       \
          \          scheduler: KarrasDiffusionSchedulers,\n                 safety_checker:\
          \ StableDiffusionSafetyChecker,\n                 feature_extractor: CLIPImageProcessor,\n\
          \                 requires_safety_checker: bool = True\n               \
          \  ):\n        # Replace UNet with Deci`s unet\n        del unet\n     \
          \   unet = FlexibleUNet2DConditionModel()\n\n        super().__init__(vae=vae,\n\
          \                         text_encoder=text_encoder,\n                 \
          \        tokenizer=tokenizer,\n                         unet=unet,\n   \
          \                      scheduler=scheduler,\n                         safety_checker=safety_checker,\n\
          \                         feature_extractor=feature_extractor,\n       \
          \                  requires_safety_checker=requires_safety_checker\n   \
          \                      )\n\n        self.register_modules(vae=vae,\n   \
          \                           text_encoder=text_encoder,\n               \
          \               tokenizer=tokenizer,\n                              unet=unet,\n\
          \                              scheduler=scheduler,\n                  \
          \            safety_checker=safety_checker,\n                          \
          \    feature_extractor=feature_extractor)\n\n    def __call__(self, *args,\
          \ **kwargs):\n        # Set up default training parameters (if not given\
          \ by user specifically)\n        #if \"guidance_rescale\" not in kwargs:\n\
          \        #    kwargs.update({'guidance_rescale': self.deci_default_guidance_rescale})\n\
          \        if \"num_inference_steps\" not in kwargs:\n            kwargs.update({'num_inference_steps':\
          \ self.deci_default_number_of_iterations})\n        return super().__call__(*args,\
          \ **kwargs)\n\n```"
        updatedAt: '2023-09-20T00:15:40.651Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\u2764\uFE0F"
        users:
        - harpreetsahota
      relatedEventId: 650a39acc9aa376f76da5fc8
    id: 650a39acc9aa376f76da5fc5
    type: comment
  author: nagolinc
  content: "Ah, turns out I can just edit DeciDiffusionPipeline\n\n```\nclass DeciDiffusionPipeline_img2img(StableDiffusionImg2ImgPipeline):\n\
    \    deci_default_number_of_iterations = 30\n    deci_default_guidance_rescale\
    \ = 0.7\n\n    def __init__(self,\n                 vae: AutoencoderKL,\n    \
    \             text_encoder: CLIPTextModel,\n                 tokenizer: CLIPTokenizer,\n\
    \                 unet: UNet2DConditionModel,\n                 scheduler: KarrasDiffusionSchedulers,\n\
    \                 safety_checker: StableDiffusionSafetyChecker,\n            \
    \     feature_extractor: CLIPImageProcessor,\n                 requires_safety_checker:\
    \ bool = True\n                 ):\n        # Replace UNet with Deci`s unet\n\
    \        del unet\n        unet = FlexibleUNet2DConditionModel()\n\n        super().__init__(vae=vae,\n\
    \                         text_encoder=text_encoder,\n                       \
    \  tokenizer=tokenizer,\n                         unet=unet,\n               \
    \          scheduler=scheduler,\n                         safety_checker=safety_checker,\n\
    \                         feature_extractor=feature_extractor,\n             \
    \            requires_safety_checker=requires_safety_checker\n               \
    \          )\n\n        self.register_modules(vae=vae,\n                     \
    \         text_encoder=text_encoder,\n                              tokenizer=tokenizer,\n\
    \                              unet=unet,\n                              scheduler=scheduler,\n\
    \                              safety_checker=safety_checker,\n              \
    \                feature_extractor=feature_extractor)\n\n    def __call__(self,\
    \ *args, **kwargs):\n        # Set up default training parameters (if not given\
    \ by user specifically)\n        #if \"guidance_rescale\" not in kwargs:\n   \
    \     #    kwargs.update({'guidance_rescale': self.deci_default_guidance_rescale})\n\
    \        if \"num_inference_steps\" not in kwargs:\n            kwargs.update({'num_inference_steps':\
    \ self.deci_default_number_of_iterations})\n        return super().__call__(*args,\
    \ **kwargs)\n\n```"
  created_at: 2023-09-19 23:15:40+00:00
  edited: false
  hidden: false
  id: 650a39acc9aa376f76da5fc5
  type: comment
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1653395218540-noauth.png?w=200&h=200&f=face
      fullname: logan zoellner
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: nagolinc
      type: user
    createdAt: '2023-09-20T00:15:40.000Z'
    data:
      status: closed
    id: 650a39acc9aa376f76da5fc8
    type: status-change
  author: nagolinc
  created_at: 2023-09-19 23:15:40+00:00
  id: 650a39acc9aa376f76da5fc8
  new_status: closed
  type: status-change
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/630904f2c038bf42d56d9d11/TrTU67BkrwoLYnwWgjdCE.jpeg?w=200&h=200&f=face
      fullname: Harpreet Sahota
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: harpreetsahota
      type: user
    createdAt: '2023-09-20T16:10:32.000Z'
    data:
      edited: false
      editors:
      - harpreetsahota
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.870790958404541
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/630904f2c038bf42d56d9d11/TrTU67BkrwoLYnwWgjdCE.jpeg?w=200&h=200&f=face
          fullname: Harpreet Sahota
          isHf: false
          isPro: false
          name: harpreetsahota
          type: user
        html: "<p><span data-props=\"{&quot;user&quot;:&quot;nagolinc&quot;}\" data-target=\"\
          UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\">\n\n<span class=\"\
          inline-block\"><span class=\"contents\"><a href=\"/nagolinc\">@<span class=\"\
          underline\">nagolinc</span></a></span>\n\n\t</span></span> - I will give\
          \ your implementation a try! Thank you for sharing it</p>\n"
        raw: '@nagolinc - I will give your implementation a try! Thank you for sharing
          it'
        updatedAt: '2023-09-20T16:10:32.390Z'
      numEdits: 0
      reactions: []
    id: 650b19784e6a363198bbf567
    type: comment
  author: harpreetsahota
  content: '@nagolinc - I will give your implementation a try! Thank you for sharing
    it'
  created_at: 2023-09-20 15:10:32+00:00
  edited: false
  hidden: false
  id: 650b19784e6a363198bbf567
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: Deci/DeciDiffusion-v1-0
repo_type: model
status: closed
target_branch: null
title: img2img?
