!!python/object:huggingface_hub.community.DiscussionWithDetails
author: mirek190
conflicting_files: null
created_at: 2024-01-06 12:35:28+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
      fullname: ko
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: mirek190
      type: user
    createdAt: '2024-01-06T12:35:28.000Z'
    data:
      edited: true
      editors:
      - mirek190
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9309659004211426
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
          fullname: ko
          isHf: false
          isPro: false
          name: mirek190
          type: user
        html: "<p>That is the most capable opensource LLM for coding I ever seen...\
          \ It has coding level of GPT-4   ... is incredible.<br>I easily made advanced\
          \ applications by this llm .... never done that before so easily.<br>For\
          \ instance  Phind-CodeLlama-34B-v2 is far less capable comparing to  WizardCoder-33B-V1.1.\
          \ That is big step forward now.</p>\n<p>Added from my posts:</p>\n<p>for\
          \ me not making errors what I am surprised.<br>I'am using newest llamacpp\
          \ and model version q4k_m  ( old q4 is much worse )  </p>\n<p>My code to\
          \ run llamcpp</p>\n<pre><code>build\\bin\\main.exe --model models\\new3\\\
          wizardcoder-33b-v1.1.Q4_K_M.gguf --mlock --color --threads 16 --keep -1\
          \ --batch_size 512 --n_predict -1 --repeat_penalty 1.1 --ctx_size 0 --interactive\
          \ --instruct --reverse-prompt \"&lt;|im_end|&gt;\" -ngl 58 --simple-io \
          \ --in-prefix \" ### Instruction: \" --in-suffix \" ### Response: \" -p\
          \ \"Below is an instruction that describes a task. Write a response that\
          \ appropriately completes the request. \"\n</code></pre>\n<p>Look on that\
          \ code :</p>\n<blockquote>\n<p>Can you make A snake game in python?</p>\n\
          </blockquote>\n<ul>\n<li>first try.  Look how long code is and was generated\
          \ without any errors also game looks ..decent. </li>\n<li>Even has working\
          \ score system.</li>\n</ul>\n<p><a rel=\"nofollow\" href=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/Bd784ycfp_76T0SJh-NYe.png\"\
          ><img alt=\"Screenshot 2024-01-06 164614.png\" src=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/Bd784ycfp_76T0SJh-NYe.png\"\
          ></a></p>\n<pre><code>import turtle\nimport time\nimport random\n\ndelay\
          \ = 0.1\nscore = 0\nhigh_score = 0\n\n# Set up the screen\nwn = turtle.Screen()\n\
          wn.title(\"Snake Game\")\nwn.bgcolor(\"black\")\nwn.setup(width=600, height=600)\n\
          wn.tracer(0)  # Turns off the screen updates\n\n# Snake head\nhead = turtle.Turtle()\n\
          head.speed(0)\nhead.shape(\"square\")\nhead.color(\"white\")\nhead.penup()\n\
          head.goto(0, 0)\nhead.direction = \"stop\"\n\n# Snake food\nfood = turtle.Turtle()\n\
          food.speed(0)\nfood.shape(\"circle\")\nfood.color(\"red\")\nfood.penup()\n\
          food.goto(random.randint(-290, 290), random.randint(-290, 290))\n\nsegments\
          \ = []\n\n# Pen\npen = turtle.Turtle()\npen.speed(0)\npen.shape(\"square\"\
          )\npen.color(\"white\")\npen.penup()\npen.hideturtle()\npen.goto(0, 260)\n\
          pen.write(\"Score: 0  High Score: 0\", align=\"center\", font=(\"Courier\"\
          , 24, \"normal\"))\n\n# Functions\ndef go_up():\n    if head.direction !=\
          \ \"down\":\n        head.direction = \"up\"\n\ndef go_down():\n    if head.direction\
          \ != \"up\":\n        head.direction = \"down\"\n\ndef go_left():\n    if\
          \ head.direction != \"right\":\n        head.direction = \"left\"\n\ndef\
          \ go_right():\n    if head.direction != \"left\":\n        head.direction\
          \ = \"right\"\n\ndef move():\n    if head.direction == \"up\":\n       \
          \ y = head.ycor()\n        head.sety(y + 20)\n\n    if head.direction ==\
          \ \"down\":\n        y = head.ycor()\n        head.sety(y - 20)\n\n    if\
          \ head.direction == \"left\":\n        x = head.xcor()\n        head.setx(x\
          \ - 20)\n\n    if head.direction == \"right\":\n        x = head.xcor()\n\
          \        head.setx(x + 20)\n\n# Keyboard bindings\nwn.listen()\nwn.onkeypress(go_up,\
          \ \"Up\")\nwn.onkeypress(go_down, \"Down\")\nwn.onkeypress(go_left, \"Left\"\
          )\nwn.onkeypress(go_right, \"Right\")\n\n# Main game loop\nwhile True:\n\
          \    wn.update()\n\n    # Check for a collision with the border\n    if\
          \ head.xcor()&gt;290 or head.xcor()&lt;-290 or head.ycor()&gt;290 or head.ycor()&lt;-290:\n\
          \        time.sleep(1)\n        head.goto(0,0)\n        head.direction =\
          \ \"stop\"\n\n        # Hide the segments\n        for segment in segments:\n\
          \            segment.goto(1000, 1000)\n\n        # Clear the segments list\n\
          \        segments.clear()\n\n        score = 0\n\n    # Check for a collision\
          \ with the food\n    if head.distance(food) &lt; 20:\n        x = random.randint(-290,\
          \ 290)\n        y = random.randint(-290, 290)\n        food.goto(x,y)\n\n\
          \        # Add a segment\n        new_segment = turtle.Turtle()\n      \
          \  new_segment.speed(0)\n        new_segment.shape(\"square\")\n       \
          \ new_segment.color(\"grey\")\n        new_segment.penup()\n        segments.append(new_segment)\n\
          \n        # Shorten the delay\n        delay -= 0.001\n\n        score +=\
          \ 10\n        if score &gt; high_score:\n            high_score = score\n\
          \n        pen.clear()\n        pen.write(\"Score: {}  High Score: {}\".format(score,\
          \ high_score), align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          \    # Move the end segments first in reverse order\n    for index in range(len(segments)-1,\
          \ 0, -1):\n        x = segments[index-1].xcor()\n        y = segments[index-1].ycor()\n\
          \        segments[index].goto(x, y)\n\n    # Move segment 0 to where the\
          \ head is\n    if len(segments) &gt; 0:\n        x = head.xcor()\n     \
          \   y = head.ycor()\n        segments[0].goto(x, y)\n\n    move()\n\n  \
          \  time.sleep(delay)\n\nwn.mainloop()\n</code></pre>\n<ul>\n<li>Second try\
          \ to make snake game gave even better results , welcome screen , end screen\
          \ etc .... </li>\n<li>look how long the code is and works without any corrections</li>\n\
          </ul>\n<p><a rel=\"nofollow\" href=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/kYkTtmgt8No20YJIVUzjs.png\"\
          ><img alt=\"Screenshot 2024-01-06 173023.png\" src=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/kYkTtmgt8No20YJIVUzjs.png\"\
          ></a></p>\n<p><a rel=\"nofollow\" href=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/P2no98K6Hz4SNcOlsZ19l.png\"\
          ><img alt=\"Screenshot 2024-01-06 172757.png\" src=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/P2no98K6Hz4SNcOlsZ19l.png\"\
          ></a></p>\n<pre><code>import pygame, sys, time, random\nfrom pygame.locals\
          \ import *\n\n# Constants that will be used in the game\nFPS = 15\nWINDOW_WIDTH\
          \ = 640\nWINDOW_HEIGHT = 480\nCELLSIZE = 20\nassert WINDOW_WIDTH % CELLSIZE\
          \ == 0, \"Window width must be a multiple of cell size.\"\nassert WINDOW_HEIGHT\
          \ % CELLSIZE == 0, \"Window height must be a multiple of cell size.\"\n\
          CELLWIDTH = int(WINDOW_WIDTH / CELLSIZE)\nCELLHEIGHT = int(WINDOW_HEIGHT\
          \ / CELLSIZE)\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0,\
          \ 0)\nGREEN = (0, 255, 0)\nDARKGRAY = (40, 40, 40)\nBGCOLOR = BLACK\n\n\
          UP = 'up'\nDOWN = 'down'\nLEFT = 'left'\nRIGHT = 'right'\n\nHEAD = 0 # syntactic\
          \ sugar: index of the snake's head\n\ndef main():\n    global FPSCLOCK,\
          \ DISPLAYSURF\n    pygame.init()\n    FPSCLOCK = pygame.time.Clock()\n \
          \   DISPLAYSURF = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))\n\
          \    pygame.display.set_caption('Snake')\n\n    showStartScreen()\n    while\
          \ True: # main game loop\n        runGame()\n        showGameOverScreen()\n\
          \ndef runGame():\n    # Game setup\n    snake = [{'x': 5, 'y': 10}, {'x':\
          \ 4, 'y': 10}, {'x': 3, 'y': 10}]\n    direction = RIGHT\n    newDirection\
          \ = direction\n\n    food = getRandomLocation()\n    while True: # single\
          \ game loop\n        for event in pygame.event.get(): # event handling loop\n\
          \            if event.type == QUIT or (event.type == KEYDOWN and event.key\
          \ == K_ESCAPE):\n                terminate()\n            elif event.type\
          \ == KEYDOWN:\n                if event.key == K_LEFT and direction != RIGHT:\n\
          \                    newDirection = LEFT\n                elif event.key\
          \ == K_RIGHT and direction != LEFT:\n                    newDirection =\
          \ RIGHT\n                elif event.key == K_UP and direction != DOWN:\n\
          \                    newDirection = UP\n                elif event.key ==\
          \ K_DOWN and direction != UP:\n                    newDirection = DOWN\n\
          \        if isGameOver(snake):\n            return\n        direction =\
          \ newDirection # only change direction when no QUIT event\n\n        # move\
          \ the snake\n        if direction == UP:\n            newHead = {'x': snake[HEAD]['x'],\
          \ 'y': snake[HEAD]['y'] - 1}\n        elif direction == DOWN:\n        \
          \    newHead = {'x': snake[HEAD]['x'], 'y': snake[HEAD]['y'] + 1}\n    \
          \    elif direction == LEFT:\n            newHead = {'x': snake[HEAD]['x']\
          \ - 1, 'y': snake[HEAD]['y']}\n        elif direction == RIGHT:\n      \
          \      newHead = {'x': snake[HEAD]['x'] + 1, 'y': snake[HEAD]['y']}\n\n\
          \        snake.insert(0, newHead) # insert and del operations are fast at\
          \ the beginning of a list\n\n        if (newHead == food): # have we eaten?\n\
          \            food = getRandomLocation() # spawn new food object\n      \
          \  else: # move snake by removing tail\n            snake.pop()\n\n    \
          \    # Draw the game world on the window\n        DISPLAYSURF.fill(BGCOLOR)\n\
          \        drawGrid()\n        drawSnake(snake)\n        drawObject(food,\
          \ RED)\n\n        pygame.display.update()\n        FPSCLOCK.tick(FPS)\n\n\
          def drawGrid():\n    for x in range(0, WINDOW_WIDTH, CELLSIZE): # draw vertical\
          \ lines\n        pygame.draw.line(DISPLAYSURF, DARKGRAY, (x, 0), (x, WINDOW_HEIGHT))\n\
          \    for y in range (0, WINDOW_HEIGHT, CELLSIZE): # draw horizontal lines\n\
          \        pygame.draw.line(DISPLAYSURF, DARKGRAY, (0, y), (WINDOW_WIDTH,\
          \ y))\n\ndef drawSnake(snakeList):\n    for coord in snakeList:\n      \
          \  x = coord['x'] * CELLSIZE\n        y = coord['y'] * CELLSIZE\n      \
          \  snakeSegmentRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)\n        pygame.draw.rect(DISPLAYSURF,\
          \ GREEN, snakeSegmentRect)\n        snakeInnerSegmentRect = pygame.Rect(x\
          \ + 4, y + 4, CELLSIZE - 8, CELLSIZE - 8)\n        pygame.draw.rect(DISPLAYSURF,\
          \ WHITE, snakeInnerSegmentRect)\n\ndef drawObject(coord, color):\n    x\
          \ = coord['x'] * CELLSIZE\n    y = coord['y'] * CELLSIZE\n    foodRect =\
          \ pygame.Rect(x, y, CELLSIZE, CELLSIZE)\n    pygame.draw.rect(DISPLAYSURF,\
          \ color, foodRect)\n\ndef getRandomLocation():\n    return {'x': random.randint(0,\
          \ CELLWIDTH - 1), 'y': random.randint(0, CELLHEIGHT - 1)}\n\ndef isGameOver(snake):\n\
          \    if (snake[HEAD]['x'] == -1 or snake[HEAD]['x'] == CELLWIDTH or\n  \
          \      snake[HEAD]['y'] == -1 or snake[HEAD]['y'] == CELLHEIGHT): # hit\
          \ the wall\n            return True\n    for snakeBody in snake[1:]: # hit\
          \ itself\n        if snakeBody == snake[HEAD]:\n            return True\n\
          \    return False\n\ndef showStartScreen():\n    titleFont = pygame.font.Font('freesansbold.ttf',\
          \ 100)\n    titleSurf1 = titleFont.render('Snake Game', True, WHITE, DARKGRAY)\n\
          \    titleSurf2 = titleFont.render('Press a key to start.', True, WHITE)\n\
          \    DISPLAYSURF.blit(titleSurf1, (int((WINDOW_WIDTH - titleSurf1.get_width())\
          \ / 2), int((WINDOW_HEIGHT - titleSurf1.get_height()) / 2)))\n    DISPLAYSURF.blit(titleSurf2,\
          \ (int((WINDOW_WIDTH - titleSurf2.get_width()) / 2), int((WINDOW_HEIGHT\
          \ - titleSurf1.get_height()) / 2) + 100))\n    pygame.display.update()\n\
          \    waitForPlayer()\n\ndef showGameOverScreen():\n    gameOverFont = pygame.font.Font('freesansbold.ttf',\
          \ 150)\n    gameSurf = gameOverFont.render('Game', True, WHITE)\n    overSurf\
          \ = gameOverFont.render('Over', True, WHITE)\n    DISPLAYSURF.blit(gameSurf,\
          \ (int((WINDOW_WIDTH - gameSurf.get_width()) / 2), int((WINDOW_HEIGHT -\
          \ gameSurf.get_height()) / 2)))\n    DISPLAYSURF.blit(overSurf, (int((WINDOW_WIDTH\
          \ - overSurf.get_width()) / 2), int((WINDOW_HEIGHT - overSurf.get_height())\
          \ / 2) + 100))\n    drawPressKeyMsg()\n    pygame.display.update()\n   \
          \ waitForPlayer()\n    gameOverFont = pygame.font.Font('freesansbold.ttf',\
          \ 15)\n    playAgainSurf = gameOverFont.render('Play again? (yes or no)',\
          \ True, WHITE)\n    DISPLAYSURF.blit(playAgainSurf, (int((WINDOW_WIDTH -\
          \ playAgainSurf.get_width()) / 2), int((WINDOW_HEIGHT - playAgainSurf.get_height())\
          \ / 2) + 100))\n    pygame.display.update()\n    return playAgain()\n\n\
          def drawPressKeyMsg():\n    pressKeyFont = pygame.font.Font('freesansbold.ttf',\
          \ 18)\n    pressKeySurf = pressKeyFont.render('Press a key to play again.',\
          \ True, WHITE)\n    DISPLAYSURF.blit(pressKeySurf, (int((WINDOW_WIDTH -\
          \ pressKeySurf.get_width()) / 2), int((WINDOW_HEIGHT - pressKeySurf.get_height())\
          \ / 2) + 100))\n    pygame.display.update()\n\ndef playAgain():\n    while\
          \ True: # keep asking until player enters yes or no\n        for event in\
          \ pygame.event.get():\n            if event.type == QUIT:\n            \
          \    terminate()\n            if event.type == KEYDOWN:\n              \
          \  if event.key == K_ESCAPE: # pressing escape quits\n                 \
          \   terminate()\n                if event.key == K_y or event.key == K_n:\n\
          \                    return event.key == K_y # yes or no\n\ndef waitForPlayer():\n\
          \    while True:\n        for event in pygame.event.get():\n           \
          \ if event.type == QUIT:\n                terminate()\n            if event.type\
          \ == KEYDOWN:\n                if event.key == K_ESCAPE: # pressing escape\
          \ quits\n                    terminate()\n                return\n\ndef\
          \ terminate():\n    pygame.quit()\n    sys.exit()\n\nif __name__ == '__main__':\n\
          \    main()\n</code></pre>\n<p>or </p>\n<blockquote>\n<p>Provide complete\
          \ working code for a realistic looking tree in Python using the Turtle graphics\
          \ library and a recursive algorithm.   </p>\n</blockquote>\n<ul>\n<li>also\
          \ first try.</li>\n</ul>\n<p><a rel=\"nofollow\" href=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/zHg-IGWVhi9GEZ1V049xP.png\"\
          ><img alt=\"Screenshot 2024-01-06 165209.png\" src=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/zHg-IGWVhi9GEZ1V049xP.png\"\
          ></a></p>\n<pre><code>import turtle\nimport random\n\n# Function to draw\
          \ trees using recursion\ndef draw_tree(branchLen,t):\n    if branchLen &gt;\
          \ 5: # Base case for recursive function\n        t.forward(branchLen)\n\
          \        t.right(20)\n        draw_tree(branchLen - 15,t) # Recursive call\
          \ to draw right branch of tree\n        t.left(40)\n        draw_tree(branchLen\
          \ - 15,t) # Recursive call to draw left branch of tree\n        t.right(20)\n\
          \        t.backward(branchLen) # Go back to the initial position after drawing\
          \ each branch\n    else:\n        return\n\ndef main():\n    myWin = turtle.Screen()\n\
          \    t = turtle.Turtle()\n\n    t.left(90)\n    t.up()\n    t.backward(100)\n\
          \    t.down()\n    t.color(\"green\")\n\n    # Draw a random tree with branch\
          \ length between 50 and 100\n    draw_tree(random.randint(50, 100),t)\n\
          \    myWin.exitonclick()\n\nmain()\n</code></pre>\n<ul>\n<li>Second attempt</li>\n\
          </ul>\n<p><a rel=\"nofollow\" href=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/-iYMRbj7hxSD01mKb-U5g.png\"\
          ><img alt=\"Screenshot 2024-01-06 175140.png\" src=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/-iYMRbj7hxSD01mKb-U5g.png\"\
          ></a></p>\n<pre><code>import turtle\nimport random\n\n# Set up the screen\n\
          wn = turtle.Screen()\nwn.bgcolor(\"black\")\nturtle.speed(0)\nturtle.setheading(90)\n\
          turtle.penup()\nturtle.goto(-150, -200)\nturtle.pendown()\nturtle.pencolor('green')\n\
          \n# Recursive function to draw a tree\ndef draw_tree(branchLength):\n  \
          \  angle = random.randint(15,45)\n    sf = random.uniform(0.6, 0.8) # scale\
          \ factor for the branches\n\n    if branchLength &lt; 3: # Base case to\
          \ stop recursion\n        return\n    else:\n        turtle.forward(branchLength)\n\
          \n        turtle.left(angle)\n        draw_tree(branchLength*sf)\n\n   \
          \     turtle.right(angle*2)\n        draw_tree(branchLength*sf)\n\n    \
          \    turtle.left(angle)\n\n        if branchLength &lt; 15: # To make sure\
          \ the leaves are small\n            turtle.pencolor('green')\n         \
          \   turtle.dot()\n\n        turtle.backward(branchLength)\n\n# Call the\
          \ function\ndraw_tree(75)\n\nturtle.done()\n</code></pre>\n<p>Try such quotatios\
          \ on any other open source llm ..good luck to run on first try or will never\
          \ be working code. Even if works is usually very basic snake game looks.\
          \  Or that tree is broken badly.<br>This model is doing that without any\
          \ problems even more complex code .... is very comparable to GPT-4 exceeding\
          \ GPT-3.5 easily.    </p>\n"
        raw: "That is the most capable opensource LLM for coding I ever seen... It\
          \ has coding level of GPT-4   ... is incredible. \nI easily made advanced\
          \ applications by this llm .... never done that before so easily. \nFor\
          \ instance  Phind-CodeLlama-34B-v2 is far less capable comparing to  WizardCoder-33B-V1.1.\
          \ That is big step forward now.\n\nAdded from my posts:\n\nfor me not making\
          \ errors what I am surprised. \nI'am using newest llamacpp and model version\
          \ q4k_m  ( old q4 is much worse )  \n\nMy code to run llamcpp\n````\nbuild\\\
          bin\\main.exe --model models\\new3\\wizardcoder-33b-v1.1.Q4_K_M.gguf --mlock\
          \ --color --threads 16 --keep -1 --batch_size 512 --n_predict -1 --repeat_penalty\
          \ 1.1 --ctx_size 0 --interactive --instruct --reverse-prompt \"<|im_end|>\"\
          \ -ngl 58 --simple-io  --in-prefix \" ### Instruction: \" --in-suffix \"\
          \ ### Response: \" -p \"Below is an instruction that describes a task. Write\
          \ a response that appropriately completes the request. \"\n````\n\nLook\
          \ on that code :\n\n> Can you make A snake game in python?\n\n- first try.\
          \  Look how long code is and was generated without any errors also game\
          \ looks ..decent. \n- Even has working score system.\n\n![Screenshot 2024-01-06\
          \ 164614.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/Bd784ycfp_76T0SJh-NYe.png)\n\
          \ \n````\nimport turtle\nimport time\nimport random\n\ndelay = 0.1\nscore\
          \ = 0\nhigh_score = 0\n\n# Set up the screen\nwn = turtle.Screen()\nwn.title(\"\
          Snake Game\")\nwn.bgcolor(\"black\")\nwn.setup(width=600, height=600)\n\
          wn.tracer(0)  # Turns off the screen updates\n\n# Snake head\nhead = turtle.Turtle()\n\
          head.speed(0)\nhead.shape(\"square\")\nhead.color(\"white\")\nhead.penup()\n\
          head.goto(0, 0)\nhead.direction = \"stop\"\n\n# Snake food\nfood = turtle.Turtle()\n\
          food.speed(0)\nfood.shape(\"circle\")\nfood.color(\"red\")\nfood.penup()\n\
          food.goto(random.randint(-290, 290), random.randint(-290, 290))\n\nsegments\
          \ = []\n\n# Pen\npen = turtle.Turtle()\npen.speed(0)\npen.shape(\"square\"\
          )\npen.color(\"white\")\npen.penup()\npen.hideturtle()\npen.goto(0, 260)\n\
          pen.write(\"Score: 0  High Score: 0\", align=\"center\", font=(\"Courier\"\
          , 24, \"normal\"))\n\n# Functions\ndef go_up():\n    if head.direction !=\
          \ \"down\":\n        head.direction = \"up\"\n\ndef go_down():\n    if head.direction\
          \ != \"up\":\n        head.direction = \"down\"\n\ndef go_left():\n    if\
          \ head.direction != \"right\":\n        head.direction = \"left\"\n\ndef\
          \ go_right():\n    if head.direction != \"left\":\n        head.direction\
          \ = \"right\"\n\ndef move():\n    if head.direction == \"up\":\n       \
          \ y = head.ycor()\n        head.sety(y + 20)\n\n    if head.direction ==\
          \ \"down\":\n        y = head.ycor()\n        head.sety(y - 20)\n\n    if\
          \ head.direction == \"left\":\n        x = head.xcor()\n        head.setx(x\
          \ - 20)\n\n    if head.direction == \"right\":\n        x = head.xcor()\n\
          \        head.setx(x + 20)\n\n# Keyboard bindings\nwn.listen()\nwn.onkeypress(go_up,\
          \ \"Up\")\nwn.onkeypress(go_down, \"Down\")\nwn.onkeypress(go_left, \"Left\"\
          )\nwn.onkeypress(go_right, \"Right\")\n\n# Main game loop\nwhile True:\n\
          \    wn.update()\n\n    # Check for a collision with the border\n    if\
          \ head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:\n\
          \        time.sleep(1)\n        head.goto(0,0)\n        head.direction =\
          \ \"stop\"\n\n        # Hide the segments\n        for segment in segments:\n\
          \            segment.goto(1000, 1000)\n\n        # Clear the segments list\n\
          \        segments.clear()\n\n        score = 0\n\n    # Check for a collision\
          \ with the food\n    if head.distance(food) < 20:\n        x = random.randint(-290,\
          \ 290)\n        y = random.randint(-290, 290)\n        food.goto(x,y)\n\n\
          \        # Add a segment\n        new_segment = turtle.Turtle()\n      \
          \  new_segment.speed(0)\n        new_segment.shape(\"square\")\n       \
          \ new_segment.color(\"grey\")\n        new_segment.penup()\n        segments.append(new_segment)\n\
          \n        # Shorten the delay\n        delay -= 0.001\n\n        score +=\
          \ 10\n        if score > high_score:\n            high_score = score\n\n\
          \        pen.clear()\n        pen.write(\"Score: {}  High Score: {}\".format(score,\
          \ high_score), align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          \    # Move the end segments first in reverse order\n    for index in range(len(segments)-1,\
          \ 0, -1):\n        x = segments[index-1].xcor()\n        y = segments[index-1].ycor()\n\
          \        segments[index].goto(x, y)\n\n    # Move segment 0 to where the\
          \ head is\n    if len(segments) > 0:\n        x = head.xcor()\n        y\
          \ = head.ycor()\n        segments[0].goto(x, y)\n\n    move()\n\n    time.sleep(delay)\n\
          \nwn.mainloop()\n````\n- Second try to make snake game gave even better\
          \ results , welcome screen , end screen etc .... \n- look how long the code\
          \ is and works without any corrections\n\n\n![Screenshot 2024-01-06 173023.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/kYkTtmgt8No20YJIVUzjs.png)\n\
          \n![Screenshot 2024-01-06 172757.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/P2no98K6Hz4SNcOlsZ19l.png)\n\
          \n````\nimport pygame, sys, time, random\nfrom pygame.locals import *\n\n\
          # Constants that will be used in the game\nFPS = 15\nWINDOW_WIDTH = 640\n\
          WINDOW_HEIGHT = 480\nCELLSIZE = 20\nassert WINDOW_WIDTH % CELLSIZE == 0,\
          \ \"Window width must be a multiple of cell size.\"\nassert WINDOW_HEIGHT\
          \ % CELLSIZE == 0, \"Window height must be a multiple of cell size.\"\n\
          CELLWIDTH = int(WINDOW_WIDTH / CELLSIZE)\nCELLHEIGHT = int(WINDOW_HEIGHT\
          \ / CELLSIZE)\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0,\
          \ 0)\nGREEN = (0, 255, 0)\nDARKGRAY = (40, 40, 40)\nBGCOLOR = BLACK\n\n\
          UP = 'up'\nDOWN = 'down'\nLEFT = 'left'\nRIGHT = 'right'\n\nHEAD = 0 # syntactic\
          \ sugar: index of the snake's head\n\ndef main():\n    global FPSCLOCK,\
          \ DISPLAYSURF\n    pygame.init()\n    FPSCLOCK = pygame.time.Clock()\n \
          \   DISPLAYSURF = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))\n\
          \    pygame.display.set_caption('Snake')\n\n    showStartScreen()\n    while\
          \ True: # main game loop\n        runGame()\n        showGameOverScreen()\n\
          \ndef runGame():\n    # Game setup\n    snake = [{'x': 5, 'y': 10}, {'x':\
          \ 4, 'y': 10}, {'x': 3, 'y': 10}]\n    direction = RIGHT\n    newDirection\
          \ = direction\n\n    food = getRandomLocation()\n    while True: # single\
          \ game loop\n        for event in pygame.event.get(): # event handling loop\n\
          \            if event.type == QUIT or (event.type == KEYDOWN and event.key\
          \ == K_ESCAPE):\n                terminate()\n            elif event.type\
          \ == KEYDOWN:\n                if event.key == K_LEFT and direction != RIGHT:\n\
          \                    newDirection = LEFT\n                elif event.key\
          \ == K_RIGHT and direction != LEFT:\n                    newDirection =\
          \ RIGHT\n                elif event.key == K_UP and direction != DOWN:\n\
          \                    newDirection = UP\n                elif event.key ==\
          \ K_DOWN and direction != UP:\n                    newDirection = DOWN\n\
          \        if isGameOver(snake):\n            return\n        direction =\
          \ newDirection # only change direction when no QUIT event\n\n        # move\
          \ the snake\n        if direction == UP:\n            newHead = {'x': snake[HEAD]['x'],\
          \ 'y': snake[HEAD]['y'] - 1}\n        elif direction == DOWN:\n        \
          \    newHead = {'x': snake[HEAD]['x'], 'y': snake[HEAD]['y'] + 1}\n    \
          \    elif direction == LEFT:\n            newHead = {'x': snake[HEAD]['x']\
          \ - 1, 'y': snake[HEAD]['y']}\n        elif direction == RIGHT:\n      \
          \      newHead = {'x': snake[HEAD]['x'] + 1, 'y': snake[HEAD]['y']}\n\n\
          \        snake.insert(0, newHead) # insert and del operations are fast at\
          \ the beginning of a list\n\n        if (newHead == food): # have we eaten?\n\
          \            food = getRandomLocation() # spawn new food object\n      \
          \  else: # move snake by removing tail\n            snake.pop()\n\n    \
          \    # Draw the game world on the window\n        DISPLAYSURF.fill(BGCOLOR)\n\
          \        drawGrid()\n        drawSnake(snake)\n        drawObject(food,\
          \ RED)\n\n        pygame.display.update()\n        FPSCLOCK.tick(FPS)\n\n\
          def drawGrid():\n    for x in range(0, WINDOW_WIDTH, CELLSIZE): # draw vertical\
          \ lines\n        pygame.draw.line(DISPLAYSURF, DARKGRAY, (x, 0), (x, WINDOW_HEIGHT))\n\
          \    for y in range (0, WINDOW_HEIGHT, CELLSIZE): # draw horizontal lines\n\
          \        pygame.draw.line(DISPLAYSURF, DARKGRAY, (0, y), (WINDOW_WIDTH,\
          \ y))\n\ndef drawSnake(snakeList):\n    for coord in snakeList:\n      \
          \  x = coord['x'] * CELLSIZE\n        y = coord['y'] * CELLSIZE\n      \
          \  snakeSegmentRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)\n        pygame.draw.rect(DISPLAYSURF,\
          \ GREEN, snakeSegmentRect)\n        snakeInnerSegmentRect = pygame.Rect(x\
          \ + 4, y + 4, CELLSIZE - 8, CELLSIZE - 8)\n        pygame.draw.rect(DISPLAYSURF,\
          \ WHITE, snakeInnerSegmentRect)\n\ndef drawObject(coord, color):\n    x\
          \ = coord['x'] * CELLSIZE\n    y = coord['y'] * CELLSIZE\n    foodRect =\
          \ pygame.Rect(x, y, CELLSIZE, CELLSIZE)\n    pygame.draw.rect(DISPLAYSURF,\
          \ color, foodRect)\n\ndef getRandomLocation():\n    return {'x': random.randint(0,\
          \ CELLWIDTH - 1), 'y': random.randint(0, CELLHEIGHT - 1)}\n\ndef isGameOver(snake):\n\
          \    if (snake[HEAD]['x'] == -1 or snake[HEAD]['x'] == CELLWIDTH or\n  \
          \      snake[HEAD]['y'] == -1 or snake[HEAD]['y'] == CELLHEIGHT): # hit\
          \ the wall\n            return True\n    for snakeBody in snake[1:]: # hit\
          \ itself\n        if snakeBody == snake[HEAD]:\n            return True\n\
          \    return False\n\ndef showStartScreen():\n    titleFont = pygame.font.Font('freesansbold.ttf',\
          \ 100)\n    titleSurf1 = titleFont.render('Snake Game', True, WHITE, DARKGRAY)\n\
          \    titleSurf2 = titleFont.render('Press a key to start.', True, WHITE)\n\
          \    DISPLAYSURF.blit(titleSurf1, (int((WINDOW_WIDTH - titleSurf1.get_width())\
          \ / 2), int((WINDOW_HEIGHT - titleSurf1.get_height()) / 2)))\n    DISPLAYSURF.blit(titleSurf2,\
          \ (int((WINDOW_WIDTH - titleSurf2.get_width()) / 2), int((WINDOW_HEIGHT\
          \ - titleSurf1.get_height()) / 2) + 100))\n    pygame.display.update()\n\
          \    waitForPlayer()\n\ndef showGameOverScreen():\n    gameOverFont = pygame.font.Font('freesansbold.ttf',\
          \ 150)\n    gameSurf = gameOverFont.render('Game', True, WHITE)\n    overSurf\
          \ = gameOverFont.render('Over', True, WHITE)\n    DISPLAYSURF.blit(gameSurf,\
          \ (int((WINDOW_WIDTH - gameSurf.get_width()) / 2), int((WINDOW_HEIGHT -\
          \ gameSurf.get_height()) / 2)))\n    DISPLAYSURF.blit(overSurf, (int((WINDOW_WIDTH\
          \ - overSurf.get_width()) / 2), int((WINDOW_HEIGHT - overSurf.get_height())\
          \ / 2) + 100))\n    drawPressKeyMsg()\n    pygame.display.update()\n   \
          \ waitForPlayer()\n    gameOverFont = pygame.font.Font('freesansbold.ttf',\
          \ 15)\n    playAgainSurf = gameOverFont.render('Play again? (yes or no)',\
          \ True, WHITE)\n    DISPLAYSURF.blit(playAgainSurf, (int((WINDOW_WIDTH -\
          \ playAgainSurf.get_width()) / 2), int((WINDOW_HEIGHT - playAgainSurf.get_height())\
          \ / 2) + 100))\n    pygame.display.update()\n    return playAgain()\n\n\
          def drawPressKeyMsg():\n    pressKeyFont = pygame.font.Font('freesansbold.ttf',\
          \ 18)\n    pressKeySurf = pressKeyFont.render('Press a key to play again.',\
          \ True, WHITE)\n    DISPLAYSURF.blit(pressKeySurf, (int((WINDOW_WIDTH -\
          \ pressKeySurf.get_width()) / 2), int((WINDOW_HEIGHT - pressKeySurf.get_height())\
          \ / 2) + 100))\n    pygame.display.update()\n\ndef playAgain():\n    while\
          \ True: # keep asking until player enters yes or no\n        for event in\
          \ pygame.event.get():\n            if event.type == QUIT:\n            \
          \    terminate()\n            if event.type == KEYDOWN:\n              \
          \  if event.key == K_ESCAPE: # pressing escape quits\n                 \
          \   terminate()\n                if event.key == K_y or event.key == K_n:\n\
          \                    return event.key == K_y # yes or no\n\ndef waitForPlayer():\n\
          \    while True:\n        for event in pygame.event.get():\n           \
          \ if event.type == QUIT:\n                terminate()\n            if event.type\
          \ == KEYDOWN:\n                if event.key == K_ESCAPE: # pressing escape\
          \ quits\n                    terminate()\n                return\n\ndef\
          \ terminate():\n    pygame.quit()\n    sys.exit()\n\nif __name__ == '__main__':\n\
          \    main()\n````\n\nor \n\n> Provide complete working code for a realistic\
          \ looking tree in Python using the Turtle graphics library and a recursive\
          \ algorithm.   \n-  also first try.\n\n![Screenshot 2024-01-06 165209.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/zHg-IGWVhi9GEZ1V049xP.png)\n\
          \n\n````\nimport turtle\nimport random\n\n# Function to draw trees using\
          \ recursion\ndef draw_tree(branchLen,t):\n    if branchLen > 5: # Base case\
          \ for recursive function\n        t.forward(branchLen)\n        t.right(20)\n\
          \        draw_tree(branchLen - 15,t) # Recursive call to draw right branch\
          \ of tree\n        t.left(40)\n        draw_tree(branchLen - 15,t) # Recursive\
          \ call to draw left branch of tree\n        t.right(20)\n        t.backward(branchLen)\
          \ # Go back to the initial position after drawing each branch\n    else:\n\
          \        return\n\ndef main():\n    myWin = turtle.Screen()\n    t = turtle.Turtle()\n\
          \n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"\
          green\")\n\n    # Draw a random tree with branch length between 50 and 100\n\
          \    draw_tree(random.randint(50, 100),t)\n    myWin.exitonclick()\n\nmain()\n\
          ````\n- Second attempt\n\n![Screenshot 2024-01-06 175140.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/-iYMRbj7hxSD01mKb-U5g.png)\n\
          \n\n````\nimport turtle\nimport random\n\n# Set up the screen\nwn = turtle.Screen()\n\
          wn.bgcolor(\"black\")\nturtle.speed(0)\nturtle.setheading(90)\nturtle.penup()\n\
          turtle.goto(-150, -200)\nturtle.pendown()\nturtle.pencolor('green')\n\n\
          # Recursive function to draw a tree\ndef draw_tree(branchLength):\n    angle\
          \ = random.randint(15,45)\n    sf = random.uniform(0.6, 0.8) # scale factor\
          \ for the branches\n\n    if branchLength < 3: # Base case to stop recursion\n\
          \        return\n    else:\n        turtle.forward(branchLength)\n\n   \
          \     turtle.left(angle)\n        draw_tree(branchLength*sf)\n\n       \
          \ turtle.right(angle*2)\n        draw_tree(branchLength*sf)\n\n        turtle.left(angle)\n\
          \n        if branchLength < 15: # To make sure the leaves are small\n  \
          \          turtle.pencolor('green')\n            turtle.dot()\n\n      \
          \  turtle.backward(branchLength)\n\n# Call the function\ndraw_tree(75)\n\
          \nturtle.done()\n````\n\n\nTry such quotatios on any other open source llm\
          \ ..good luck to run on first try or will never be working code. Even if\
          \ works is usually very basic snake game looks.  Or that tree is broken\
          \ badly.\nThis model is doing that without any problems even more complex\
          \ code .... is very comparable to GPT-4 exceeding GPT-3.5 easily.    \n\n"
        updatedAt: '2024-01-06T17:53:11.971Z'
      numEdits: 5
      reactions:
      - count: 2
        reaction: "\U0001F44D"
        users:
        - Yhyu13
        - CodingJunkie
    id: 65994910816bb94a4f35e7dd
    type: comment
  author: mirek190
  content: "That is the most capable opensource LLM for coding I ever seen... It has\
    \ coding level of GPT-4   ... is incredible. \nI easily made advanced applications\
    \ by this llm .... never done that before so easily. \nFor instance  Phind-CodeLlama-34B-v2\
    \ is far less capable comparing to  WizardCoder-33B-V1.1. That is big step forward\
    \ now.\n\nAdded from my posts:\n\nfor me not making errors what I am surprised.\
    \ \nI'am using newest llamacpp and model version q4k_m  ( old q4 is much worse\
    \ )  \n\nMy code to run llamcpp\n````\nbuild\\bin\\main.exe --model models\\new3\\\
    wizardcoder-33b-v1.1.Q4_K_M.gguf --mlock --color --threads 16 --keep -1 --batch_size\
    \ 512 --n_predict -1 --repeat_penalty 1.1 --ctx_size 0 --interactive --instruct\
    \ --reverse-prompt \"<|im_end|>\" -ngl 58 --simple-io  --in-prefix \" ### Instruction:\
    \ \" --in-suffix \" ### Response: \" -p \"Below is an instruction that describes\
    \ a task. Write a response that appropriately completes the request. \"\n````\n\
    \nLook on that code :\n\n> Can you make A snake game in python?\n\n- first try.\
    \  Look how long code is and was generated without any errors also game looks\
    \ ..decent. \n- Even has working score system.\n\n![Screenshot 2024-01-06 164614.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/Bd784ycfp_76T0SJh-NYe.png)\n\
    \ \n````\nimport turtle\nimport time\nimport random\n\ndelay = 0.1\nscore = 0\n\
    high_score = 0\n\n# Set up the screen\nwn = turtle.Screen()\nwn.title(\"Snake\
    \ Game\")\nwn.bgcolor(\"black\")\nwn.setup(width=600, height=600)\nwn.tracer(0)\
    \  # Turns off the screen updates\n\n# Snake head\nhead = turtle.Turtle()\nhead.speed(0)\n\
    head.shape(\"square\")\nhead.color(\"white\")\nhead.penup()\nhead.goto(0, 0)\n\
    head.direction = \"stop\"\n\n# Snake food\nfood = turtle.Turtle()\nfood.speed(0)\n\
    food.shape(\"circle\")\nfood.color(\"red\")\nfood.penup()\nfood.goto(random.randint(-290,\
    \ 290), random.randint(-290, 290))\n\nsegments = []\n\n# Pen\npen = turtle.Turtle()\n\
    pen.speed(0)\npen.shape(\"square\")\npen.color(\"white\")\npen.penup()\npen.hideturtle()\n\
    pen.goto(0, 260)\npen.write(\"Score: 0  High Score: 0\", align=\"center\", font=(\"\
    Courier\", 24, \"normal\"))\n\n# Functions\ndef go_up():\n    if head.direction\
    \ != \"down\":\n        head.direction = \"up\"\n\ndef go_down():\n    if head.direction\
    \ != \"up\":\n        head.direction = \"down\"\n\ndef go_left():\n    if head.direction\
    \ != \"right\":\n        head.direction = \"left\"\n\ndef go_right():\n    if\
    \ head.direction != \"left\":\n        head.direction = \"right\"\n\ndef move():\n\
    \    if head.direction == \"up\":\n        y = head.ycor()\n        head.sety(y\
    \ + 20)\n\n    if head.direction == \"down\":\n        y = head.ycor()\n     \
    \   head.sety(y - 20)\n\n    if head.direction == \"left\":\n        x = head.xcor()\n\
    \        head.setx(x - 20)\n\n    if head.direction == \"right\":\n        x =\
    \ head.xcor()\n        head.setx(x + 20)\n\n# Keyboard bindings\nwn.listen()\n\
    wn.onkeypress(go_up, \"Up\")\nwn.onkeypress(go_down, \"Down\")\nwn.onkeypress(go_left,\
    \ \"Left\")\nwn.onkeypress(go_right, \"Right\")\n\n# Main game loop\nwhile True:\n\
    \    wn.update()\n\n    # Check for a collision with the border\n    if head.xcor()>290\
    \ or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:\n        time.sleep(1)\n\
    \        head.goto(0,0)\n        head.direction = \"stop\"\n\n        # Hide the\
    \ segments\n        for segment in segments:\n            segment.goto(1000, 1000)\n\
    \n        # Clear the segments list\n        segments.clear()\n\n        score\
    \ = 0\n\n    # Check for a collision with the food\n    if head.distance(food)\
    \ < 20:\n        x = random.randint(-290, 290)\n        y = random.randint(-290,\
    \ 290)\n        food.goto(x,y)\n\n        # Add a segment\n        new_segment\
    \ = turtle.Turtle()\n        new_segment.speed(0)\n        new_segment.shape(\"\
    square\")\n        new_segment.color(\"grey\")\n        new_segment.penup()\n\
    \        segments.append(new_segment)\n\n        # Shorten the delay\n       \
    \ delay -= 0.001\n\n        score += 10\n        if score > high_score:\n    \
    \        high_score = score\n\n        pen.clear()\n        pen.write(\"Score:\
    \ {}  High Score: {}\".format(score, high_score), align=\"center\", font=(\"Courier\"\
    , 24, \"normal\"))\n\n    # Move the end segments first in reverse order\n   \
    \ for index in range(len(segments)-1, 0, -1):\n        x = segments[index-1].xcor()\n\
    \        y = segments[index-1].ycor()\n        segments[index].goto(x, y)\n\n\
    \    # Move segment 0 to where the head is\n    if len(segments) > 0:\n      \
    \  x = head.xcor()\n        y = head.ycor()\n        segments[0].goto(x, y)\n\n\
    \    move()\n\n    time.sleep(delay)\n\nwn.mainloop()\n````\n- Second try to make\
    \ snake game gave even better results , welcome screen , end screen etc .... \n\
    - look how long the code is and works without any corrections\n\n\n![Screenshot\
    \ 2024-01-06 173023.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/kYkTtmgt8No20YJIVUzjs.png)\n\
    \n![Screenshot 2024-01-06 172757.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/P2no98K6Hz4SNcOlsZ19l.png)\n\
    \n````\nimport pygame, sys, time, random\nfrom pygame.locals import *\n\n# Constants\
    \ that will be used in the game\nFPS = 15\nWINDOW_WIDTH = 640\nWINDOW_HEIGHT =\
    \ 480\nCELLSIZE = 20\nassert WINDOW_WIDTH % CELLSIZE == 0, \"Window width must\
    \ be a multiple of cell size.\"\nassert WINDOW_HEIGHT % CELLSIZE == 0, \"Window\
    \ height must be a multiple of cell size.\"\nCELLWIDTH = int(WINDOW_WIDTH / CELLSIZE)\n\
    CELLHEIGHT = int(WINDOW_HEIGHT / CELLSIZE)\nWHITE = (255, 255, 255)\nBLACK = (0,\
    \ 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nDARKGRAY = (40, 40, 40)\nBGCOLOR\
    \ = BLACK\n\nUP = 'up'\nDOWN = 'down'\nLEFT = 'left'\nRIGHT = 'right'\n\nHEAD\
    \ = 0 # syntactic sugar: index of the snake's head\n\ndef main():\n    global\
    \ FPSCLOCK, DISPLAYSURF\n    pygame.init()\n    FPSCLOCK = pygame.time.Clock()\n\
    \    DISPLAYSURF = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))\n  \
    \  pygame.display.set_caption('Snake')\n\n    showStartScreen()\n    while True:\
    \ # main game loop\n        runGame()\n        showGameOverScreen()\n\ndef runGame():\n\
    \    # Game setup\n    snake = [{'x': 5, 'y': 10}, {'x': 4, 'y': 10}, {'x': 3,\
    \ 'y': 10}]\n    direction = RIGHT\n    newDirection = direction\n\n    food =\
    \ getRandomLocation()\n    while True: # single game loop\n        for event in\
    \ pygame.event.get(): # event handling loop\n            if event.type == QUIT\
    \ or (event.type == KEYDOWN and event.key == K_ESCAPE):\n                terminate()\n\
    \            elif event.type == KEYDOWN:\n                if event.key == K_LEFT\
    \ and direction != RIGHT:\n                    newDirection = LEFT\n         \
    \       elif event.key == K_RIGHT and direction != LEFT:\n                   \
    \ newDirection = RIGHT\n                elif event.key == K_UP and direction !=\
    \ DOWN:\n                    newDirection = UP\n                elif event.key\
    \ == K_DOWN and direction != UP:\n                    newDirection = DOWN\n  \
    \      if isGameOver(snake):\n            return\n        direction = newDirection\
    \ # only change direction when no QUIT event\n\n        # move the snake\n   \
    \     if direction == UP:\n            newHead = {'x': snake[HEAD]['x'], 'y':\
    \ snake[HEAD]['y'] - 1}\n        elif direction == DOWN:\n            newHead\
    \ = {'x': snake[HEAD]['x'], 'y': snake[HEAD]['y'] + 1}\n        elif direction\
    \ == LEFT:\n            newHead = {'x': snake[HEAD]['x'] - 1, 'y': snake[HEAD]['y']}\n\
    \        elif direction == RIGHT:\n            newHead = {'x': snake[HEAD]['x']\
    \ + 1, 'y': snake[HEAD]['y']}\n\n        snake.insert(0, newHead) # insert and\
    \ del operations are fast at the beginning of a list\n\n        if (newHead ==\
    \ food): # have we eaten?\n            food = getRandomLocation() # spawn new\
    \ food object\n        else: # move snake by removing tail\n            snake.pop()\n\
    \n        # Draw the game world on the window\n        DISPLAYSURF.fill(BGCOLOR)\n\
    \        drawGrid()\n        drawSnake(snake)\n        drawObject(food, RED)\n\
    \n        pygame.display.update()\n        FPSCLOCK.tick(FPS)\n\ndef drawGrid():\n\
    \    for x in range(0, WINDOW_WIDTH, CELLSIZE): # draw vertical lines\n      \
    \  pygame.draw.line(DISPLAYSURF, DARKGRAY, (x, 0), (x, WINDOW_HEIGHT))\n    for\
    \ y in range (0, WINDOW_HEIGHT, CELLSIZE): # draw horizontal lines\n        pygame.draw.line(DISPLAYSURF,\
    \ DARKGRAY, (0, y), (WINDOW_WIDTH, y))\n\ndef drawSnake(snakeList):\n    for coord\
    \ in snakeList:\n        x = coord['x'] * CELLSIZE\n        y = coord['y'] * CELLSIZE\n\
    \        snakeSegmentRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)\n        pygame.draw.rect(DISPLAYSURF,\
    \ GREEN, snakeSegmentRect)\n        snakeInnerSegmentRect = pygame.Rect(x + 4,\
    \ y + 4, CELLSIZE - 8, CELLSIZE - 8)\n        pygame.draw.rect(DISPLAYSURF, WHITE,\
    \ snakeInnerSegmentRect)\n\ndef drawObject(coord, color):\n    x = coord['x']\
    \ * CELLSIZE\n    y = coord['y'] * CELLSIZE\n    foodRect = pygame.Rect(x, y,\
    \ CELLSIZE, CELLSIZE)\n    pygame.draw.rect(DISPLAYSURF, color, foodRect)\n\n\
    def getRandomLocation():\n    return {'x': random.randint(0, CELLWIDTH - 1), 'y':\
    \ random.randint(0, CELLHEIGHT - 1)}\n\ndef isGameOver(snake):\n    if (snake[HEAD]['x']\
    \ == -1 or snake[HEAD]['x'] == CELLWIDTH or\n        snake[HEAD]['y'] == -1 or\
    \ snake[HEAD]['y'] == CELLHEIGHT): # hit the wall\n            return True\n \
    \   for snakeBody in snake[1:]: # hit itself\n        if snakeBody == snake[HEAD]:\n\
    \            return True\n    return False\n\ndef showStartScreen():\n    titleFont\
    \ = pygame.font.Font('freesansbold.ttf', 100)\n    titleSurf1 = titleFont.render('Snake\
    \ Game', True, WHITE, DARKGRAY)\n    titleSurf2 = titleFont.render('Press a key\
    \ to start.', True, WHITE)\n    DISPLAYSURF.blit(titleSurf1, (int((WINDOW_WIDTH\
    \ - titleSurf1.get_width()) / 2), int((WINDOW_HEIGHT - titleSurf1.get_height())\
    \ / 2)))\n    DISPLAYSURF.blit(titleSurf2, (int((WINDOW_WIDTH - titleSurf2.get_width())\
    \ / 2), int((WINDOW_HEIGHT - titleSurf1.get_height()) / 2) + 100))\n    pygame.display.update()\n\
    \    waitForPlayer()\n\ndef showGameOverScreen():\n    gameOverFont = pygame.font.Font('freesansbold.ttf',\
    \ 150)\n    gameSurf = gameOverFont.render('Game', True, WHITE)\n    overSurf\
    \ = gameOverFont.render('Over', True, WHITE)\n    DISPLAYSURF.blit(gameSurf, (int((WINDOW_WIDTH\
    \ - gameSurf.get_width()) / 2), int((WINDOW_HEIGHT - gameSurf.get_height()) /\
    \ 2)))\n    DISPLAYSURF.blit(overSurf, (int((WINDOW_WIDTH - overSurf.get_width())\
    \ / 2), int((WINDOW_HEIGHT - overSurf.get_height()) / 2) + 100))\n    drawPressKeyMsg()\n\
    \    pygame.display.update()\n    waitForPlayer()\n    gameOverFont = pygame.font.Font('freesansbold.ttf',\
    \ 15)\n    playAgainSurf = gameOverFont.render('Play again? (yes or no)', True,\
    \ WHITE)\n    DISPLAYSURF.blit(playAgainSurf, (int((WINDOW_WIDTH - playAgainSurf.get_width())\
    \ / 2), int((WINDOW_HEIGHT - playAgainSurf.get_height()) / 2) + 100))\n    pygame.display.update()\n\
    \    return playAgain()\n\ndef drawPressKeyMsg():\n    pressKeyFont = pygame.font.Font('freesansbold.ttf',\
    \ 18)\n    pressKeySurf = pressKeyFont.render('Press a key to play again.', True,\
    \ WHITE)\n    DISPLAYSURF.blit(pressKeySurf, (int((WINDOW_WIDTH - pressKeySurf.get_width())\
    \ / 2), int((WINDOW_HEIGHT - pressKeySurf.get_height()) / 2) + 100))\n    pygame.display.update()\n\
    \ndef playAgain():\n    while True: # keep asking until player enters yes or no\n\
    \        for event in pygame.event.get():\n            if event.type == QUIT:\n\
    \                terminate()\n            if event.type == KEYDOWN:\n        \
    \        if event.key == K_ESCAPE: # pressing escape quits\n                 \
    \   terminate()\n                if event.key == K_y or event.key == K_n:\n  \
    \                  return event.key == K_y # yes or no\n\ndef waitForPlayer():\n\
    \    while True:\n        for event in pygame.event.get():\n            if event.type\
    \ == QUIT:\n                terminate()\n            if event.type == KEYDOWN:\n\
    \                if event.key == K_ESCAPE: # pressing escape quits\n         \
    \           terminate()\n                return\n\ndef terminate():\n    pygame.quit()\n\
    \    sys.exit()\n\nif __name__ == '__main__':\n    main()\n````\n\nor \n\n> Provide\
    \ complete working code for a realistic looking tree in Python using the Turtle\
    \ graphics library and a recursive algorithm.   \n-  also first try.\n\n![Screenshot\
    \ 2024-01-06 165209.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/zHg-IGWVhi9GEZ1V049xP.png)\n\
    \n\n````\nimport turtle\nimport random\n\n# Function to draw trees using recursion\n\
    def draw_tree(branchLen,t):\n    if branchLen > 5: # Base case for recursive function\n\
    \        t.forward(branchLen)\n        t.right(20)\n        draw_tree(branchLen\
    \ - 15,t) # Recursive call to draw right branch of tree\n        t.left(40)\n\
    \        draw_tree(branchLen - 15,t) # Recursive call to draw left branch of tree\n\
    \        t.right(20)\n        t.backward(branchLen) # Go back to the initial position\
    \ after drawing each branch\n    else:\n        return\n\ndef main():\n    myWin\
    \ = turtle.Screen()\n    t = turtle.Turtle()\n\n    t.left(90)\n    t.up()\n \
    \   t.backward(100)\n    t.down()\n    t.color(\"green\")\n\n    # Draw a random\
    \ tree with branch length between 50 and 100\n    draw_tree(random.randint(50,\
    \ 100),t)\n    myWin.exitonclick()\n\nmain()\n````\n- Second attempt\n\n![Screenshot\
    \ 2024-01-06 175140.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/-iYMRbj7hxSD01mKb-U5g.png)\n\
    \n\n````\nimport turtle\nimport random\n\n# Set up the screen\nwn = turtle.Screen()\n\
    wn.bgcolor(\"black\")\nturtle.speed(0)\nturtle.setheading(90)\nturtle.penup()\n\
    turtle.goto(-150, -200)\nturtle.pendown()\nturtle.pencolor('green')\n\n# Recursive\
    \ function to draw a tree\ndef draw_tree(branchLength):\n    angle = random.randint(15,45)\n\
    \    sf = random.uniform(0.6, 0.8) # scale factor for the branches\n\n    if branchLength\
    \ < 3: # Base case to stop recursion\n        return\n    else:\n        turtle.forward(branchLength)\n\
    \n        turtle.left(angle)\n        draw_tree(branchLength*sf)\n\n        turtle.right(angle*2)\n\
    \        draw_tree(branchLength*sf)\n\n        turtle.left(angle)\n\n        if\
    \ branchLength < 15: # To make sure the leaves are small\n            turtle.pencolor('green')\n\
    \            turtle.dot()\n\n        turtle.backward(branchLength)\n\n# Call the\
    \ function\ndraw_tree(75)\n\nturtle.done()\n````\n\n\nTry such quotatios on any\
    \ other open source llm ..good luck to run on first try or will never be working\
    \ code. Even if works is usually very basic snake game looks.  Or that tree is\
    \ broken badly.\nThis model is doing that without any problems even more complex\
    \ code .... is very comparable to GPT-4 exceeding GPT-3.5 easily.    \n\n"
  created_at: 2024-01-06 12:35:28+00:00
  edited: true
  hidden: false
  id: 65994910816bb94a4f35e7dd
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/19f9eeb9281b47b34f68c312092ca468.svg
      fullname: Yu
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Yhyu13
      type: user
    createdAt: '2024-01-06T16:34:37.000Z'
    data:
      edited: false
      editors:
      - Yhyu13
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.955748975276947
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/19f9eeb9281b47b34f68c312092ca468.svg
          fullname: Yu
          isHf: false
          isPro: false
          name: Yhyu13
          type: user
        html: '<p>Would you like to share things that amazed you? Just for us to sneak
          peek a little bit:)</p>

          '
        raw: Would you like to share things that amazed you? Just for us to sneak
          peek a little bit:)
        updatedAt: '2024-01-06T16:34:37.257Z'
      numEdits: 0
      reactions: []
    id: 6599811d5f7a6d40f71eba68
    type: comment
  author: Yhyu13
  content: Would you like to share things that amazed you? Just for us to sneak peek
    a little bit:)
  created_at: 2024-01-06 16:34:37+00:00
  edited: false
  hidden: false
  id: 6599811d5f7a6d40f71eba68
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
      fullname: Ziggy Stardust
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nurb432
      type: user
    createdAt: '2024-01-06T16:39:56.000Z'
    data:
      edited: true
      editors:
      - Nurb432
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.8461354374885559
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
          fullname: Ziggy Stardust
          isHf: false
          isPro: false
          name: Nurb432
          type: user
        html: '<p>Well.. my first super simple test, it botched a variable name when
          it used it later in the code. ( only about 5 lines as i start small, then
          work my way up..    easily fixable, but still.... ) EDIT: python .. forgot
          to include that.</p>

          '
        raw: 'Well.. my first super simple test, it botched a variable name when it
          used it later in the code. ( only about 5 lines as i start small, then work
          my way up..    easily fixable, but still.... ) EDIT: python .. forgot to
          include that.

          '
        updatedAt: '2024-01-06T16:43:24.690Z'
      numEdits: 1
      reactions: []
    id: 6599825cd3f2137415cf47e0
    type: comment
  author: Nurb432
  content: 'Well.. my first super simple test, it botched a variable name when it
    used it later in the code. ( only about 5 lines as i start small, then work my
    way up..    easily fixable, but still.... ) EDIT: python .. forgot to include
    that.

    '
  created_at: 2024-01-06 16:39:56+00:00
  edited: true
  hidden: false
  id: 6599825cd3f2137415cf47e0
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
      fullname: ko
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: mirek190
      type: user
    createdAt: '2024-01-06T17:00:57.000Z'
    data:
      edited: true
      editors:
      - mirek190
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7170978784561157
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
          fullname: ko
          isHf: false
          isPro: false
          name: mirek190
          type: user
        html: "<p>for me not making errors what I am surprised.<br>I'am using newest\
          \ llamacpp and model version q4k_m  ( old q4 is much worse )  </p>\n<p>My\
          \ code to run llamcpp</p>\n<pre><code>build\\bin\\main.exe --model models\\\
          new3\\wizardcoder-33b-v1.1.Q4_K_M.gguf --mlock --color --threads 16 --keep\
          \ -1 --batch_size 512 --n_predict -1 --repeat_penalty 1.1 --ctx_size 0 --interactive\
          \ --instruct --reverse-prompt \"&lt;|im_end|&gt;\" -ngl 58 --simple-io \
          \ --in-prefix \" ### Instruction: \" --in-suffix \" ### Response: \" -p\
          \ \"Below is an instruction that describes a task. Write a response that\
          \ appropriately completes the request. \"\n</code></pre>\n<p>Look on that\
          \ code :</p>\n<blockquote>\n<p>Can you make A snake game in python?</p>\n\
          </blockquote>\n<ul>\n<li>first try.  Look how long code is and was generated\
          \ without any errors also game looks ..decent. </li>\n<li>Even has working\
          \ score system.</li>\n</ul>\n<p><a rel=\"nofollow\" href=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/Bd784ycfp_76T0SJh-NYe.png\"\
          ><img alt=\"Screenshot 2024-01-06 164614.png\" src=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/Bd784ycfp_76T0SJh-NYe.png\"\
          ></a></p>\n<pre><code>import turtle\nimport time\nimport random\n\ndelay\
          \ = 0.1\nscore = 0\nhigh_score = 0\n\n# Set up the screen\nwn = turtle.Screen()\n\
          wn.title(\"Snake Game\")\nwn.bgcolor(\"black\")\nwn.setup(width=600, height=600)\n\
          wn.tracer(0)  # Turns off the screen updates\n\n# Snake head\nhead = turtle.Turtle()\n\
          head.speed(0)\nhead.shape(\"square\")\nhead.color(\"white\")\nhead.penup()\n\
          head.goto(0, 0)\nhead.direction = \"stop\"\n\n# Snake food\nfood = turtle.Turtle()\n\
          food.speed(0)\nfood.shape(\"circle\")\nfood.color(\"red\")\nfood.penup()\n\
          food.goto(random.randint(-290, 290), random.randint(-290, 290))\n\nsegments\
          \ = []\n\n# Pen\npen = turtle.Turtle()\npen.speed(0)\npen.shape(\"square\"\
          )\npen.color(\"white\")\npen.penup()\npen.hideturtle()\npen.goto(0, 260)\n\
          pen.write(\"Score: 0  High Score: 0\", align=\"center\", font=(\"Courier\"\
          , 24, \"normal\"))\n\n# Functions\ndef go_up():\n    if head.direction !=\
          \ \"down\":\n        head.direction = \"up\"\n\ndef go_down():\n    if head.direction\
          \ != \"up\":\n        head.direction = \"down\"\n\ndef go_left():\n    if\
          \ head.direction != \"right\":\n        head.direction = \"left\"\n\ndef\
          \ go_right():\n    if head.direction != \"left\":\n        head.direction\
          \ = \"right\"\n\ndef move():\n    if head.direction == \"up\":\n       \
          \ y = head.ycor()\n        head.sety(y + 20)\n\n    if head.direction ==\
          \ \"down\":\n        y = head.ycor()\n        head.sety(y - 20)\n\n    if\
          \ head.direction == \"left\":\n        x = head.xcor()\n        head.setx(x\
          \ - 20)\n\n    if head.direction == \"right\":\n        x = head.xcor()\n\
          \        head.setx(x + 20)\n\n# Keyboard bindings\nwn.listen()\nwn.onkeypress(go_up,\
          \ \"Up\")\nwn.onkeypress(go_down, \"Down\")\nwn.onkeypress(go_left, \"Left\"\
          )\nwn.onkeypress(go_right, \"Right\")\n\n# Main game loop\nwhile True:\n\
          \    wn.update()\n\n    # Check for a collision with the border\n    if\
          \ head.xcor()&gt;290 or head.xcor()&lt;-290 or head.ycor()&gt;290 or head.ycor()&lt;-290:\n\
          \        time.sleep(1)\n        head.goto(0,0)\n        head.direction =\
          \ \"stop\"\n\n        # Hide the segments\n        for segment in segments:\n\
          \            segment.goto(1000, 1000)\n\n        # Clear the segments list\n\
          \        segments.clear()\n\n        score = 0\n\n    # Check for a collision\
          \ with the food\n    if head.distance(food) &lt; 20:\n        x = random.randint(-290,\
          \ 290)\n        y = random.randint(-290, 290)\n        food.goto(x,y)\n\n\
          \        # Add a segment\n        new_segment = turtle.Turtle()\n      \
          \  new_segment.speed(0)\n        new_segment.shape(\"square\")\n       \
          \ new_segment.color(\"grey\")\n        new_segment.penup()\n        segments.append(new_segment)\n\
          \n        # Shorten the delay\n        delay -= 0.001\n\n        score +=\
          \ 10\n        if score &gt; high_score:\n            high_score = score\n\
          \n        pen.clear()\n        pen.write(\"Score: {}  High Score: {}\".format(score,\
          \ high_score), align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          \    # Move the end segments first in reverse order\n    for index in range(len(segments)-1,\
          \ 0, -1):\n        x = segments[index-1].xcor()\n        y = segments[index-1].ycor()\n\
          \        segments[index].goto(x, y)\n\n    # Move segment 0 to where the\
          \ head is\n    if len(segments) &gt; 0:\n        x = head.xcor()\n     \
          \   y = head.ycor()\n        segments[0].goto(x, y)\n\n    move()\n\n  \
          \  time.sleep(delay)\n\nwn.mainloop()\n</code></pre>\n<p>or </p>\n<blockquote>\n\
          <p>Provide complete working code for a realistic looking tree in Python\
          \ using the Turtle graphics library and a recursive algorithm.   </p>\n\
          </blockquote>\n<ul>\n<li>also first try.</li>\n</ul>\n<p><a rel=\"nofollow\"\
          \ href=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/zHg-IGWVhi9GEZ1V049xP.png\"\
          ><img alt=\"Screenshot 2024-01-06 165209.png\" src=\"https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/zHg-IGWVhi9GEZ1V049xP.png\"\
          ></a></p>\n<pre><code>import turtle\nimport random\n\n# Function to draw\
          \ trees using recursion\ndef draw_tree(branchLen,t):\n    if branchLen &gt;\
          \ 5: # Base case for recursive function\n        t.forward(branchLen)\n\
          \        t.right(20)\n        draw_tree(branchLen - 15,t) # Recursive call\
          \ to draw right branch of tree\n        t.left(40)\n        draw_tree(branchLen\
          \ - 15,t) # Recursive call to draw left branch of tree\n        t.right(20)\n\
          \        t.backward(branchLen) # Go back to the initial position after drawing\
          \ each branch\n    else:\n        return\n\ndef main():\n    myWin = turtle.Screen()\n\
          \    t = turtle.Turtle()\n\n    t.left(90)\n    t.up()\n    t.backward(100)\n\
          \    t.down()\n    t.color(\"green\")\n\n    # Draw a random tree with branch\
          \ length between 50 and 100\n    draw_tree(random.randint(50, 100),t)\n\
          \    myWin.exitonclick()\n\nmain()\n</code></pre>\n<p>Try such quotatios\
          \ on any other open source llm ..good luck to run on first try or will never\
          \ be working code. Even if works is usually very basic snake game looks.\
          \ Or that tree is broken badly.<br>This model is doing that without any\
          \ problems even more complex code .... is very comparable to GPT-4 exceeding\
          \ GPT-3.5 easily.    </p>\n"
        raw: "for me not making errors what I am surprised. \nI'am using newest llamacpp\
          \ and model version q4k_m  ( old q4 is much worse )  \n\nMy code to run\
          \ llamcpp\n````\nbuild\\bin\\main.exe --model models\\new3\\wizardcoder-33b-v1.1.Q4_K_M.gguf\
          \ --mlock --color --threads 16 --keep -1 --batch_size 512 --n_predict -1\
          \ --repeat_penalty 1.1 --ctx_size 0 --interactive --instruct --reverse-prompt\
          \ \"<|im_end|>\" -ngl 58 --simple-io  --in-prefix \" ### Instruction: \"\
          \ --in-suffix \" ### Response: \" -p \"Below is an instruction that describes\
          \ a task. Write a response that appropriately completes the request. \"\n\
          ````\n\nLook on that code :\n\n> Can you make A snake game in python?\n\n\
          - first try.  Look how long code is and was generated without any errors\
          \ also game looks ..decent. \n- Even has working score system.\n\n![Screenshot\
          \ 2024-01-06 164614.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/Bd784ycfp_76T0SJh-NYe.png)\n\
          \ \n````\nimport turtle\nimport time\nimport random\n\ndelay = 0.1\nscore\
          \ = 0\nhigh_score = 0\n\n# Set up the screen\nwn = turtle.Screen()\nwn.title(\"\
          Snake Game\")\nwn.bgcolor(\"black\")\nwn.setup(width=600, height=600)\n\
          wn.tracer(0)  # Turns off the screen updates\n\n# Snake head\nhead = turtle.Turtle()\n\
          head.speed(0)\nhead.shape(\"square\")\nhead.color(\"white\")\nhead.penup()\n\
          head.goto(0, 0)\nhead.direction = \"stop\"\n\n# Snake food\nfood = turtle.Turtle()\n\
          food.speed(0)\nfood.shape(\"circle\")\nfood.color(\"red\")\nfood.penup()\n\
          food.goto(random.randint(-290, 290), random.randint(-290, 290))\n\nsegments\
          \ = []\n\n# Pen\npen = turtle.Turtle()\npen.speed(0)\npen.shape(\"square\"\
          )\npen.color(\"white\")\npen.penup()\npen.hideturtle()\npen.goto(0, 260)\n\
          pen.write(\"Score: 0  High Score: 0\", align=\"center\", font=(\"Courier\"\
          , 24, \"normal\"))\n\n# Functions\ndef go_up():\n    if head.direction !=\
          \ \"down\":\n        head.direction = \"up\"\n\ndef go_down():\n    if head.direction\
          \ != \"up\":\n        head.direction = \"down\"\n\ndef go_left():\n    if\
          \ head.direction != \"right\":\n        head.direction = \"left\"\n\ndef\
          \ go_right():\n    if head.direction != \"left\":\n        head.direction\
          \ = \"right\"\n\ndef move():\n    if head.direction == \"up\":\n       \
          \ y = head.ycor()\n        head.sety(y + 20)\n\n    if head.direction ==\
          \ \"down\":\n        y = head.ycor()\n        head.sety(y - 20)\n\n    if\
          \ head.direction == \"left\":\n        x = head.xcor()\n        head.setx(x\
          \ - 20)\n\n    if head.direction == \"right\":\n        x = head.xcor()\n\
          \        head.setx(x + 20)\n\n# Keyboard bindings\nwn.listen()\nwn.onkeypress(go_up,\
          \ \"Up\")\nwn.onkeypress(go_down, \"Down\")\nwn.onkeypress(go_left, \"Left\"\
          )\nwn.onkeypress(go_right, \"Right\")\n\n# Main game loop\nwhile True:\n\
          \    wn.update()\n\n    # Check for a collision with the border\n    if\
          \ head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:\n\
          \        time.sleep(1)\n        head.goto(0,0)\n        head.direction =\
          \ \"stop\"\n\n        # Hide the segments\n        for segment in segments:\n\
          \            segment.goto(1000, 1000)\n\n        # Clear the segments list\n\
          \        segments.clear()\n\n        score = 0\n\n    # Check for a collision\
          \ with the food\n    if head.distance(food) < 20:\n        x = random.randint(-290,\
          \ 290)\n        y = random.randint(-290, 290)\n        food.goto(x,y)\n\n\
          \        # Add a segment\n        new_segment = turtle.Turtle()\n      \
          \  new_segment.speed(0)\n        new_segment.shape(\"square\")\n       \
          \ new_segment.color(\"grey\")\n        new_segment.penup()\n        segments.append(new_segment)\n\
          \n        # Shorten the delay\n        delay -= 0.001\n\n        score +=\
          \ 10\n        if score > high_score:\n            high_score = score\n\n\
          \        pen.clear()\n        pen.write(\"Score: {}  High Score: {}\".format(score,\
          \ high_score), align=\"center\", font=(\"Courier\", 24, \"normal\"))\n\n\
          \    # Move the end segments first in reverse order\n    for index in range(len(segments)-1,\
          \ 0, -1):\n        x = segments[index-1].xcor()\n        y = segments[index-1].ycor()\n\
          \        segments[index].goto(x, y)\n\n    # Move segment 0 to where the\
          \ head is\n    if len(segments) > 0:\n        x = head.xcor()\n        y\
          \ = head.ycor()\n        segments[0].goto(x, y)\n\n    move()\n\n    time.sleep(delay)\n\
          \nwn.mainloop()\n````\n\nor \n\n> Provide complete working code for a realistic\
          \ looking tree in Python using the Turtle graphics library and a recursive\
          \ algorithm.   \n-  also first try.\n\n![Screenshot 2024-01-06 165209.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/zHg-IGWVhi9GEZ1V049xP.png)\n\
          \n\n````\nimport turtle\nimport random\n\n# Function to draw trees using\
          \ recursion\ndef draw_tree(branchLen,t):\n    if branchLen > 5: # Base case\
          \ for recursive function\n        t.forward(branchLen)\n        t.right(20)\n\
          \        draw_tree(branchLen - 15,t) # Recursive call to draw right branch\
          \ of tree\n        t.left(40)\n        draw_tree(branchLen - 15,t) # Recursive\
          \ call to draw left branch of tree\n        t.right(20)\n        t.backward(branchLen)\
          \ # Go back to the initial position after drawing each branch\n    else:\n\
          \        return\n\ndef main():\n    myWin = turtle.Screen()\n    t = turtle.Turtle()\n\
          \n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"\
          green\")\n\n    # Draw a random tree with branch length between 50 and 100\n\
          \    draw_tree(random.randint(50, 100),t)\n    myWin.exitonclick()\n\nmain()\n\
          ````\n\nTry such quotatios on any other open source llm ..good luck to run\
          \ on first try or will never be working code. Even if works is usually very\
          \ basic snake game looks. Or that tree is broken badly.\nThis model is doing\
          \ that without any problems even more complex code .... is very comparable\
          \ to GPT-4 exceeding GPT-3.5 easily.    "
        updatedAt: '2024-01-06T17:53:58.231Z'
      numEdits: 2
      reactions: []
    id: 65998749351b289063f1b555
    type: comment
  author: mirek190
  content: "for me not making errors what I am surprised. \nI'am using newest llamacpp\
    \ and model version q4k_m  ( old q4 is much worse )  \n\nMy code to run llamcpp\n\
    ````\nbuild\\bin\\main.exe --model models\\new3\\wizardcoder-33b-v1.1.Q4_K_M.gguf\
    \ --mlock --color --threads 16 --keep -1 --batch_size 512 --n_predict -1 --repeat_penalty\
    \ 1.1 --ctx_size 0 --interactive --instruct --reverse-prompt \"<|im_end|>\" -ngl\
    \ 58 --simple-io  --in-prefix \" ### Instruction: \" --in-suffix \" ### Response:\
    \ \" -p \"Below is an instruction that describes a task. Write a response that\
    \ appropriately completes the request. \"\n````\n\nLook on that code :\n\n> Can\
    \ you make A snake game in python?\n\n- first try.  Look how long code is and\
    \ was generated without any errors also game looks ..decent. \n- Even has working\
    \ score system.\n\n![Screenshot 2024-01-06 164614.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/Bd784ycfp_76T0SJh-NYe.png)\n\
    \ \n````\nimport turtle\nimport time\nimport random\n\ndelay = 0.1\nscore = 0\n\
    high_score = 0\n\n# Set up the screen\nwn = turtle.Screen()\nwn.title(\"Snake\
    \ Game\")\nwn.bgcolor(\"black\")\nwn.setup(width=600, height=600)\nwn.tracer(0)\
    \  # Turns off the screen updates\n\n# Snake head\nhead = turtle.Turtle()\nhead.speed(0)\n\
    head.shape(\"square\")\nhead.color(\"white\")\nhead.penup()\nhead.goto(0, 0)\n\
    head.direction = \"stop\"\n\n# Snake food\nfood = turtle.Turtle()\nfood.speed(0)\n\
    food.shape(\"circle\")\nfood.color(\"red\")\nfood.penup()\nfood.goto(random.randint(-290,\
    \ 290), random.randint(-290, 290))\n\nsegments = []\n\n# Pen\npen = turtle.Turtle()\n\
    pen.speed(0)\npen.shape(\"square\")\npen.color(\"white\")\npen.penup()\npen.hideturtle()\n\
    pen.goto(0, 260)\npen.write(\"Score: 0  High Score: 0\", align=\"center\", font=(\"\
    Courier\", 24, \"normal\"))\n\n# Functions\ndef go_up():\n    if head.direction\
    \ != \"down\":\n        head.direction = \"up\"\n\ndef go_down():\n    if head.direction\
    \ != \"up\":\n        head.direction = \"down\"\n\ndef go_left():\n    if head.direction\
    \ != \"right\":\n        head.direction = \"left\"\n\ndef go_right():\n    if\
    \ head.direction != \"left\":\n        head.direction = \"right\"\n\ndef move():\n\
    \    if head.direction == \"up\":\n        y = head.ycor()\n        head.sety(y\
    \ + 20)\n\n    if head.direction == \"down\":\n        y = head.ycor()\n     \
    \   head.sety(y - 20)\n\n    if head.direction == \"left\":\n        x = head.xcor()\n\
    \        head.setx(x - 20)\n\n    if head.direction == \"right\":\n        x =\
    \ head.xcor()\n        head.setx(x + 20)\n\n# Keyboard bindings\nwn.listen()\n\
    wn.onkeypress(go_up, \"Up\")\nwn.onkeypress(go_down, \"Down\")\nwn.onkeypress(go_left,\
    \ \"Left\")\nwn.onkeypress(go_right, \"Right\")\n\n# Main game loop\nwhile True:\n\
    \    wn.update()\n\n    # Check for a collision with the border\n    if head.xcor()>290\
    \ or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:\n        time.sleep(1)\n\
    \        head.goto(0,0)\n        head.direction = \"stop\"\n\n        # Hide the\
    \ segments\n        for segment in segments:\n            segment.goto(1000, 1000)\n\
    \n        # Clear the segments list\n        segments.clear()\n\n        score\
    \ = 0\n\n    # Check for a collision with the food\n    if head.distance(food)\
    \ < 20:\n        x = random.randint(-290, 290)\n        y = random.randint(-290,\
    \ 290)\n        food.goto(x,y)\n\n        # Add a segment\n        new_segment\
    \ = turtle.Turtle()\n        new_segment.speed(0)\n        new_segment.shape(\"\
    square\")\n        new_segment.color(\"grey\")\n        new_segment.penup()\n\
    \        segments.append(new_segment)\n\n        # Shorten the delay\n       \
    \ delay -= 0.001\n\n        score += 10\n        if score > high_score:\n    \
    \        high_score = score\n\n        pen.clear()\n        pen.write(\"Score:\
    \ {}  High Score: {}\".format(score, high_score), align=\"center\", font=(\"Courier\"\
    , 24, \"normal\"))\n\n    # Move the end segments first in reverse order\n   \
    \ for index in range(len(segments)-1, 0, -1):\n        x = segments[index-1].xcor()\n\
    \        y = segments[index-1].ycor()\n        segments[index].goto(x, y)\n\n\
    \    # Move segment 0 to where the head is\n    if len(segments) > 0:\n      \
    \  x = head.xcor()\n        y = head.ycor()\n        segments[0].goto(x, y)\n\n\
    \    move()\n\n    time.sleep(delay)\n\nwn.mainloop()\n````\n\nor \n\n> Provide\
    \ complete working code for a realistic looking tree in Python using the Turtle\
    \ graphics library and a recursive algorithm.   \n-  also first try.\n\n![Screenshot\
    \ 2024-01-06 165209.png](https://cdn-uploads.huggingface.co/production/uploads/6345b208a8c2ff9f13784968/zHg-IGWVhi9GEZ1V049xP.png)\n\
    \n\n````\nimport turtle\nimport random\n\n# Function to draw trees using recursion\n\
    def draw_tree(branchLen,t):\n    if branchLen > 5: # Base case for recursive function\n\
    \        t.forward(branchLen)\n        t.right(20)\n        draw_tree(branchLen\
    \ - 15,t) # Recursive call to draw right branch of tree\n        t.left(40)\n\
    \        draw_tree(branchLen - 15,t) # Recursive call to draw left branch of tree\n\
    \        t.right(20)\n        t.backward(branchLen) # Go back to the initial position\
    \ after drawing each branch\n    else:\n        return\n\ndef main():\n    myWin\
    \ = turtle.Screen()\n    t = turtle.Turtle()\n\n    t.left(90)\n    t.up()\n \
    \   t.backward(100)\n    t.down()\n    t.color(\"green\")\n\n    # Draw a random\
    \ tree with branch length between 50 and 100\n    draw_tree(random.randint(50,\
    \ 100),t)\n    myWin.exitonclick()\n\nmain()\n````\n\nTry such quotatios on any\
    \ other open source llm ..good luck to run on first try or will never be working\
    \ code. Even if works is usually very basic snake game looks. Or that tree is\
    \ broken badly.\nThis model is doing that without any problems even more complex\
    \ code .... is very comparable to GPT-4 exceeding GPT-3.5 easily.    "
  created_at: 2024-01-06 17:00:57+00:00
  edited: true
  hidden: false
  id: 65998749351b289063f1b555
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/c82779fdf94f80cdb5020504f83c818b.svg
      fullname: Yatharth  Sharma
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: YaTharThShaRma999
      type: user
    createdAt: '2024-01-06T22:24:57.000Z'
    data:
      edited: false
      editors:
      - YaTharThShaRma999
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9740239381790161
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/c82779fdf94f80cdb5020504f83c818b.svg
          fullname: Yatharth  Sharma
          isHf: false
          isPro: false
          name: YaTharThShaRma999
          type: user
        html: "<p><span data-props=\"{&quot;user&quot;:&quot;mirek190&quot;}\" data-target=\"\
          UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\">\n\n<span class=\"\
          inline-block\"><span class=\"contents\"><a href=\"/mirek190\">@<span class=\"\
          underline\">mirek190</span></a></span>\n\n\t</span></span> yeah it probably\
          \ is pretty good at coding since it uses deepseek coder as base model which\
          \ alone is comparable or even better then phind. Then extra finetuning probably\
          \ made it even better. I would say those are simple questions and most models\
          \ are probably trained on them but it probably is still one of the best\
          \ if not the best oss coder model.</p>\n"
        raw: '@mirek190 yeah it probably is pretty good at coding since it uses deepseek
          coder as base model which alone is comparable or even better then phind.
          Then extra finetuning probably made it even better. I would say those are
          simple questions and most models are probably trained on them but it probably
          is still one of the best if not the best oss coder model.'
        updatedAt: '2024-01-06T22:24:57.588Z'
      numEdits: 0
      reactions: []
    id: 6599d33928676374f39668e7
    type: comment
  author: YaTharThShaRma999
  content: '@mirek190 yeah it probably is pretty good at coding since it uses deepseek
    coder as base model which alone is comparable or even better then phind. Then
    extra finetuning probably made it even better. I would say those are simple questions
    and most models are probably trained on them but it probably is still one of the
    best if not the best oss coder model.'
  created_at: 2024-01-06 22:24:57+00:00
  edited: false
  hidden: false
  id: 6599d33928676374f39668e7
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
      fullname: Ziggy Stardust
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nurb432
      type: user
    createdAt: '2024-01-06T22:45:14.000Z'
    data:
      edited: false
      editors:
      - Nurb432
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9353808164596558
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
          fullname: Ziggy Stardust
          isHf: false
          isPro: false
          name: Nurb432
          type: user
        html: '<p>I wonder if he has a 13 and a 7 planned for update too,  python
          oriented . </p>

          '
        raw: 'I wonder if he has a 13 and a 7 planned for update too,  python oriented
          . '
        updatedAt: '2024-01-06T22:45:14.306Z'
      numEdits: 0
      reactions: []
    id: 6599d7faa3259bc417e2da1d
    type: comment
  author: Nurb432
  content: 'I wonder if he has a 13 and a 7 planned for update too,  python oriented
    . '
  created_at: 2024-01-06 22:45:14+00:00
  edited: false
  hidden: false
  id: 6599d7faa3259bc417e2da1d
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
      fullname: ko
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: mirek190
      type: user
    createdAt: '2024-01-07T00:52:48.000Z'
    data:
      edited: true
      editors:
      - mirek190
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9547625184059143
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
          fullname: ko
          isHf: false
          isPro: false
          name: mirek190
          type: user
        html: "<blockquote>\n<p><span data-props=\"{&quot;user&quot;:&quot;mirek190&quot;}\"\
          \ data-target=\"UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\"\
          >\n\n<span class=\"inline-block\"><span class=\"contents\"><a href=\"/mirek190\"\
          >@<span class=\"underline\">mirek190</span></a></span>\n\n\t</span></span>\
          \ yeah it probably is pretty good at coding since it uses deepseek coder\
          \ as base model which alone is comparable or even better then phind. Then\
          \ extra finetuning probably made it even better. I would say those are simple\
          \ questions and most models are probably trained on them but it probably\
          \ is still one of the best if not the best oss coder model.</p>\n</blockquote>\n\
          <p>I tested and used phind model.<br>The new wizard coder 33b v1.1 is far\
          \ more ahead ...really close to gpt-4 or in some aspect the same level .</p>\n"
        raw: "> @mirek190 yeah it probably is pretty good at coding since it uses\
          \ deepseek coder as base model which alone is comparable or even better\
          \ then phind. Then extra finetuning probably made it even better. I would\
          \ say those are simple questions and most models are probably trained on\
          \ them but it probably is still one of the best if not the best oss coder\
          \ model.\n\nI tested and used phind model. \nThe new wizard coder 33b v1.1\
          \ is far more ahead ...really close to gpt-4 or in some aspect the same\
          \ level .\n"
        updatedAt: '2024-01-07T00:54:26.350Z'
      numEdits: 1
      reactions: []
    id: 6599f5e0e1604bf99681617e
    type: comment
  author: mirek190
  content: "> @mirek190 yeah it probably is pretty good at coding since it uses deepseek\
    \ coder as base model which alone is comparable or even better then phind. Then\
    \ extra finetuning probably made it even better. I would say those are simple\
    \ questions and most models are probably trained on them but it probably is still\
    \ one of the best if not the best oss coder model.\n\nI tested and used phind\
    \ model. \nThe new wizard coder 33b v1.1 is far more ahead ...really close to\
    \ gpt-4 or in some aspect the same level .\n"
  created_at: 2024-01-07 00:52:48+00:00
  edited: true
  hidden: false
  id: 6599f5e0e1604bf99681617e
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/4b954dcff7739057e105c6e9019d7ca2.svg
      fullname: Nicki Gataro
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ceoofcapybaras
      type: user
    createdAt: '2024-01-21T15:33:25.000Z'
    data:
      edited: false
      editors:
      - ceoofcapybaras
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9127914905548096
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/4b954dcff7739057e105c6e9019d7ca2.svg
          fullname: Nicki Gataro
          isHf: false
          isPro: false
          name: ceoofcapybaras
          type: user
        html: '<p>I asked it to compare two variations of code and point out the differences
          and it outputs total nonsense about the code but not about the differences,
          worse than GPT-3, no matter how much I change the prompt, generation parameters
          and with max_tokens of 1k. I am testing on Q4K_S. Maybe it''s good for text
          to code task, but not for comparison.</p>

          '
        raw: I asked it to compare two variations of code and point out the differences
          and it outputs total nonsense about the code but not about the differences,
          worse than GPT-3, no matter how much I change the prompt, generation parameters
          and with max_tokens of 1k. I am testing on Q4K_S. Maybe it's good for text
          to code task, but not for comparison.
        updatedAt: '2024-01-21T15:33:25.023Z'
      numEdits: 0
      reactions: []
    id: 65ad3945f9e55b5f757856df
    type: comment
  author: ceoofcapybaras
  content: I asked it to compare two variations of code and point out the differences
    and it outputs total nonsense about the code but not about the differences, worse
    than GPT-3, no matter how much I change the prompt, generation parameters and
    with max_tokens of 1k. I am testing on Q4K_S. Maybe it's good for text to code
    task, but not for comparison.
  created_at: 2024-01-21 15:33:25+00:00
  edited: false
  hidden: false
  id: 65ad3945f9e55b5f757856df
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
      fullname: Ziggy Stardust
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nurb432
      type: user
    createdAt: '2024-01-21T15:47:34.000Z'
    data:
      edited: false
      editors:
      - Nurb432
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9667018055915833
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
          fullname: Ziggy Stardust
          isHf: false
          isPro: false
          name: Nurb432
          type: user
        html: '<p>Q4k is pretty light... id not expect greatness from that myself
          </p>

          '
        raw: 'Q4k is pretty light... id not expect greatness from that myself '
        updatedAt: '2024-01-21T15:47:34.090Z'
      numEdits: 0
      reactions: []
    id: 65ad3c96356bf23b4a5fc342
    type: comment
  author: Nurb432
  content: 'Q4k is pretty light... id not expect greatness from that myself '
  created_at: 2024-01-21 15:47:34+00:00
  edited: false
  hidden: false
  id: 65ad3c96356bf23b4a5fc342
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/4b954dcff7739057e105c6e9019d7ca2.svg
      fullname: Nicki Gataro
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ceoofcapybaras
      type: user
    createdAt: '2024-01-21T17:27:14.000Z'
    data:
      edited: false
      editors:
      - ceoofcapybaras
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.8728210926055908
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/4b954dcff7739057e105c6e9019d7ca2.svg
          fullname: Nicki Gataro
          isHf: false
          isPro: false
          name: ceoofcapybaras
          type: user
        html: '<p>Just tried wizardcoder-python-13b-v1.0.Q4_K. Asked a few questions
          first to 33B and then to 13B-python, questions like how to convert a specific
          decorator syntax into a regular function call, how to setup redis in persistent
          mode, a single-line shell snippet to output env.variables using python.
          33B failed almost all of these questions, even with hints. 13B answered
          correctly within 3 attempts.</p>

          '
        raw: Just tried wizardcoder-python-13b-v1.0.Q4_K. Asked a few questions first
          to 33B and then to 13B-python, questions like how to convert a specific
          decorator syntax into a regular function call, how to setup redis in persistent
          mode, a single-line shell snippet to output env.variables using python.
          33B failed almost all of these questions, even with hints. 13B answered
          correctly within 3 attempts.
        updatedAt: '2024-01-21T17:27:14.448Z'
      numEdits: 0
      reactions: []
    id: 65ad53f2c2eef2ba1153974c
    type: comment
  author: ceoofcapybaras
  content: Just tried wizardcoder-python-13b-v1.0.Q4_K. Asked a few questions first
    to 33B and then to 13B-python, questions like how to convert a specific decorator
    syntax into a regular function call, how to setup redis in persistent mode, a
    single-line shell snippet to output env.variables using python. 33B failed almost
    all of these questions, even with hints. 13B answered correctly within 3 attempts.
  created_at: 2024-01-21 17:27:14+00:00
  edited: false
  hidden: false
  id: 65ad53f2c2eef2ba1153974c
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
      fullname: ko
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: mirek190
      type: user
    createdAt: '2024-01-21T18:50:16.000Z'
    data:
      edited: false
      editors:
      - mirek190
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9673287868499756
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
          fullname: ko
          isHf: false
          isPro: false
          name: mirek190
          type: user
        html: '<p>Strange for me works as harm 13b version is not even close to this
          one. </p>

          <p>Try also codebooga-34b-v0.1</p>

          '
        raw: "Strange for me works as harm 13b version is not even close to this one.\
          \ \n\nTry also codebooga-34b-v0.1"
        updatedAt: '2024-01-21T18:50:16.866Z'
      numEdits: 0
      reactions: []
    id: 65ad6768819fbfaf494d8642
    type: comment
  author: mirek190
  content: "Strange for me works as harm 13b version is not even close to this one.\
    \ \n\nTry also codebooga-34b-v0.1"
  created_at: 2024-01-21 18:50:16+00:00
  edited: false
  hidden: false
  id: 65ad6768819fbfaf494d8642
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
      fullname: Ziggy Stardust
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nurb432
      type: user
    createdAt: '2024-01-21T21:40:40.000Z'
    data:
      edited: false
      editors:
      - Nurb432
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9940587878227234
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
          fullname: Ziggy Stardust
          isHf: false
          isPro: false
          name: Nurb432
          type: user
        html: '<blockquote>

          <p>Try also codebooga-34b-v0.1</p>

          </blockquote>

          <p>Well, i didnt know he was doing his own models now. I will also have
          to try that.</p>

          <p>And for what its worth mixtral-8x7b-instruct-v0.1 has been doing great
          for me in early testing. Much better than others so far ( python code )</p>

          '
        raw: '> Try also codebooga-34b-v0.1


          Well, i didnt know he was doing his own models now. I will also have to
          try that.


          And for what its worth mixtral-8x7b-instruct-v0.1 has been doing great for
          me in early testing. Much better than others so far ( python code )



          '
        updatedAt: '2024-01-21T21:40:40.188Z'
      numEdits: 0
      reactions: []
    id: 65ad8f58e2a2c86356671f71
    type: comment
  author: Nurb432
  content: '> Try also codebooga-34b-v0.1


    Well, i didnt know he was doing his own models now. I will also have to try that.


    And for what its worth mixtral-8x7b-instruct-v0.1 has been doing great for me
    in early testing. Much better than others so far ( python code )



    '
  created_at: 2024-01-21 21:40:40+00:00
  edited: false
  hidden: false
  id: 65ad8f58e2a2c86356671f71
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
      fullname: ko
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: mirek190
      type: user
    createdAt: '2024-01-21T22:32:57.000Z'
    data:
      edited: true
      editors:
      - mirek190
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9662100672721863
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/8796019821146893ce5150cec2573a12.svg
          fullname: ko
          isHf: false
          isPro: false
          name: mirek190
          type: user
        html: '<blockquote>

          <blockquote>

          <p>Try also codebooga-34b-v0.1</p>

          </blockquote>

          <p>Well, i didnt know he was doing his own models now. I will also have
          to try that.</p>

          <p>And for what its worth mixtral-8x7b-instruct-v0.1 has been doing great
          for me in early testing. Much better than others so far ( python code )</p>

          </blockquote>

          <p>Mixtral-8x7b-instruct-v0.1 is great without the doubt but specialized
          WizardCoder-33B-V1.1 is better for coding from my tests.<br>Maybe mixtral-8x7b-instruct-v0.1
          works for you better because you are using intensive reasoning from llm
          for coding and mixtral-8x7b-instruct-v0.1 is the best right now in it and
          common sense.    </p>

          <p>also humaneval (coding):<br>wizardCoder-33B-V1.1                  - 79.9<br>wizardcoder-python-13b-v1.0   -
          62.19<br>mixtral-8x7b-instruct-v0.1           - 40.2<br>codebooga-34b-v0.1                      -
          71.3</p>

          '
        raw: "> > Try also codebooga-34b-v0.1\n> \n> Well, i didnt know he was doing\
          \ his own models now. I will also have to try that.\n> \n> And for what\
          \ its worth mixtral-8x7b-instruct-v0.1 has been doing great for me in early\
          \ testing. Much better than others so far ( python code )\n\nMixtral-8x7b-instruct-v0.1\
          \ is great without the doubt but specialized WizardCoder-33B-V1.1 is better\
          \ for coding from my tests. \nMaybe mixtral-8x7b-instruct-v0.1 works for\
          \ you better because you are using intensive reasoning from llm for coding\
          \ and mixtral-8x7b-instruct-v0.1 is the best right now in it and common\
          \ sense.    \n\nalso humaneval (coding):\nwizardCoder-33B-V1.1         \
          \         - 79.9\nwizardcoder-python-13b-v1.0   - 62.19\nmixtral-8x7b-instruct-v0.1\
          \           - 40.2\ncodebooga-34b-v0.1                      - 71.3\n"
        updatedAt: '2024-01-21T22:43:38.081Z'
      numEdits: 3
      reactions: []
    id: 65ad9b995df673eec6947466
    type: comment
  author: mirek190
  content: "> > Try also codebooga-34b-v0.1\n> \n> Well, i didnt know he was doing\
    \ his own models now. I will also have to try that.\n> \n> And for what its worth\
    \ mixtral-8x7b-instruct-v0.1 has been doing great for me in early testing. Much\
    \ better than others so far ( python code )\n\nMixtral-8x7b-instruct-v0.1 is great\
    \ without the doubt but specialized WizardCoder-33B-V1.1 is better for coding\
    \ from my tests. \nMaybe mixtral-8x7b-instruct-v0.1 works for you better because\
    \ you are using intensive reasoning from llm for coding and mixtral-8x7b-instruct-v0.1\
    \ is the best right now in it and common sense.    \n\nalso humaneval (coding):\n\
    wizardCoder-33B-V1.1                  - 79.9\nwizardcoder-python-13b-v1.0   -\
    \ 62.19\nmixtral-8x7b-instruct-v0.1           - 40.2\ncodebooga-34b-v0.1     \
    \                 - 71.3\n"
  created_at: 2024-01-21 22:32:57+00:00
  edited: true
  hidden: false
  id: 65ad9b995df673eec6947466
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
      fullname: Ziggy Stardust
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nurb432
      type: user
    createdAt: '2024-01-21T23:24:12.000Z'
    data:
      edited: false
      editors:
      - Nurb432
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9734320640563965
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/c7e4979f04fda14b73a43c398ce7da27.svg
          fullname: Ziggy Stardust
          isHf: false
          isPro: false
          name: Nurb432
          type: user
        html: '<p>i do the same exact wording for all my tests and i think they are
          simple and clearly laid out.  But, ya it still could be my prompts/thinking.  its
          more art than science :) </p>

          '
        raw: 'i do the same exact wording for all my tests and i think they are simple
          and clearly laid out.  But, ya it still could be my prompts/thinking.  its
          more art than science :) '
        updatedAt: '2024-01-21T23:24:12.134Z'
      numEdits: 0
      reactions: []
    id: 65ada79c3b9e1f0f30ad5ef0
    type: comment
  author: Nurb432
  content: 'i do the same exact wording for all my tests and i think they are simple
    and clearly laid out.  But, ya it still could be my prompts/thinking.  its more
    art than science :) '
  created_at: 2024-01-21 23:24:12+00:00
  edited: false
  hidden: false
  id: 65ada79c3b9e1f0f30ad5ef0
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: TheBloke/WizardCoder-33B-V1.1-GGUF
repo_type: model
status: open
target_branch: null
title: WOW ..just wow
