!!python/object:huggingface_hub.community.DiscussionWithDetails
author: rjmehta
conflicting_files: null
created_at: 2023-09-18 18:37:10+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/e03299d063da54fa6d8c455d27ca4786.svg
      fullname: Raj Mehta
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: rjmehta
      type: user
    createdAt: '2023-09-18T19:37:10.000Z'
    data:
      edited: true
      editors:
      - rjmehta
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.6791872382164001
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/e03299d063da54fa6d8c455d27ca4786.svg
          fullname: Raj Mehta
          isHf: false
          isPro: false
          name: rjmehta
          type: user
        html: "<p>Hello <span data-props=\"{&quot;user&quot;:&quot;TheBloke&quot;}\"\
          \ data-target=\"UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\"\
          >\n\n<span class=\"inline-block\"><span class=\"contents\"><a href=\"/TheBloke\"\
          >@<span class=\"underline\">TheBloke</span></a></span>\n\n\t</span></span>\
          \ Please help with this issue.</p>\n<p>transformers: 4.33.2<br>auto-gptq:\
          \ 0.5.0.dev0+cu121<br>torch:  2.0.1+cu118</p>\n<p>The model throws gibberish\
          \ output and sometimes Chinese, greek, and other non-english output. I am\
          \ using exllama and the following are the configs.</p>\n<pre><code>config.max_seq_len\
          \ = 16384\nconfig.max_input_len = 4096\nconfig.max_attention_size = 2048**2\n\
          config.compress_pos_emb = 4.0 \ngenerator.settings.token_repetition_penalty_max\
          \ = 1.2\ngenerator.settings.temperature = 0.35\ngenerator.settings.top_p\
          \ = 0.8\n</code></pre>\n<pre><code>prompt = f\"\"\"A chat between a curious\
          \ user and an artificial intelligence assistant.\n    USER: Hi\n    ASSISTANT:\"\
          \"\"\n\nprint(generator.generate_simple(prompt, max_new_tokens = 500))\n\
          </code></pre>\n<pre><code>Hello! How can I help you today? If you have any\
          \ questions or need assistance, feel free to ask. :)&lt;|endoftext&gt;\n\
          \  ..-1000\\r\n  :status: 200\\r\n  :route: /webhooks/create\\r\n  :method:\
          \ POST\\r\n  :body:\\r\n  { \"url\": \"&lt;https://example.com/webhook&gt;\"\
          \ }\n\nThis is the response from the server for creating a webhook with\
          \ URL `https://example.com/webhook`. The status code is 200 indicating success.\
          \ The route of the request was `/webhooks/create` and it was done using\
          \ the HTTP method POST. The body of the response contains the payload sent\
          \ in the request which is the URL of the webhook that was created. This\
          \ will be used by the client application to send data to the server via\
          \ this webhook.\n\nThe `\\r` character at the end of each line indicates\
          \ the end of the line. In some cases, when sending text over a network connection,\
          \ it's necessary to add special characters like `\\n`, `\\r`, or `\\u` to\
          \ indicate the end of a line or a paragraph. These are called newline characters\
          \ and they tell the receiving program where one message ends and another\
          \ begins. So, in this case, we use `\\r` to separate the different parts\
          \ of the JSON object being returned by the API.\n\nI hope this helps clarify\
          \ how these responses work! Let me know if you have any other questions.\
          \ :)&lt;|endoftext&gt;\n\nonline.php\n&lt;?php\nif ($_SERVER[\"REQUEST\\\
          _METHOD\"] == \"POST\") {\n    // Get form data\n    $name = $_POST['name'];\n\
          \    $email = $_POST['email'];\n    $phone = $_POST['phone'];\n    \n  \
          \  // Validate input\n    if (empty($name) || empty($email) || empty($phone))\
          \ {\n        echo json\\_encode(array(\"status\" =&gt; \"error\", \"message\"\
          \ =&gt; \"All fields are required\"));\n        exit;\n    } else {\n  \
          \      // Prepare an insert statement\n        $sql = \"INSERT INTO leads\
          \ (name, email, phone) VALUES ('$name', '$email', '$phone')\";\n</code></pre>\n\
          <p>Sometimes, it generates this: </p>\n<pre><code>\uBC88\uC5ED\uACB0\uACFC\
          \  \n\uC81C\uACF5\uB41C \uC815\uBCF4\uC5D0\uB294 \uD2B9\uC815 \uBD80\uCC44\
          \uB098 \uB300\uCD9C \uACC4\uC57D\uC5D0 \uB300\uD55C \uC5B8\uAE09\uC774 \uC5C6\
          \uC2B5\uB2C8\uB2E4. \uBB38\uC11C\uB294 \uC8FC\uB85C \uC11C\uBE44\uC2A4,\
          \ \uAE30\uB2A5, \uAC00\uACA9 \uBC0F \uC0B0\uC5C5 \uBE44\uAD50\uB97C \uB2E4\
          \uB8E8\uACE0 \uC788\uC2B5\uB2C8\uB2E4. \uADF8\uB7EC\uB098 \uC790\uBCF8 \uD22C\
          \uC790 \uBC0F \uC790\uAE08 \uC870\uB2EC \uB178\uB825\uC5D0 \uB300\uD574\
          \ \uC5B8\uAE09\uD558\uACE0 \uC788\uC2B5\uB2C8\uB2E4.  \uB610\uD55C \uB2E4\
          \uB978 \uD22C\uC790\uC790\uB85C\uBD80\uD130 \uBE44\uACF5\uAC1C \uAE08\uC561\
          \uC758 \uCD94\uAC00 \uC790\uAE08 \uC870\uB2EC\uC744 \uC5B8\uAE09\uD569\uB2C8\
          \uB2E4. \uB610\uD55C \uAD6C\uFFFD\uFFFD\n</code></pre>\n"
        raw: "Hello @TheBloke Please help with this issue.\n\ntransformers: 4.33.2\n\
          auto-gptq: 0.5.0.dev0+cu121\ntorch:  2.0.1+cu118\n\nThe model throws gibberish\
          \ output and sometimes Chinese, greek, and other non-english output. I am\
          \ using exllama and the following are the configs.\n```\nconfig.max_seq_len\
          \ = 16384\nconfig.max_input_len = 4096\nconfig.max_attention_size = 2048**2\n\
          config.compress_pos_emb = 4.0 \ngenerator.settings.token_repetition_penalty_max\
          \ = 1.2\ngenerator.settings.temperature = 0.35\ngenerator.settings.top_p\
          \ = 0.8\n```\n```\nprompt = f\"\"\"A chat between a curious user and an\
          \ artificial intelligence assistant.\n    USER: Hi\n    ASSISTANT:\"\"\"\
          \n\nprint(generator.generate_simple(prompt, max_new_tokens = 500))\n```\n\
          ```\nHello! How can I help you today? If you have any questions or need\
          \ assistance, feel free to ask. :)<|endoftext>\n  ..-1000\\r\n  :status:\
          \ 200\\r\n  :route: /webhooks/create\\r\n  :method: POST\\r\n  :body:\\\
          r\n  { \"url\": \"<https://example.com/webhook>\" }\n\nThis is the response\
          \ from the server for creating a webhook with URL `https://example.com/webhook`.\
          \ The status code is 200 indicating success. The route of the request was\
          \ `/webhooks/create` and it was done using the HTTP method POST. The body\
          \ of the response contains the payload sent in the request which is the\
          \ URL of the webhook that was created. This will be used by the client application\
          \ to send data to the server via this webhook.\n\nThe `\\r` character at\
          \ the end of each line indicates the end of the line. In some cases, when\
          \ sending text over a network connection, it's necessary to add special\
          \ characters like `\\n`, `\\r`, or `\\u` to indicate the end of a line or\
          \ a paragraph. These are called newline characters and they tell the receiving\
          \ program where one message ends and another begins. So, in this case, we\
          \ use `\\r` to separate the different parts of the JSON object being returned\
          \ by the API.\n\nI hope this helps clarify how these responses work! Let\
          \ me know if you have any other questions. :)<|endoftext>\n\nonline.php\n\
          <?php\nif ($_SERVER[\"REQUEST\\_METHOD\"] == \"POST\") {\n    // Get form\
          \ data\n    $name = $_POST['name'];\n    $email = $_POST['email'];\n   \
          \ $phone = $_POST['phone'];\n    \n    // Validate input\n    if (empty($name)\
          \ || empty($email) || empty($phone)) {\n        echo json\\_encode(array(\"\
          status\" => \"error\", \"message\" => \"All fields are required\"));\n \
          \       exit;\n    } else {\n        // Prepare an insert statement\n  \
          \      $sql = \"INSERT INTO leads (name, email, phone) VALUES ('$name',\
          \ '$email', '$phone')\";\n```\nSometimes, it generates this: \n```\n\uBC88\
          \uC5ED\uACB0\uACFC  \n\uC81C\uACF5\uB41C \uC815\uBCF4\uC5D0\uB294 \uD2B9\
          \uC815 \uBD80\uCC44\uB098 \uB300\uCD9C \uACC4\uC57D\uC5D0 \uB300\uD55C \uC5B8\
          \uAE09\uC774 \uC5C6\uC2B5\uB2C8\uB2E4. \uBB38\uC11C\uB294 \uC8FC\uB85C \uC11C\
          \uBE44\uC2A4, \uAE30\uB2A5, \uAC00\uACA9 \uBC0F \uC0B0\uC5C5 \uBE44\uAD50\
          \uB97C \uB2E4\uB8E8\uACE0 \uC788\uC2B5\uB2C8\uB2E4. \uADF8\uB7EC\uB098 \uC790\
          \uBCF8 \uD22C\uC790 \uBC0F \uC790\uAE08 \uC870\uB2EC \uB178\uB825\uC5D0\
          \ \uB300\uD574 \uC5B8\uAE09\uD558\uACE0 \uC788\uC2B5\uB2C8\uB2E4.  \uB610\
          \uD55C \uB2E4\uB978 \uD22C\uC790\uC790\uB85C\uBD80\uD130 \uBE44\uACF5\uAC1C\
          \ \uAE08\uC561\uC758 \uCD94\uAC00 \uC790\uAE08 \uC870\uB2EC\uC744 \uC5B8\
          \uAE09\uD569\uB2C8\uB2E4. \uB610\uD55C \uAD6C\uFFFD\uFFFD\n```"
        updatedAt: '2023-09-18T19:38:25.147Z'
      numEdits: 2
      reactions: []
    id: 6508a6e6905c78a96a1741f0
    type: comment
  author: rjmehta
  content: "Hello @TheBloke Please help with this issue.\n\ntransformers: 4.33.2\n\
    auto-gptq: 0.5.0.dev0+cu121\ntorch:  2.0.1+cu118\n\nThe model throws gibberish\
    \ output and sometimes Chinese, greek, and other non-english output. I am using\
    \ exllama and the following are the configs.\n```\nconfig.max_seq_len = 16384\n\
    config.max_input_len = 4096\nconfig.max_attention_size = 2048**2\nconfig.compress_pos_emb\
    \ = 4.0 \ngenerator.settings.token_repetition_penalty_max = 1.2\ngenerator.settings.temperature\
    \ = 0.35\ngenerator.settings.top_p = 0.8\n```\n```\nprompt = f\"\"\"A chat between\
    \ a curious user and an artificial intelligence assistant.\n    USER: Hi\n   \
    \ ASSISTANT:\"\"\"\n\nprint(generator.generate_simple(prompt, max_new_tokens =\
    \ 500))\n```\n```\nHello! How can I help you today? If you have any questions\
    \ or need assistance, feel free to ask. :)<|endoftext>\n  ..-1000\\r\n  :status:\
    \ 200\\r\n  :route: /webhooks/create\\r\n  :method: POST\\r\n  :body:\\r\n  {\
    \ \"url\": \"<https://example.com/webhook>\" }\n\nThis is the response from the\
    \ server for creating a webhook with URL `https://example.com/webhook`. The status\
    \ code is 200 indicating success. The route of the request was `/webhooks/create`\
    \ and it was done using the HTTP method POST. The body of the response contains\
    \ the payload sent in the request which is the URL of the webhook that was created.\
    \ This will be used by the client application to send data to the server via this\
    \ webhook.\n\nThe `\\r` character at the end of each line indicates the end of\
    \ the line. In some cases, when sending text over a network connection, it's necessary\
    \ to add special characters like `\\n`, `\\r`, or `\\u` to indicate the end of\
    \ a line or a paragraph. These are called newline characters and they tell the\
    \ receiving program where one message ends and another begins. So, in this case,\
    \ we use `\\r` to separate the different parts of the JSON object being returned\
    \ by the API.\n\nI hope this helps clarify how these responses work! Let me know\
    \ if you have any other questions. :)<|endoftext>\n\nonline.php\n<?php\nif ($_SERVER[\"\
    REQUEST\\_METHOD\"] == \"POST\") {\n    // Get form data\n    $name = $_POST['name'];\n\
    \    $email = $_POST['email'];\n    $phone = $_POST['phone'];\n    \n    // Validate\
    \ input\n    if (empty($name) || empty($email) || empty($phone)) {\n        echo\
    \ json\\_encode(array(\"status\" => \"error\", \"message\" => \"All fields are\
    \ required\"));\n        exit;\n    } else {\n        // Prepare an insert statement\n\
    \        $sql = \"INSERT INTO leads (name, email, phone) VALUES ('$name', '$email',\
    \ '$phone')\";\n```\nSometimes, it generates this: \n```\n\uBC88\uC5ED\uACB0\uACFC\
    \  \n\uC81C\uACF5\uB41C \uC815\uBCF4\uC5D0\uB294 \uD2B9\uC815 \uBD80\uCC44\uB098\
    \ \uB300\uCD9C \uACC4\uC57D\uC5D0 \uB300\uD55C \uC5B8\uAE09\uC774 \uC5C6\uC2B5\
    \uB2C8\uB2E4. \uBB38\uC11C\uB294 \uC8FC\uB85C \uC11C\uBE44\uC2A4, \uAE30\uB2A5\
    , \uAC00\uACA9 \uBC0F \uC0B0\uC5C5 \uBE44\uAD50\uB97C \uB2E4\uB8E8\uACE0 \uC788\
    \uC2B5\uB2C8\uB2E4. \uADF8\uB7EC\uB098 \uC790\uBCF8 \uD22C\uC790 \uBC0F \uC790\
    \uAE08 \uC870\uB2EC \uB178\uB825\uC5D0 \uB300\uD574 \uC5B8\uAE09\uD558\uACE0 \uC788\
    \uC2B5\uB2C8\uB2E4.  \uB610\uD55C \uB2E4\uB978 \uD22C\uC790\uC790\uB85C\uBD80\uD130\
    \ \uBE44\uACF5\uAC1C \uAE08\uC561\uC758 \uCD94\uAC00 \uC790\uAE08 \uC870\uB2EC\
    \uC744 \uC5B8\uAE09\uD569\uB2C8\uB2E4. \uB610\uD55C \uAD6C\uFFFD\uFFFD\n```"
  created_at: 2023-09-18 18:37:10+00:00
  edited: true
  hidden: false
  id: 6508a6e6905c78a96a1741f0
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/c82779fdf94f80cdb5020504f83c818b.svg
      fullname: Yatharth  Sharma
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: YaTharThShaRma999
      type: user
    createdAt: '2023-09-18T21:12:29.000Z'
    data:
      edited: false
      editors:
      - YaTharThShaRma999
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.947404682636261
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/c82779fdf94f80cdb5020504f83c818b.svg
          fullname: Yatharth  Sharma
          isHf: false
          isPro: false
          name: YaTharThShaRma999
          type: user
        html: '<p>Its actually probably working fine.</p>

          <p>The actual text ends after &lt;|endoftext|&gt; so anything after that
          will be random gibberish. So it seems to be fine.</p>

          '
        raw: 'Its actually probably working fine.


          The actual text ends after <|endoftext|> so anything after that will be
          random gibberish. So it seems to be fine.'
        updatedAt: '2023-09-18T21:12:29.190Z'
      numEdits: 0
      reactions: []
    id: 6508bd3d4afcb7378d231469
    type: comment
  author: YaTharThShaRma999
  content: 'Its actually probably working fine.


    The actual text ends after <|endoftext|> so anything after that will be random
    gibberish. So it seems to be fine.'
  created_at: 2023-09-18 20:12:29+00:00
  edited: false
  hidden: false
  id: 6508bd3d4afcb7378d231469
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 4
repo_id: TheBloke/vicuna-13B-v1.5-16K-GPTQ
repo_type: model
status: open
target_branch: null
title: Gibberish output for any prompt after following prompt template and updating
  transformers, auto-gptq
