!!python/object:huggingface_hub.community.DiscussionWithDetails
author: vermanic
conflicting_files: null
created_at: 2023-09-07 09:26:18+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/aed90af7a731cc77677f3603f75bfac9.svg
      fullname: Nikhil Verma
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: vermanic
      type: user
    createdAt: '2023-09-07T10:26:18.000Z'
    data:
      edited: true
      editors:
      - vermanic
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5044406652450562
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/aed90af7a731cc77677f3603f75bfac9.svg
          fullname: Nikhil Verma
          isHf: false
          isPro: false
          name: vermanic
          type: user
        html: "<p>So, I have this basic question that if I call the infer() function\
          \ parallely using multiple threads, Will that work?</p>\n<p>Code:</p>\n\
          <pre><code>from transformers import AutoModelForCausalLM, AutoTokenizer\n\
          import torch\n\ncheckpoint = \"WizardLM/WizardCoder-15B-V1.0\"\ndevice =\
          \ \"cuda\" if torch.cuda.is_available() else \"cpu\"  # \"cuda:X\" for GPU\
          \ usage or \"cpu\" for CPU usage\n\n\nclass Model:\n    def __init__(self):\n\
          \        print(\"Running in \" + device)\n        self.tokenizer = AutoTokenizer.from_pretrained(checkpoint)\n\
          \        self.model = AutoModelForCausalLM.from_pretrained(checkpoint, device_map='auto')\n\
          \n    def infer(self, input_text, token_count):\n        inputs = self.tokenizer.encode(input_text,\
          \ return_tensors=\"pt\").to(device)\n        outputs = self.model.generate(inputs,\
          \ max_new_tokens=token_count)\n        return self.tokenizer.decode(outputs[0])\n\
          </code></pre>\n<p>Also, <code>max_new_tokens</code> means the number of\
          \ tokens I want the model to respond with, right?</p>\n"
        raw: "So, I have this basic question that if I call the infer() function parallely\
          \ using multiple threads, Will that work?\n\nCode:\n```\nfrom transformers\
          \ import AutoModelForCausalLM, AutoTokenizer\nimport torch\n\ncheckpoint\
          \ = \"WizardLM/WizardCoder-15B-V1.0\"\ndevice = \"cuda\" if torch.cuda.is_available()\
          \ else \"cpu\"  # \"cuda:X\" for GPU usage or \"cpu\" for CPU usage\n\n\n\
          class Model:\n    def __init__(self):\n        print(\"Running in \" + device)\n\
          \        self.tokenizer = AutoTokenizer.from_pretrained(checkpoint)\n  \
          \      self.model = AutoModelForCausalLM.from_pretrained(checkpoint, device_map='auto')\n\
          \n    def infer(self, input_text, token_count):\n        inputs = self.tokenizer.encode(input_text,\
          \ return_tensors=\"pt\").to(device)\n        outputs = self.model.generate(inputs,\
          \ max_new_tokens=token_count)\n        return self.tokenizer.decode(outputs[0])\n\
          ```\n\nAlso, `max_new_tokens` means the number of tokens I want the model\
          \ to respond with, right?"
        updatedAt: '2023-09-07T10:26:36.511Z'
      numEdits: 1
      reactions: []
    id: 64f9a54a2e0cda71e7b542b3
    type: comment
  author: vermanic
  content: "So, I have this basic question that if I call the infer() function parallely\
    \ using multiple threads, Will that work?\n\nCode:\n```\nfrom transformers import\
    \ AutoModelForCausalLM, AutoTokenizer\nimport torch\n\ncheckpoint = \"WizardLM/WizardCoder-15B-V1.0\"\
    \ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"  # \"cuda:X\" for\
    \ GPU usage or \"cpu\" for CPU usage\n\n\nclass Model:\n    def __init__(self):\n\
    \        print(\"Running in \" + device)\n        self.tokenizer = AutoTokenizer.from_pretrained(checkpoint)\n\
    \        self.model = AutoModelForCausalLM.from_pretrained(checkpoint, device_map='auto')\n\
    \n    def infer(self, input_text, token_count):\n        inputs = self.tokenizer.encode(input_text,\
    \ return_tensors=\"pt\").to(device)\n        outputs = self.model.generate(inputs,\
    \ max_new_tokens=token_count)\n        return self.tokenizer.decode(outputs[0])\n\
    ```\n\nAlso, `max_new_tokens` means the number of tokens I want the model to respond\
    \ with, right?"
  created_at: 2023-09-07 09:26:18+00:00
  edited: true
  hidden: false
  id: 64f9a54a2e0cda71e7b542b3
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 38
repo_id: WizardLM/WizardCoder-15B-V1.0
repo_type: model
status: open
target_branch: null
title: 'Parallel Inferences using GPU? '
