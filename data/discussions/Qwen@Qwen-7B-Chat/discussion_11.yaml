!!python/object:huggingface_hub.community.DiscussionWithDetails
author: Cornmonster
conflicting_files: null
created_at: 2023-08-04 07:31:22+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/63b2a04c922f26a27e7303e1/ECIboCxE29J-xUJJIS_nv.png?w=200&h=200&f=face
      fullname: Jon Wang
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Cornmonster
      type: user
    createdAt: '2023-08-04T08:31:22.000Z'
    data:
      edited: false
      editors:
      - Cornmonster
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5057553648948669
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/63b2a04c922f26a27e7303e1/ECIboCxE29J-xUJJIS_nv.png?w=200&h=200&f=face
          fullname: Jon Wang
          isHf: false
          isPro: false
          name: Cornmonster
          type: user
        html: "<p>To reproduce:</p>\n<pre><code class=\"language-python\"><span class=\"\
          hljs-keyword\">from</span> transformers <span class=\"hljs-keyword\">import</span>\
          \ AutoTokenizer\ntokenizer = AutoTokenizer.from_pretrained(<span class=\"\
          hljs-string\">\"Qwen/Qwen-7B-Chat\"</span>, trust_remote_code=<span class=\"\
          hljs-literal\">True</span>)\ns = (<span class=\"hljs-string\">\"&lt;|im_start|&gt;system\\\
          nYou are a helpful assistant.&lt;|im_end|&gt;\\n&lt;|im_start|&gt;user\\\
          nHi there.\"</span>\n        <span class=\"hljs-string\">\"&lt;|im_end|&gt;\\\
          n&lt;|im_start|&gt;assistant\\nHello, how may I help you?&lt;|im_end|&gt;\\\
          n&lt;|im_start|&gt;\"</span>\n        <span class=\"hljs-string\">\"user\\\
          nWrite a poem.&lt;|im_end|&gt;\\n&lt;|im_start|&gt;assistant\\n\"</span>)\n\
          tokenizer(s)\n</code></pre>\n<pre><code class=\"language-python\">File ~/.cache/huggingface/modules/transformers_modules/Qwen/Qwen-7B-Chat/f2e5005d0d03224a30e2dca1c943341a454648c1/tokenization_qwen.py:<span\
          \ class=\"hljs-number\">196</span>, <span class=\"hljs-keyword\">in</span>\
          \ QWenTokenizer.tokenize(self, text, **kwargs)\n    <span class=\"hljs-number\"\
          >193</span> tokens = []\n    <span class=\"hljs-number\">194</span> text\
          \ = unicodedata.normalize(<span class=\"hljs-string\">\"NFC\"</span>, text)\n\
          --&gt; <span class=\"hljs-number\">196</span> <span class=\"hljs-keyword\"\
          >for</span> t <span class=\"hljs-keyword\">in</span> self.tokenizer.encode(text,\
          \ **kwargs):\n    <span class=\"hljs-number\">197</span>     tokens.append(self.decoder[t])\n\
          \    <span class=\"hljs-number\">199</span> <span class=\"hljs-keyword\"\
          >return</span> tokens\n\nFile ~/Documents/miniconda3/envs/ml/lib/python3<span\
          \ class=\"hljs-number\">.10</span>/site-packages/tiktoken/core.py:<span\
          \ class=\"hljs-number\">112</span>, <span class=\"hljs-keyword\">in</span>\
          \ Encoding.encode(self, text, allowed_special, disallowed_special)\n   \
          \ <span class=\"hljs-number\">110</span>         disallowed_special = <span\
          \ class=\"hljs-built_in\">frozenset</span>(disallowed_special)\n    <span\
          \ class=\"hljs-number\">111</span>     <span class=\"hljs-keyword\">if</span>\
          \ <span class=\"hljs-keyword\">match</span> := _special_token_regex(disallowed_special).search(text):\n\
          --&gt; <span class=\"hljs-number\">112</span>         raise_disallowed_special_token(<span\
          \ class=\"hljs-keyword\">match</span>.group())\n    <span class=\"hljs-number\"\
          >114</span> <span class=\"hljs-keyword\">return</span> self._core_bpe.encode(text,\
          \ allowed_special)\n\nFile ~/Documents/miniconda3/envs/ml/lib/python3<span\
          \ class=\"hljs-number\">.10</span>/site-packages/tiktoken/core.py:<span\
          \ class=\"hljs-number\">322</span>, <span class=\"hljs-keyword\">in</span>\
          \ raise_disallowed_special_token(token)\n    <span class=\"hljs-number\"\
          >321</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\
          \ function_\">raise_disallowed_special_token</span>(<span class=\"hljs-params\"\
          >token: <span class=\"hljs-built_in\">str</span></span>) -&gt; NoReturn:\n\
          --&gt; <span class=\"hljs-number\">322</span>     <span class=\"hljs-keyword\"\
          >raise</span> ValueError(\n    <span class=\"hljs-number\">323</span>  \
          \       <span class=\"hljs-string\">f\"Encountered text corresponding to\
          \ disallowed special token <span class=\"hljs-subst\">{token!r}</span>.\\\
          n\"</span>\n    <span class=\"hljs-number\">324</span>         <span class=\"\
          hljs-string\">\"If you want this text to be encoded as a special token,\
          \ \"</span>\n    <span class=\"hljs-number\">325</span>         <span class=\"\
          hljs-string\">f\"pass it to `allowed_special`, e.g. `allowed_special={{<span\
          \ class=\"hljs-subst\">{token!r}</span>, ...}}`.\\n\"</span>\n    <span\
          \ class=\"hljs-number\">326</span>         <span class=\"hljs-string\">f\"\
          If you want this text to be encoded as normal text, disable the check for\
          \ this token \"</span>\n    <span class=\"hljs-number\">327</span>     \
          \    <span class=\"hljs-string\">f\"by passing `disallowed_special=(enc.special_tokens_set\
          \ - {{<span class=\"hljs-subst\">{token!r}</span>}})`.\\n\"</span>\n   \
          \ <span class=\"hljs-number\">328</span>         <span class=\"hljs-string\"\
          >\"To disable this check for all special tokens, pass `disallowed_special=()`.\\\
          n\"</span>\n    <span class=\"hljs-number\">329</span>     )\n\nValueError:\
          \ Encountered text corresponding to disallowed special token <span class=\"\
          hljs-string\">'&lt;|im_start|&gt;'</span>.\nIf you want this text to be\
          \ encoded <span class=\"hljs-keyword\">as</span> a special token, <span\
          \ class=\"hljs-keyword\">pass</span> it to `allowed_special`, e.g. `allowed_special={<span\
          \ class=\"hljs-string\">'&lt;|im_start|&gt;'</span>, ...}`.\nIf you want\
          \ this text to be encoded <span class=\"hljs-keyword\">as</span> normal\
          \ text, disable the check <span class=\"hljs-keyword\">for</span> this token\
          \ by passing `disallowed_special=(enc.special_tokens_set - {<span class=\"\
          hljs-string\">'&lt;|im_start|&gt;'</span>})`.\nTo disable this check <span\
          \ class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">all</span>\
          \ special tokens, <span class=\"hljs-keyword\">pass</span> `disallowed_special=()`.\n\
          </code></pre>\n"
        raw: "To reproduce:\r\n```python\r\nfrom transformers import AutoTokenizer\r\
          \ntokenizer = AutoTokenizer.from_pretrained(\"Qwen/Qwen-7B-Chat\", trust_remote_code=True)\r\
          \ns = (\"<|im_start|>system\\nYou are a helpful assistant.<|im_end|>\\n<|im_start|>user\\\
          nHi there.\"\r\n        \"<|im_end|>\\n<|im_start|>assistant\\nHello, how\
          \ may I help you?<|im_end|>\\n<|im_start|>\"\r\n        \"user\\nWrite a\
          \ poem.<|im_end|>\\n<|im_start|>assistant\\n\")\r\ntokenizer(s)\r\n```\r\
          \n\r\n```python\r\nFile ~/.cache/huggingface/modules/transformers_modules/Qwen/Qwen-7B-Chat/f2e5005d0d03224a30e2dca1c943341a454648c1/tokenization_qwen.py:196,\
          \ in QWenTokenizer.tokenize(self, text, **kwargs)\r\n    193 tokens = []\r\
          \n    194 text = unicodedata.normalize(\"NFC\", text)\r\n--> 196 for t in\
          \ self.tokenizer.encode(text, **kwargs):\r\n    197     tokens.append(self.decoder[t])\r\
          \n    199 return tokens\r\n\r\nFile ~/Documents/miniconda3/envs/ml/lib/python3.10/site-packages/tiktoken/core.py:112,\
          \ in Encoding.encode(self, text, allowed_special, disallowed_special)\r\n\
          \    110         disallowed_special = frozenset(disallowed_special)\r\n\
          \    111     if match := _special_token_regex(disallowed_special).search(text):\r\
          \n--> 112         raise_disallowed_special_token(match.group())\r\n    114\
          \ return self._core_bpe.encode(text, allowed_special)\r\n\r\nFile ~/Documents/miniconda3/envs/ml/lib/python3.10/site-packages/tiktoken/core.py:322,\
          \ in raise_disallowed_special_token(token)\r\n    321 def raise_disallowed_special_token(token:\
          \ str) -> NoReturn:\r\n--> 322     raise ValueError(\r\n    323        \
          \ f\"Encountered text corresponding to disallowed special token {token!r}.\\\
          n\"\r\n    324         \"If you want this text to be encoded as a special\
          \ token, \"\r\n    325         f\"pass it to `allowed_special`, e.g. `allowed_special={{{token!r},\
          \ ...}}`.\\n\"\r\n    326         f\"If you want this text to be encoded\
          \ as normal text, disable the check for this token \"\r\n    327       \
          \  f\"by passing `disallowed_special=(enc.special_tokens_set - {{{token!r}}})`.\\\
          n\"\r\n    328         \"To disable this check for all special tokens, pass\
          \ `disallowed_special=()`.\\n\"\r\n    329     )\r\n\r\nValueError: Encountered\
          \ text corresponding to disallowed special token '<|im_start|>'.\r\nIf you\
          \ want this text to be encoded as a special token, pass it to `allowed_special`,\
          \ e.g. `allowed_special={'<|im_start|>', ...}`.\r\nIf you want this text\
          \ to be encoded as normal text, disable the check for this token by passing\
          \ `disallowed_special=(enc.special_tokens_set - {'<|im_start|>'})`.\r\n\
          To disable this check for all special tokens, pass `disallowed_special=()`.\r\
          \n```\r\n\r\n"
        updatedAt: '2023-08-04T08:31:22.942Z'
      numEdits: 0
      reactions: []
    id: 64ccb75a71b435a75de71ae5
    type: comment
  author: Cornmonster
  content: "To reproduce:\r\n```python\r\nfrom transformers import AutoTokenizer\r\
    \ntokenizer = AutoTokenizer.from_pretrained(\"Qwen/Qwen-7B-Chat\", trust_remote_code=True)\r\
    \ns = (\"<|im_start|>system\\nYou are a helpful assistant.<|im_end|>\\n<|im_start|>user\\\
    nHi there.\"\r\n        \"<|im_end|>\\n<|im_start|>assistant\\nHello, how may\
    \ I help you?<|im_end|>\\n<|im_start|>\"\r\n        \"user\\nWrite a poem.<|im_end|>\\\
    n<|im_start|>assistant\\n\")\r\ntokenizer(s)\r\n```\r\n\r\n```python\r\nFile ~/.cache/huggingface/modules/transformers_modules/Qwen/Qwen-7B-Chat/f2e5005d0d03224a30e2dca1c943341a454648c1/tokenization_qwen.py:196,\
    \ in QWenTokenizer.tokenize(self, text, **kwargs)\r\n    193 tokens = []\r\n \
    \   194 text = unicodedata.normalize(\"NFC\", text)\r\n--> 196 for t in self.tokenizer.encode(text,\
    \ **kwargs):\r\n    197     tokens.append(self.decoder[t])\r\n    199 return tokens\r\
    \n\r\nFile ~/Documents/miniconda3/envs/ml/lib/python3.10/site-packages/tiktoken/core.py:112,\
    \ in Encoding.encode(self, text, allowed_special, disallowed_special)\r\n    110\
    \         disallowed_special = frozenset(disallowed_special)\r\n    111     if\
    \ match := _special_token_regex(disallowed_special).search(text):\r\n--> 112 \
    \        raise_disallowed_special_token(match.group())\r\n    114 return self._core_bpe.encode(text,\
    \ allowed_special)\r\n\r\nFile ~/Documents/miniconda3/envs/ml/lib/python3.10/site-packages/tiktoken/core.py:322,\
    \ in raise_disallowed_special_token(token)\r\n    321 def raise_disallowed_special_token(token:\
    \ str) -> NoReturn:\r\n--> 322     raise ValueError(\r\n    323         f\"Encountered\
    \ text corresponding to disallowed special token {token!r}.\\n\"\r\n    324  \
    \       \"If you want this text to be encoded as a special token, \"\r\n    325\
    \         f\"pass it to `allowed_special`, e.g. `allowed_special={{{token!r},\
    \ ...}}`.\\n\"\r\n    326         f\"If you want this text to be encoded as normal\
    \ text, disable the check for this token \"\r\n    327         f\"by passing `disallowed_special=(enc.special_tokens_set\
    \ - {{{token!r}}})`.\\n\"\r\n    328         \"To disable this check for all special\
    \ tokens, pass `disallowed_special=()`.\\n\"\r\n    329     )\r\n\r\nValueError:\
    \ Encountered text corresponding to disallowed special token '<|im_start|>'.\r\
    \nIf you want this text to be encoded as a special token, pass it to `allowed_special`,\
    \ e.g. `allowed_special={'<|im_start|>', ...}`.\r\nIf you want this text to be\
    \ encoded as normal text, disable the check for this token by passing `disallowed_special=(enc.special_tokens_set\
    \ - {'<|im_start|>'})`.\r\nTo disable this check for all special tokens, pass\
    \ `disallowed_special=()`.\r\n```\r\n\r\n"
  created_at: 2023-08-04 07:31:22+00:00
  edited: false
  hidden: false
  id: 64ccb75a71b435a75de71ae5
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/9921ca8568f9d53c919681d8960ad802.svg
      fullname: jklj077
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: jklj077
      type: user
    createdAt: '2023-08-04T10:24:31.000Z'
    data:
      edited: false
      editors:
      - jklj077
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.982622504234314
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/9921ca8568f9d53c919681d8960ad802.svg
          fullname: jklj077
          isHf: false
          isPro: false
          name: jklj077
          type: user
        html: '<p>Please refer to the updated model card. </p>

          '
        raw: 'Please refer to the updated model card. '
        updatedAt: '2023-08-04T10:24:31.140Z'
      numEdits: 0
      reactions: []
    id: 64ccd1dfe60d2cddfae569fa
    type: comment
  author: jklj077
  content: 'Please refer to the updated model card. '
  created_at: 2023-08-04 09:24:31+00:00
  edited: false
  hidden: false
  id: 64ccd1dfe60d2cddfae569fa
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/9921ca8568f9d53c919681d8960ad802.svg
      fullname: jklj077
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: jklj077
      type: user
    createdAt: '2023-08-04T10:24:44.000Z'
    data:
      edited: true
      editors:
      - jklj077
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.6100776791572571
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/9921ca8568f9d53c919681d8960ad802.svg
          fullname: jklj077
          isHf: false
          isPro: false
          name: jklj077
          type: user
        html: '<pre><code># Note: our tokenizer rejects attacks and so that you cannot
          input special tokens like &lt;|endoftext|&gt; or it will throw an error.

          # To remove the strategy, you can add `allowed_special`, which accepts the
          string "all" or a `set` of special tokens.

          # For example: tokens = tokenizer(text, allowed_special="all")

          </code></pre>

          '
        raw: '```

          # Note: our tokenizer rejects attacks and so that you cannot input special
          tokens like <|endoftext|> or it will throw an error.

          # To remove the strategy, you can add `allowed_special`, which accepts the
          string "all" or a `set` of special tokens.

          # For example: tokens = tokenizer(text, allowed_special="all")

          ```'
        updatedAt: '2023-08-04T10:25:01.701Z'
      numEdits: 1
      reactions:
      - count: 1
        reaction: "\u2764\uFE0F"
        users:
        - phuctan214
    id: 64ccd1ec40ce646cc7097c02
    type: comment
  author: jklj077
  content: '```

    # Note: our tokenizer rejects attacks and so that you cannot input special tokens
    like <|endoftext|> or it will throw an error.

    # To remove the strategy, you can add `allowed_special`, which accepts the string
    "all" or a `set` of special tokens.

    # For example: tokens = tokenizer(text, allowed_special="all")

    ```'
  created_at: 2023-08-04 09:24:44+00:00
  edited: true
  hidden: false
  id: 64ccd1ec40ce646cc7097c02
  type: comment
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: /avatars/9921ca8568f9d53c919681d8960ad802.svg
      fullname: jklj077
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: jklj077
      type: user
    createdAt: '2023-08-08T03:20:50.000Z'
    data:
      status: closed
    id: 64d1b4924a204a4d1258fdf7
    type: status-change
  author: jklj077
  created_at: 2023-08-08 02:20:50+00:00
  id: 64d1b4924a204a4d1258fdf7
  new_status: closed
  type: status-change
is_pull_request: false
merge_commit_oid: null
num: 11
repo_id: Qwen/Qwen-7B-Chat
repo_type: model
status: closed
target_branch: null
title: Encountered text corresponding to disallowed special token '<|im_start|>'
