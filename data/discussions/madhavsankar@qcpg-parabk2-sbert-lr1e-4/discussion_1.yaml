!!python/object:huggingface_hub.community.DiscussionWithDetails
author: ArthurParkerhouse
conflicting_files: null
created_at: 2023-01-10 22:13:18+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/5fcb82678ead0b1387544044e542dd3b.svg
      fullname: Parkerhouse
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ArthurParkerhouse
      type: user
    createdAt: '2023-01-10T22:13:18.000Z'
    data:
      edited: false
      editors:
      - ArthurParkerhouse
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/5fcb82678ead0b1387544044e542dd3b.svg
          fullname: Parkerhouse
          isHf: false
          isPro: false
          name: ArthurParkerhouse
          type: user
        html: "<p>From the original IBM github page the following code is what they\
          \ recommend. </p>\n<hr>\n<p>from transformers import pipeline</p>\n<p>class\
          \ QualityControlPipeline:</p>\n<pre><code>def __init__(self, type):\n  \
          \  assert type in ['captions', 'questions', 'sentences']\n    self.pipe\
          \ = pipeline('text2text-generation', model=f'ibm/qcpg-{type}')\n    self.ranges\
          \ = {\n        'captions': {'lex': [0, 90], 'syn': [0, 80], 'sem': [0, 95]},\n\
          \        'sentences': {'lex': [0, 100], 'syn': [0, 80], 'sem': [0, 95]},\n\
          \        'questions': {'lex': [0, 90], 'syn': [0, 75], 'sem': [0, 95]}\n\
          \    }[type]\n\ndef __call__(self, text, lexical, syntactic, semantic, **kwargs):\n\
          \    assert all([0 &lt;= val &lt;= 1 for val in [lexical, syntactic, semantic]]),\
          \ \\\n             f' control values must be between 0 and 1, got {lexical},\
          \ {syntactic}, {semantic}'\n    names = ['semantic_sim', 'lexical_div',\
          \ 'syntactic_div']\n    control = [int(5 * round(val * 100 / 5)) for val\
          \ in [semantic, lexical, syntactic]]\n    control ={name: max(min(val ,\
          \ self.ranges[name[:3]][1]), self.ranges[name[:3]][0]) for name, val in\
          \ zip(names, control)}\n    control = [f'COND_{name.upper()}_{control[name]}'\
          \ for name in names]\n    assert all(cond in self.pipe.tokenizer.additional_special_tokens\
          \ for cond in control)\n    text = ' '.join(control) + text if isinstance(text,\
          \ str) else [' '.join(control) for t in text]\n    return self.pipe(text,\
          \ **kwargs)\n</code></pre>\n<hr>\n<p>What would we need to change/update\
          \ for this version that has additional parameters? </p>\n"
        raw: "From the original IBM github page the following code is what they recommend.\
          \ \r\n\r\n---------------------------------------------\r\n\r\nfrom transformers\
          \ import pipeline\r\n\r\nclass QualityControlPipeline:\r\n    \r\n    def\
          \ __init__(self, type):\r\n        assert type in ['captions', 'questions',\
          \ 'sentences']\r\n        self.pipe = pipeline('text2text-generation', model=f'ibm/qcpg-{type}')\r\
          \n        self.ranges = {\r\n            'captions': {'lex': [0, 90], 'syn':\
          \ [0, 80], 'sem': [0, 95]},\r\n            'sentences': {'lex': [0, 100],\
          \ 'syn': [0, 80], 'sem': [0, 95]},\r\n            'questions': {'lex': [0,\
          \ 90], 'syn': [0, 75], 'sem': [0, 95]}\r\n        }[type]\r\n\r\n    def\
          \ __call__(self, text, lexical, syntactic, semantic, **kwargs):\r\n    \
          \    assert all([0 <= val <= 1 for val in [lexical, syntactic, semantic]]),\
          \ \\\r\n                 f' control values must be between 0 and 1, got\
          \ {lexical}, {syntactic}, {semantic}'\r\n        names = ['semantic_sim',\
          \ 'lexical_div', 'syntactic_div']\r\n        control = [int(5 * round(val\
          \ * 100 / 5)) for val in [semantic, lexical, syntactic]]\r\n        control\
          \ ={name: max(min(val , self.ranges[name[:3]][1]), self.ranges[name[:3]][0])\
          \ for name, val in zip(names, control)}\r\n        control = [f'COND_{name.upper()}_{control[name]}'\
          \ for name in names]\r\n        assert all(cond in self.pipe.tokenizer.additional_special_tokens\
          \ for cond in control)\r\n        text = ' '.join(control) + text if isinstance(text,\
          \ str) else [' '.join(control) for t in text]\r\n        return self.pipe(text,\
          \ **kwargs)\r\n\r\n\r\n\r\n--------------------\r\n\r\nWhat would we need\
          \ to change/update for this version that has additional parameters? "
        updatedAt: '2023-01-10T22:13:18.157Z'
      numEdits: 0
      reactions: []
    id: 63bde2feb3b8c44f8ce89371
    type: comment
  author: ArthurParkerhouse
  content: "From the original IBM github page the following code is what they recommend.\
    \ \r\n\r\n---------------------------------------------\r\n\r\nfrom transformers\
    \ import pipeline\r\n\r\nclass QualityControlPipeline:\r\n    \r\n    def __init__(self,\
    \ type):\r\n        assert type in ['captions', 'questions', 'sentences']\r\n\
    \        self.pipe = pipeline('text2text-generation', model=f'ibm/qcpg-{type}')\r\
    \n        self.ranges = {\r\n            'captions': {'lex': [0, 90], 'syn': [0,\
    \ 80], 'sem': [0, 95]},\r\n            'sentences': {'lex': [0, 100], 'syn': [0,\
    \ 80], 'sem': [0, 95]},\r\n            'questions': {'lex': [0, 90], 'syn': [0,\
    \ 75], 'sem': [0, 95]}\r\n        }[type]\r\n\r\n    def __call__(self, text,\
    \ lexical, syntactic, semantic, **kwargs):\r\n        assert all([0 <= val <=\
    \ 1 for val in [lexical, syntactic, semantic]]), \\\r\n                 f' control\
    \ values must be between 0 and 1, got {lexical}, {syntactic}, {semantic}'\r\n\
    \        names = ['semantic_sim', 'lexical_div', 'syntactic_div']\r\n        control\
    \ = [int(5 * round(val * 100 / 5)) for val in [semantic, lexical, syntactic]]\r\
    \n        control ={name: max(min(val , self.ranges[name[:3]][1]), self.ranges[name[:3]][0])\
    \ for name, val in zip(names, control)}\r\n        control = [f'COND_{name.upper()}_{control[name]}'\
    \ for name in names]\r\n        assert all(cond in self.pipe.tokenizer.additional_special_tokens\
    \ for cond in control)\r\n        text = ' '.join(control) + text if isinstance(text,\
    \ str) else [' '.join(control) for t in text]\r\n        return self.pipe(text,\
    \ **kwargs)\r\n\r\n\r\n\r\n--------------------\r\n\r\nWhat would we need to change/update\
    \ for this version that has additional parameters? "
  created_at: 2023-01-10 22:13:18+00:00
  edited: false
  hidden: false
  id: 63bde2feb3b8c44f8ce89371
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/e837e8bba8a2d72cc6ab6bf870f79da3.svg
      fullname: Madhav Sankar Krishnakumar
      isHf: false
      isOrgMember: false
      isOwner: true
      isPro: false
      name: madhavsankar
      type: user
    createdAt: '2023-01-10T22:57:07.000Z'
    data:
      edited: false
      editors:
      - madhavsankar
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/e837e8bba8a2d72cc6ab6bf870f79da3.svg
          fullname: Madhav Sankar Krishnakumar
          isHf: false
          isPro: false
          name: madhavsankar
          type: user
        html: "<p>You can use this:</p>\n<pre><code>from transformers import pipeline\n\
          \nclass QualityControlPipeline:\n    def __init__(self):\n        self.pipe\
          \ = pipeline('text2text-generation', model='madhavsankar/qcpg-parabk2-sbert-lr1e-4')\n\
          \        self.ranges = {'lex': [0, 100], 'syn': [0, 100], 'sem': [30, 100],\
          \ 'pho': [0, 100], 'mor': [0, 90]}\n\n    def __call__(self, text, lexical,\
          \ syntactic, semantic, morph, phon, **kwargs):\n        assert all([0 &lt;=\
          \ val &lt;= 1 for val in [lexical, syntactic, semantic, morph, phon,]]),\
          \ \\\n                 f' control values must be between 0 and 1, got {lexical},\
          \ {syntactic}, {semantic}, {morph}, {phon}'\n        names = ['semantic_sim',\
          \ 'lexical_div', 'syntactic_div', 'morphological_div', 'phonological_div']\n\
          \        control = [int(5 * round(val * 100 / 5)) for val in [semantic,\
          \ lexical, syntactic, morph, phon]]\n        control ={name: max(min(val\
          \ , self.ranges[name[:3]][1]), self.ranges[name[:3]][0]) for name, val in\
          \ zip(names, control)}\n        control = [f'COND_{name.upper()}_{control[name]}'\
          \ for name in names]\n        assert all(cond in self.pipe.tokenizer.additional_special_tokens\
          \ for cond in control)\n        text = ' '.join(control) + ' ' + text if\
          \ isinstance(text, str) else [' '.join(control) for t in text]\n       \
          \ return self.pipe(text, **kwargs)\n</code></pre>\n"
        raw: "You can use this:\n\n```\nfrom transformers import pipeline\n\nclass\
          \ QualityControlPipeline:\n    def __init__(self):\n        self.pipe =\
          \ pipeline('text2text-generation', model='madhavsankar/qcpg-parabk2-sbert-lr1e-4')\n\
          \        self.ranges = {'lex': [0, 100], 'syn': [0, 100], 'sem': [30, 100],\
          \ 'pho': [0, 100], 'mor': [0, 90]}\n\n    def __call__(self, text, lexical,\
          \ syntactic, semantic, morph, phon, **kwargs):\n        assert all([0 <=\
          \ val <= 1 for val in [lexical, syntactic, semantic, morph, phon,]]), \\\
          \n                 f' control values must be between 0 and 1, got {lexical},\
          \ {syntactic}, {semantic}, {morph}, {phon}'\n        names = ['semantic_sim',\
          \ 'lexical_div', 'syntactic_div', 'morphological_div', 'phonological_div']\n\
          \        control = [int(5 * round(val * 100 / 5)) for val in [semantic,\
          \ lexical, syntactic, morph, phon]]\n        control ={name: max(min(val\
          \ , self.ranges[name[:3]][1]), self.ranges[name[:3]][0]) for name, val in\
          \ zip(names, control)}\n        control = [f'COND_{name.upper()}_{control[name]}'\
          \ for name in names]\n        assert all(cond in self.pipe.tokenizer.additional_special_tokens\
          \ for cond in control)\n        text = ' '.join(control) + ' ' + text if\
          \ isinstance(text, str) else [' '.join(control) for t in text]\n       \
          \ return self.pipe(text, **kwargs)\n```"
        updatedAt: '2023-01-10T22:57:07.546Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\u2764\uFE0F"
        users:
        - ArthurParkerhouse
    id: 63bded430a7cc50a4f2ef04c
    type: comment
  author: madhavsankar
  content: "You can use this:\n\n```\nfrom transformers import pipeline\n\nclass QualityControlPipeline:\n\
    \    def __init__(self):\n        self.pipe = pipeline('text2text-generation',\
    \ model='madhavsankar/qcpg-parabk2-sbert-lr1e-4')\n        self.ranges = {'lex':\
    \ [0, 100], 'syn': [0, 100], 'sem': [30, 100], 'pho': [0, 100], 'mor': [0, 90]}\n\
    \n    def __call__(self, text, lexical, syntactic, semantic, morph, phon, **kwargs):\n\
    \        assert all([0 <= val <= 1 for val in [lexical, syntactic, semantic, morph,\
    \ phon,]]), \\\n                 f' control values must be between 0 and 1, got\
    \ {lexical}, {syntactic}, {semantic}, {morph}, {phon}'\n        names = ['semantic_sim',\
    \ 'lexical_div', 'syntactic_div', 'morphological_div', 'phonological_div']\n \
    \       control = [int(5 * round(val * 100 / 5)) for val in [semantic, lexical,\
    \ syntactic, morph, phon]]\n        control ={name: max(min(val , self.ranges[name[:3]][1]),\
    \ self.ranges[name[:3]][0]) for name, val in zip(names, control)}\n        control\
    \ = [f'COND_{name.upper()}_{control[name]}' for name in names]\n        assert\
    \ all(cond in self.pipe.tokenizer.additional_special_tokens for cond in control)\n\
    \        text = ' '.join(control) + ' ' + text if isinstance(text, str) else ['\
    \ '.join(control) for t in text]\n        return self.pipe(text, **kwargs)\n```"
  created_at: 2023-01-10 22:57:07+00:00
  edited: false
  hidden: false
  id: 63bded430a7cc50a4f2ef04c
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/5fcb82678ead0b1387544044e542dd3b.svg
      fullname: Parkerhouse
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ArthurParkerhouse
      type: user
    createdAt: '2023-01-11T03:15:26.000Z'
    data:
      edited: true
      editors: []
      hidden: true
      hiddenBy: ''
      latest:
        author:
          avatarUrl: /avatars/5fcb82678ead0b1387544044e542dd3b.svg
          fullname: Parkerhouse
          isHf: false
          isPro: false
          name: ArthurParkerhouse
          type: user
        html: This comment has been hidden
        raw: This comment has been hidden
        updatedAt: '2023-01-12T17:56:15.362Z'
      numEdits: 0
      reactions: []
    id: 63be29ce0840982733595ee6
    type: comment
  author: ArthurParkerhouse
  content: This comment has been hidden
  created_at: 2023-01-11 03:15:26+00:00
  edited: true
  hidden: true
  id: 63be29ce0840982733595ee6
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/5fcb82678ead0b1387544044e542dd3b.svg
      fullname: Parkerhouse
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ArthurParkerhouse
      type: user
    createdAt: '2023-01-11T04:49:12.000Z'
    data:
      edited: false
      editors:
      - ArthurParkerhouse
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/5fcb82678ead0b1387544044e542dd3b.svg
          fullname: Parkerhouse
          isHf: false
          isPro: false
          name: ArthurParkerhouse
          type: user
        html: '<blockquote>

          <p>You can use this:</p>

          </blockquote>

          <p>I worked up a quick Colab demo, thanks so much for sharing the model!  -
          <a rel="nofollow" href="https://colab.research.google.com/drive/1qbtlwjovfgjruPEKW35YUmjQzh49i8mh?usp=sharing">https://colab.research.google.com/drive/1qbtlwjovfgjruPEKW35YUmjQzh49i8mh?usp=sharing</a></p>

          '
        raw: "> You can use this:\n> \n\nI worked up a quick Colab demo, thanks so\
          \ much for sharing the model!  - https://colab.research.google.com/drive/1qbtlwjovfgjruPEKW35YUmjQzh49i8mh?usp=sharing"
        updatedAt: '2023-01-11T04:49:12.388Z'
      numEdits: 0
      reactions: []
    id: 63be3fc808409827335abfc4
    type: comment
  author: ArthurParkerhouse
  content: "> You can use this:\n> \n\nI worked up a quick Colab demo, thanks so much\
    \ for sharing the model!  - https://colab.research.google.com/drive/1qbtlwjovfgjruPEKW35YUmjQzh49i8mh?usp=sharing"
  created_at: 2023-01-11 04:49:12+00:00
  edited: false
  hidden: false
  id: 63be3fc808409827335abfc4
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: madhavsankar/qcpg-parabk2-sbert-lr1e-4
repo_type: model
status: open
target_branch: null
title: What is the best way to run this model?
