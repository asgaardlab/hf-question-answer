!!python/object:huggingface_hub.community.DiscussionWithDetails
author: THALES352
conflicting_files: null
created_at: 2023-01-29 02:32:41+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/7dda132d08958d204032bf6e1597ff72.svg
      fullname: THALES MIGUEL
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: THALES352
      type: user
    createdAt: '2023-01-29T02:32:41.000Z'
    data:
      edited: false
      editors:
      - THALES352
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/7dda132d08958d204032bf6e1597ff72.svg
          fullname: THALES MIGUEL
          isHf: false
          isPro: false
          name: THALES352
          type: user
        html: '<p>import PIL<br>import matplotlib<br>import requests<br>import pyopencl
          as cl</p>

          <p>from diffusers import StableDiffusionInstructPix2PixPipeline, EulerAncestralDiscreteScheduler</p>

          <p>model_id = "timbrooks/instruct-pix2pix"<br>pipe = StableDiffusionInstructPix2PixPipeline.from_pretrained(model_id,
          safety_checker=None)</p>

          <p>pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)</p>

          <p>url = "<a rel="nofollow" href="https://raw.githubusercontent.com/timothybrooks/instruct-pix2pix/main/imgs/example.jpg&quot;">https://raw.githubusercontent.com/timothybrooks/instruct-pix2pix/main/imgs/example.jpg"</a><br>def
          download_image(url):<br>    image = PIL.Image.open(requests.get(url, stream=True).raw)<br>    image
          = PIL.ImageOps.exif_transpose(image)<br>    image = image.convert("RGB")<br>    return
          image<br>image = download_image(url)</p>

          <p>prompt = "turn him into cyborg"<br>images = pipe.run_on_opencl(prompt,
          image, num_inference_steps=10, image_guidance_scale=1).images<br>images[0].save("output.jpg")</p>

          <p>matplotlib.pyplot.imshow(images[0])</p>

          <p>But unfortunately it said it couldn''t find the model.safetensors file,
          and even if it did find my board, it probably wouldn''t do the trick. But
          found it useful for those with AMD cards.</p>

          '
        raw: "import PIL\r\nimport matplotlib\r\nimport requests\r\nimport pyopencl\
          \ as cl\r\n\r\nfrom diffusers import StableDiffusionInstructPix2PixPipeline,\
          \ EulerAncestralDiscreteScheduler\r\n\r\nmodel_id = \"timbrooks/instruct-pix2pix\"\
          \r\npipe = StableDiffusionInstructPix2PixPipeline.from_pretrained(model_id,\
          \ safety_checker=None)\r\n\r\npipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\r\
          \n\r\nurl = \"https://raw.githubusercontent.com/timothybrooks/instruct-pix2pix/main/imgs/example.jpg\"\
          \r\ndef download_image(url):\r\n    image = PIL.Image.open(requests.get(url,\
          \ stream=True).raw)\r\n    image = PIL.ImageOps.exif_transpose(image)\r\n\
          \    image = image.convert(\"RGB\")\r\n    return image\r\nimage = download_image(url)\r\
          \n\r\nprompt = \"turn him into cyborg\"\r\nimages = pipe.run_on_opencl(prompt,\
          \ image, num_inference_steps=10, image_guidance_scale=1).images\r\nimages[0].save(\"\
          output.jpg\")\r\n\r\nmatplotlib.pyplot.imshow(images[0])\r\n\r\n\r\nBut\
          \ unfortunately it said it couldn't find the model.safetensors file, and\
          \ even if it did find my board, it probably wouldn't do the trick. But found\
          \ it useful for those with AMD cards."
        updatedAt: '2023-01-29T02:32:41.460Z'
      numEdits: 0
      reactions: []
    id: 63d5dac99cd33dc75d713a2c
    type: comment
  author: THALES352
  content: "import PIL\r\nimport matplotlib\r\nimport requests\r\nimport pyopencl\
    \ as cl\r\n\r\nfrom diffusers import StableDiffusionInstructPix2PixPipeline, EulerAncestralDiscreteScheduler\r\
    \n\r\nmodel_id = \"timbrooks/instruct-pix2pix\"\r\npipe = StableDiffusionInstructPix2PixPipeline.from_pretrained(model_id,\
    \ safety_checker=None)\r\n\r\npipe.scheduler = EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)\r\
    \n\r\nurl = \"https://raw.githubusercontent.com/timothybrooks/instruct-pix2pix/main/imgs/example.jpg\"\
    \r\ndef download_image(url):\r\n    image = PIL.Image.open(requests.get(url, stream=True).raw)\r\
    \n    image = PIL.ImageOps.exif_transpose(image)\r\n    image = image.convert(\"\
    RGB\")\r\n    return image\r\nimage = download_image(url)\r\n\r\nprompt = \"turn\
    \ him into cyborg\"\r\nimages = pipe.run_on_opencl(prompt, image, num_inference_steps=10,\
    \ image_guidance_scale=1).images\r\nimages[0].save(\"output.jpg\")\r\n\r\nmatplotlib.pyplot.imshow(images[0])\r\
    \n\r\n\r\nBut unfortunately it said it couldn't find the model.safetensors file,\
    \ and even if it did find my board, it probably wouldn't do the trick. But found\
    \ it useful for those with AMD cards."
  created_at: 2023-01-29 02:32:41+00:00
  edited: false
  hidden: false
  id: 63d5dac99cd33dc75d713a2c
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 7
repo_id: timbrooks/instruct-pix2pix
repo_type: model
status: open
target_branch: null
title: Tried to use OpenCl for my AMD
