!!python/object:huggingface_hub.community.DiscussionWithDetails
author: Icar
conflicting_files: null
created_at: 2023-10-26 15:40:55+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/639362039694ec0d025f194d/jmQetjDK3ISH_IQb7SBGC.png?w=200&h=200&f=face
      fullname: Vishnu V Jaddipal
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Icar
      type: user
    createdAt: '2023-10-26T16:40:55.000Z'
    data:
      edited: true
      editors:
      - Icar
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9686524271965027
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/639362039694ec0d025f194d/jmQetjDK3ISH_IQb7SBGC.png?w=200&h=200&f=face
          fullname: Vishnu V Jaddipal
          isHf: false
          isPro: false
          name: Icar
          type: user
        html: '<p>Hello! Thanks for trying out our model and finetuning/distilling
          upon it! We''re planning on releasing our code once we get our technical
          paper out. Might I know more about what your loss strategy exactly was and
          your experience with the outputs?<br>Also, nice idea with the cosine similarities!
          Might I ask what you compared and how similar they are?</p>

          '
        raw: 'Hello! Thanks for trying out our model and finetuning/distilling upon
          it! We''re planning on releasing our code once we get our technical paper
          out. Might I know more about what your loss strategy exactly was and your
          experience with the outputs?

          Also, nice idea with the cosine similarities! Might I ask what you compared
          and how similar they are?'
        updatedAt: '2023-10-26T16:45:35.802Z'
      numEdits: 1
      reactions: []
    id: 653a96977721c7df13367cca
    type: comment
  author: Icar
  content: 'Hello! Thanks for trying out our model and finetuning/distilling upon
    it! We''re planning on releasing our code once we get our technical paper out.
    Might I know more about what your loss strategy exactly was and your experience
    with the outputs?

    Also, nice idea with the cosine similarities! Might I ask what you compared and
    how similar they are?'
  created_at: 2023-10-26 15:40:55+00:00
  edited: true
  hidden: false
  id: 653a96977721c7df13367cca
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/2b358bb3369231a36be4013a95cb4137.svg
      fullname: a
      isHf: false
      isOrgMember: false
      isOwner: true
      isPro: false
      name: furusu
      type: user
    createdAt: '2023-10-27T01:56:10.000Z'
    data:
      edited: false
      editors:
      - furusu
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7805405259132385
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/2b358bb3369231a36be4013a95cb4137.svg
          fullname: a
          isHf: false
          isPro: false
          name: furusu
          type: user
        html: "<p>I attempted a merge based on the following formula.<br>NewModel\
          \ = SSD-1B + w * ( FINETUNEDSDXL - SDXL)</p>\n<p>However, since the correspondence\
          \ was not known, especially for layers with reduced transformer_depth, a\
          \ comparison was made in terms of cosine similarity.</p>\n<pre><code class=\"\
          language-python\"><span class=\"hljs-keyword\">import</span> torch\n<span\
          \ class=\"hljs-keyword\">from</span> torch.nn.functional <span class=\"\
          hljs-keyword\">import</span> cosine_similarity\n<span class=\"hljs-keyword\"\
          >import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\nsdxl =\
          \ torch.load(<span class=\"hljs-string\">\"sdxl.pt\"</span>) <span class=\"\
          hljs-comment\"># diffusers unet</span>\nssd = torch.load(<span class=\"\
          hljs-string\">\"ssd.pt\"</span>)\n\nsdxl_keys = [key.replace(<span class=\"\
          hljs-string\">\"to_q.weight\"</span>, <span class=\"hljs-string\">\"\"</span>)\
          \ <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-keyword\"\
          >in</span> sdxl.keys() <span class=\"hljs-keyword\">if</span> <span class=\"\
          hljs-string\">\"to_q.weight\"</span> <span class=\"hljs-keyword\">in</span>\
          \ key]\nssd_keys = [key.replace(<span class=\"hljs-string\">\"to_q.weight\"\
          </span>, <span class=\"hljs-string\">\"\"</span>) <span class=\"hljs-keyword\"\
          >for</span> key <span class=\"hljs-keyword\">in</span> ssd.keys()  <span\
          \ class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\"to_q.weight\"\
          </span> <span class=\"hljs-keyword\">in</span> key]\n\nssd2sdxl = {\n  \
          \  <span class=\"hljs-string\">\"to_q\"</span>: {},\n    <span class=\"\
          hljs-string\">\"to_k\"</span>: {},\n    <span class=\"hljs-string\">\"to_v\"\
          </span>: {},\n    <span class=\"hljs-string\">\"to_out.0\"</span>: {}\n\
          }\n\n<span class=\"hljs-keyword\">for</span> to_x <span class=\"hljs-keyword\"\
          >in</span> ssd2sdxl.keys():\n    <span class=\"hljs-keyword\">for</span>\
          \ ssd_key <span class=\"hljs-keyword\">in</span> ssd_keys:\n        sims\
          \ = []\n        target = ssd[ssd_key+to_x+<span class=\"hljs-string\">\"\
          .weight\"</span>]\n        <span class=\"hljs-keyword\">for</span> sdxl_key\
          \ <span class=\"hljs-keyword\">in</span> sdxl_keys:\n            <span class=\"\
          hljs-keyword\">if</span> target.shape == sdxl[sdxl_key+to_x+<span class=\"\
          hljs-string\">\".weight\"</span>].shape:\n                sims.append(cosine_similarity(target.view(<span\
          \ class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>),\
          \ sdxl[sdxl_key+to_x+<span class=\"hljs-string\">\".weight\"</span>].view(<span\
          \ class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>)).item())\n\
          \            <span class=\"hljs-keyword\">else</span>:\n               \
          \ sims.append(-<span class=\"hljs-number\">100</span>)\n        ssd2sdxl[to_x][ssd_key]\
          \ = sdxl_keys[np.array(sims).argmax()]\n\n<span class=\"hljs-built_in\"\
          >print</span>(ssd2sdxl[<span class=\"hljs-string\">\"to_q\"</span>] == ssd2sdxl[<span\
          \ class=\"hljs-string\">\"to_k\"</span>] == ssd2sdxl[<span class=\"hljs-string\"\
          >\"to_v\"</span>] == ssd2sdxl[<span class=\"hljs-string\">\"to_out.0\"</span>])\
          \ <span class=\"hljs-comment\"># True</span>\n\nssd2sdxl[<span class=\"\
          hljs-string\">\"to_q\"</span>]\n</code></pre>\n<p>The output is <a rel=\"\
          nofollow\" href=\"https://gist.github.com/laksjdjf/eddeda74a90ddaaaf4c51aea1ece7d01/8f66380b62bb44815005fdbbe5cadb466e4da1af\"\
          >here</a><br>The results for <code>up_blocks.0.attentions.2</code> were\
          \ odd, so I changed them manually.</p>\n<p>Since w=1 had little effect and\
          \ w=1.5 resulted in a coarser image, w=1.3 was used.</p>\n<p>To further\
          \ improve accuracy, I have distilled the model down to the original model.\
          \ The only loss is the squared error of the final output.<br>The data set\
          \ consists of 30,000 actual images.</p>\n"
        raw: "I attempted a merge based on the following formula.\nNewModel = SSD-1B\
          \ + w * ( FINETUNEDSDXL - SDXL)\n\nHowever, since the correspondence was\
          \ not known, especially for layers with reduced transformer_depth, a comparison\
          \ was made in terms of cosine similarity.\n\n```python\nimport torch\nfrom\
          \ torch.nn.functional import cosine_similarity\nimport numpy as np\n\nsdxl\
          \ = torch.load(\"sdxl.pt\") # diffusers unet\nssd = torch.load(\"ssd.pt\"\
          )\n\nsdxl_keys = [key.replace(\"to_q.weight\", \"\") for key in sdxl.keys()\
          \ if \"to_q.weight\" in key]\nssd_keys = [key.replace(\"to_q.weight\", \"\
          \") for key in ssd.keys()  if \"to_q.weight\" in key]\n\nssd2sdxl = {\n\
          \    \"to_q\": {},\n    \"to_k\": {},\n    \"to_v\": {},\n    \"to_out.0\"\
          : {}\n}\n\nfor to_x in ssd2sdxl.keys():\n    for ssd_key in ssd_keys:\n\
          \        sims = []\n        target = ssd[ssd_key+to_x+\".weight\"]\n   \
          \     for sdxl_key in sdxl_keys:\n            if target.shape == sdxl[sdxl_key+to_x+\"\
          .weight\"].shape:\n                sims.append(cosine_similarity(target.view(1,-1),\
          \ sdxl[sdxl_key+to_x+\".weight\"].view(1,-1)).item())\n            else:\n\
          \                sims.append(-100)\n        ssd2sdxl[to_x][ssd_key] = sdxl_keys[np.array(sims).argmax()]\n\
          \nprint(ssd2sdxl[\"to_q\"] == ssd2sdxl[\"to_k\"] == ssd2sdxl[\"to_v\"] ==\
          \ ssd2sdxl[\"to_out.0\"]) # True\n\nssd2sdxl[\"to_q\"]\n```\n\nThe output\
          \ is [here](https://gist.github.com/laksjdjf/eddeda74a90ddaaaf4c51aea1ece7d01/8f66380b62bb44815005fdbbe5cadb466e4da1af)\n\
          The results for `up_blocks.0.attentions.2` were odd, so I changed them manually.\n\
          \nSince w=1 had little effect and w=1.5 resulted in a coarser image, w=1.3\
          \ was used.\n\nTo further improve accuracy, I have distilled the model down\
          \ to the original model. The only loss is the squared error of the final\
          \ output.\nThe data set consists of 30,000 actual images."
        updatedAt: '2023-10-27T01:56:10.730Z'
      numEdits: 0
      reactions: []
    id: 653b18ba9b855c3b5283c6f5
    type: comment
  author: furusu
  content: "I attempted a merge based on the following formula.\nNewModel = SSD-1B\
    \ + w * ( FINETUNEDSDXL - SDXL)\n\nHowever, since the correspondence was not known,\
    \ especially for layers with reduced transformer_depth, a comparison was made\
    \ in terms of cosine similarity.\n\n```python\nimport torch\nfrom torch.nn.functional\
    \ import cosine_similarity\nimport numpy as np\n\nsdxl = torch.load(\"sdxl.pt\"\
    ) # diffusers unet\nssd = torch.load(\"ssd.pt\")\n\nsdxl_keys = [key.replace(\"\
    to_q.weight\", \"\") for key in sdxl.keys() if \"to_q.weight\" in key]\nssd_keys\
    \ = [key.replace(\"to_q.weight\", \"\") for key in ssd.keys()  if \"to_q.weight\"\
    \ in key]\n\nssd2sdxl = {\n    \"to_q\": {},\n    \"to_k\": {},\n    \"to_v\"\
    : {},\n    \"to_out.0\": {}\n}\n\nfor to_x in ssd2sdxl.keys():\n    for ssd_key\
    \ in ssd_keys:\n        sims = []\n        target = ssd[ssd_key+to_x+\".weight\"\
    ]\n        for sdxl_key in sdxl_keys:\n            if target.shape == sdxl[sdxl_key+to_x+\"\
    .weight\"].shape:\n                sims.append(cosine_similarity(target.view(1,-1),\
    \ sdxl[sdxl_key+to_x+\".weight\"].view(1,-1)).item())\n            else:\n   \
    \             sims.append(-100)\n        ssd2sdxl[to_x][ssd_key] = sdxl_keys[np.array(sims).argmax()]\n\
    \nprint(ssd2sdxl[\"to_q\"] == ssd2sdxl[\"to_k\"] == ssd2sdxl[\"to_v\"] == ssd2sdxl[\"\
    to_out.0\"]) # True\n\nssd2sdxl[\"to_q\"]\n```\n\nThe output is [here](https://gist.github.com/laksjdjf/eddeda74a90ddaaaf4c51aea1ece7d01/8f66380b62bb44815005fdbbe5cadb466e4da1af)\n\
    The results for `up_blocks.0.attentions.2` were odd, so I changed them manually.\n\
    \nSince w=1 had little effect and w=1.5 resulted in a coarser image, w=1.3 was\
    \ used.\n\nTo further improve accuracy, I have distilled the model down to the\
    \ original model. The only loss is the squared error of the final output.\nThe\
    \ data set consists of 30,000 actual images."
  created_at: 2023-10-27 00:56:10+00:00
  edited: false
  hidden: false
  id: 653b18ba9b855c3b5283c6f5
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/2b358bb3369231a36be4013a95cb4137.svg
      fullname: a
      isHf: false
      isOrgMember: false
      isOwner: true
      isPro: false
      name: furusu
      type: user
    createdAt: '2023-10-27T02:03:32.000Z'
    data:
      edited: false
      editors:
      - furusu
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9587979912757874
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/2b358bb3369231a36be4013a95cb4137.svg
          fullname: a
          isHf: false
          isPro: false
          name: furusu
          type: user
        html: '<p>I don''t know about a detailed performance comparison, but I believe
          this method is superior to distilling or fine-tuning from scratch.</p>

          '
        raw: I don't know about a detailed performance comparison, but I believe this
          method is superior to distilling or fine-tuning from scratch.
        updatedAt: '2023-10-27T02:03:32.357Z'
      numEdits: 0
      reactions: []
    id: 653b1a74356cacb595ccef7f
    type: comment
  author: furusu
  content: I don't know about a detailed performance comparison, but I believe this
    method is superior to distilling or fine-tuning from scratch.
  created_at: 2023-10-27 01:03:32+00:00
  edited: false
  hidden: false
  id: 653b1a74356cacb595ccef7f
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/639362039694ec0d025f194d/jmQetjDK3ISH_IQb7SBGC.png?w=200&h=200&f=face
      fullname: Vishnu V Jaddipal
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Icar
      type: user
    createdAt: '2023-10-27T02:52:17.000Z'
    data:
      edited: false
      editors:
      - Icar
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5980686545372009
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/639362039694ec0d025f194d/jmQetjDK3ISH_IQb7SBGC.png?w=200&h=200&f=face
          fullname: Vishnu V Jaddipal
          isHf: false
          isPro: false
          name: Icar
          type: user
        html: '<p>Ah, nice observations. Arigato!</p>

          '
        raw: Ah, nice observations. Arigato!
        updatedAt: '2023-10-27T02:52:17.709Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\U0001F917"
        users:
        - furusu
    id: 653b25e17c43a8627ee675a0
    type: comment
  author: Icar
  content: Ah, nice observations. Arigato!
  created_at: 2023-10-27 01:52:17+00:00
  edited: false
  hidden: false
  id: 653b25e17c43a8627ee675a0
  type: comment
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/639362039694ec0d025f194d/jmQetjDK3ISH_IQb7SBGC.png?w=200&h=200&f=face
      fullname: Vishnu V Jaddipal
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Icar
      type: user
    createdAt: '2023-10-27T05:35:31.000Z'
    data:
      status: closed
    id: 653b4c23024b6cd30f1121ee
    type: status-change
  author: Icar
  created_at: 2023-10-27 04:35:31+00:00
  id: 653b4c23024b6cd30f1121ee
  new_status: closed
  type: status-change
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: furusu/SSD-1B-anime
repo_type: model
status: closed
target_branch: null
title: Regd. your implementation
