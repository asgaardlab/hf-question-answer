!!python/object:huggingface_hub.community.DiscussionWithDetails
author: philgrey
conflicting_files: null
created_at: 2023-12-18 02:58:13+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/noauth/ixKl5PVwauxFVuRMwv-ON.jpeg?w=200&h=200&f=face
      fullname: John Grey
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: philgrey
      type: user
    createdAt: '2023-12-18T02:58:13.000Z'
    data:
      edited: false
      editors:
      - philgrey
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5451310873031616
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/noauth/ixKl5PVwauxFVuRMwv-ON.jpeg?w=200&h=200&f=face
          fullname: John Grey
          isHf: false
          isPro: false
          name: philgrey
          type: user
        html: "<p>I've built sagemaker endpoint and wanna generate embedding vector\
          \ but, it seems that I can't do it with this model.</p>\n<p>I'm showing\
          \ contenthandler.</p>\n<p>class ContentHandler(EmbeddingsContentHandler):<br>\
          \    content_type = \"application/json\"<br>    accepts = \"application/json\"\
          </p>\n<pre><code>def transform_input(self, inputs: list[str], model_kwargs:\
          \ Dict) -&gt; bytes:\n    \"\"\"\n    Transforms the input into bytes that\
          \ can be consumed by SageMaker endpoint.\n    Args:\n        inputs: List\
          \ of input strings.\n        model_kwargs: Additional keyword arguments\
          \ to be passed to the endpoint.\n    Returns:\n        The transformed bytes\
          \ input.\n    \"\"\"\n    # Example: inference.py expects a JSON string\
          \ with a \"inputs\" key:\n    input_str = ' '.join(inputs)\n    input_str\
          \ = json.dumps({\"inputs\": input_str, **model_kwargs})\n    return input_str.encode(\"\
          utf-8\")\n\ndef transform_output(self, output: bytes) -&gt; List[List[float]]:\n\
          \    \"\"\"\n    Transforms the bytes output from the endpoint into a list\
          \ of embeddings.\n    Args:\n        output: The bytes output from SageMaker\
          \ endpoint.\n    Returns:\n        The transformed output - list of embeddings\n\
          \    Note:\n        The length of the outer list is the number of input\
          \ strings.\n        The length of the inner lists is the embedding dimension.\n\
          \    \"\"\"\n    # Example: inference.py returns a JSON string with the\
          \ list of\n    # embeddings in a \"vectors\" key:\n    response_json = json.loads(output.read().decode(\"\
          utf-8\"))\n    return response_json\n</code></pre>\n"
        raw: "I've built sagemaker endpoint and wanna generate embedding vector but,\
          \ it seems that I can't do it with this model.\r\n\r\nI'm showing contenthandler.\r\
          \n\r\nclass ContentHandler(EmbeddingsContentHandler):\r\n    content_type\
          \ = \"application/json\"\r\n    accepts = \"application/json\"\r\n\r\n \
          \   def transform_input(self, inputs: list[str], model_kwargs: Dict) ->\
          \ bytes:\r\n        \"\"\"\r\n        Transforms the input into bytes that\
          \ can be consumed by SageMaker endpoint.\r\n        Args:\r\n          \
          \  inputs: List of input strings.\r\n            model_kwargs: Additional\
          \ keyword arguments to be passed to the endpoint.\r\n        Returns:\r\n\
          \            The transformed bytes input.\r\n        \"\"\"\r\n        #\
          \ Example: inference.py expects a JSON string with a \"inputs\" key:\r\n\
          \        input_str = ' '.join(inputs)\r\n        input_str = json.dumps({\"\
          inputs\": input_str, **model_kwargs})\r\n        return input_str.encode(\"\
          utf-8\")\r\n\r\n    def transform_output(self, output: bytes) -> List[List[float]]:\r\
          \n        \"\"\"\r\n        Transforms the bytes output from the endpoint\
          \ into a list of embeddings.\r\n        Args:\r\n            output: The\
          \ bytes output from SageMaker endpoint.\r\n        Returns:\r\n        \
          \    The transformed output - list of embeddings\r\n        Note:\r\n  \
          \          The length of the outer list is the number of input strings.\r\
          \n            The length of the inner lists is the embedding dimension.\r\
          \n        \"\"\"\r\n        # Example: inference.py returns a JSON string\
          \ with the list of\r\n        # embeddings in a \"vectors\" key:\r\n   \
          \     response_json = json.loads(output.read().decode(\"utf-8\"))\r\n  \
          \      return response_json"
        updatedAt: '2023-12-18T02:58:13.623Z'
      numEdits: 0
      reactions: []
    id: 657fb54542fc53e18b833721
    type: comment
  author: philgrey
  content: "I've built sagemaker endpoint and wanna generate embedding vector but,\
    \ it seems that I can't do it with this model.\r\n\r\nI'm showing contenthandler.\r\
    \n\r\nclass ContentHandler(EmbeddingsContentHandler):\r\n    content_type = \"\
    application/json\"\r\n    accepts = \"application/json\"\r\n\r\n    def transform_input(self,\
    \ inputs: list[str], model_kwargs: Dict) -> bytes:\r\n        \"\"\"\r\n     \
    \   Transforms the input into bytes that can be consumed by SageMaker endpoint.\r\
    \n        Args:\r\n            inputs: List of input strings.\r\n            model_kwargs:\
    \ Additional keyword arguments to be passed to the endpoint.\r\n        Returns:\r\
    \n            The transformed bytes input.\r\n        \"\"\"\r\n        # Example:\
    \ inference.py expects a JSON string with a \"inputs\" key:\r\n        input_str\
    \ = ' '.join(inputs)\r\n        input_str = json.dumps({\"inputs\": input_str,\
    \ **model_kwargs})\r\n        return input_str.encode(\"utf-8\")\r\n\r\n    def\
    \ transform_output(self, output: bytes) -> List[List[float]]:\r\n        \"\"\"\
    \r\n        Transforms the bytes output from the endpoint into a list of embeddings.\r\
    \n        Args:\r\n            output: The bytes output from SageMaker endpoint.\r\
    \n        Returns:\r\n            The transformed output - list of embeddings\r\
    \n        Note:\r\n            The length of the outer list is the number of input\
    \ strings.\r\n            The length of the inner lists is the embedding dimension.\r\
    \n        \"\"\"\r\n        # Example: inference.py returns a JSON string with\
    \ the list of\r\n        # embeddings in a \"vectors\" key:\r\n        response_json\
    \ = json.loads(output.read().decode(\"utf-8\"))\r\n        return response_json"
  created_at: 2023-12-18 02:58:13+00:00
  edited: false
  hidden: false
  id: 657fb54542fc53e18b833721
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 106
repo_id: mistralai/Mistral-7B-v0.1
repo_type: model
status: open
target_branch: null
title: can't generate embedding vector
