!!python/object:huggingface_hub.community.DiscussionWithDetails
author: kikouousya
conflicting_files: null
created_at: 2023-10-19 21:08:01+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/cbb96f9f83b8ed994e9b04eeb12204aa.svg
      fullname: kikkkk
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: kikouousya
      type: user
    createdAt: '2023-10-19T22:08:01.000Z'
    data:
      edited: false
      editors:
      - kikouousya
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9359077215194702
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/cbb96f9f83b8ed994e9b04eeb12204aa.svg
          fullname: kikkkk
          isHf: false
          isPro: false
          name: kikouousya
          type: user
        html: '<p>I will be appreciated if there are more imformation(paper, tutorial,
          project, or anything other) about that. Tanks!</p>

          '
        raw: I will be appreciated if there are more imformation(paper, tutorial,
          project, or anything other) about that. Tanks!
        updatedAt: '2023-10-19T22:08:01.628Z'
      numEdits: 0
      reactions: []
    id: 6531a8c1aed617662c7f6ceb
    type: comment
  author: kikouousya
  content: I will be appreciated if there are more imformation(paper, tutorial, project,
    or anything other) about that. Tanks!
  created_at: 2023-10-19 21:08:01+00:00
  edited: false
  hidden: false
  id: 6531a8c1aed617662c7f6ceb
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/cbb96f9f83b8ed994e9b04eeb12204aa.svg
      fullname: kikkkk
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: kikouousya
      type: user
    createdAt: '2023-10-20T01:21:14.000Z'
    data:
      edited: true
      editors:
      - kikouousya
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.6014217734336853
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/cbb96f9f83b8ed994e9b04eeb12204aa.svg
          fullname: kikkkk
          isHf: false
          isPro: false
          name: kikouousya
          type: user
        html: "<p>I tried write one but I wander is <code>Sequential modal, Dense\
          \ layer, sigmoid activation, adam optimizer,  categorical_crossentropy loss\
          \ function</code> ok?<br>if there's any advice, I would be appreciated.</p>\n\
          <pre><code class=\"language-python\"><span class=\"hljs-keyword\">import</span>\
          \ tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\"\
          >import</span> tf2onnx\n\n\n<span class=\"hljs-keyword\">def</span> <span\
          \ class=\"hljs-title function_\">generate_mixed_modal</span>(<span class=\"\
          hljs-params\"></span>\n<span class=\"hljs-params\">        model_path,</span>\n\
          <span class=\"hljs-params\">        feature_extraction_layer,</span>\n<span\
          \ class=\"hljs-params\">        batch_size,  <span class=\"hljs-comment\"\
          ># count of images in each batch</span></span>\n<span class=\"hljs-params\"\
          >        <span class=\"hljs-comment\"># a list of (448, 448, 3) image in\
          \ shape of (batch_size, 448, 448, 3)</span></span>\n<span class=\"hljs-params\"\
          >        <span class=\"hljs-comment\"># can also use Horizontal Flipping,\
          \  Rotation,  Cropping,  Color Jittering,  Gaussian Noise,  etc. to increase\
          \ the dataset?</span></span>\n<span class=\"hljs-params\">        new_data,</span>\n\
          <span class=\"hljs-params\">        <span class=\"hljs-comment\"># a tag\
          \ list in (batch_size, num_classes) (like [[0,0,1], [0,1,0],...] when it\
          \ is a 3 tag problem)</span></span>\n<span class=\"hljs-params\">      \
          \  <span class=\"hljs-comment\"># maybe float value is also ok? using original\
          \ prediction confidence value?</span></span>\n<span class=\"hljs-params\"\
          >        new_labels,</span>\n<span class=\"hljs-params\">        num_classes,\
          \  <span class=\"hljs-comment\"># total tag number</span></span>\n<span\
          \ class=\"hljs-params\">        num_epochs,  <span class=\"hljs-comment\"\
          ># train epochs, each epoch will train all the data</span></span>\n<span\
          \ class=\"hljs-params\">        new_modal_name,</span>\n<span class=\"hljs-params\"\
          ></span>):\n    full_model = tf.keras.models.load_model(model_path)\n  \
          \  <span class=\"hljs-comment\"># get the feature extractor of the layer\
          \ before last layer</span>\n    feature_extractor = tf.keras.models.Model(\n\
          \        full_model.inputs, full_model.get_layer(feature_extraction_layer[-<span\
          \ class=\"hljs-number\">2</span>]).output\n    )\n\n    features = feature_extractor.predict(new_data)\n\
          \    <span class=\"hljs-built_in\">print</span>(features.shape)\n\n    <span\
          \ class=\"hljs-comment\"># dense layer &amp; use sigmoid to predict multiple\
          \ tags?</span>\n    classifier = tf.keras.models.Sequential([\n        tf.keras.layers.Dense(num_classes,\
          \ activation=<span class=\"hljs-string\">'sigmoid'</span>)\n    ])\n\n \
          \   <span class=\"hljs-comment\"># train the classifier</span>\n    <span\
          \ class=\"hljs-comment\"># use adam to automatically adjust learning rate</span>\n\
          \    classifier.<span class=\"hljs-built_in\">compile</span>(optimizer=<span\
          \ class=\"hljs-string\">'adam'</span>, loss=<span class=\"hljs-string\"\
          >'categorical_crossentropy'</span>, metrics=[<span class=\"hljs-string\"\
          >'accuracy'</span>])\n    classifier.fit(features, new_labels, epochs=num_epochs,\
          \ batch_size=batch_size)\n\n    <span class=\"hljs-comment\"># combine the\
          \ feature extractor and classifier</span>\n    new_model = tf.keras.models.Sequential([\n\
          \        feature_extractor,\n        classifier\n    ])\n\n    new_model.<span\
          \ class=\"hljs-built_in\">compile</span>(optimizer=<span class=\"hljs-string\"\
          >'adam'</span>, loss=<span class=\"hljs-string\">'categorical_crossentropy'</span>,\
          \ metrics=[<span class=\"hljs-string\">'accuracy'</span>])\n    tf.keras.models.save_model(new_model,\
          \ new_modal_name + <span class=\"hljs-string\">'.pd'</span>)\n    <span\
          \ class=\"hljs-comment\"># also save to onnx</span>\n    tf2onnx.convert.from_keras(new_model,\
          \ output_path=new_modal_name + <span class=\"hljs-string\">'.onnx'</span>)\n\
          </code></pre>\n"
        raw: "I tried write one but I wander is ```Sequential modal, Dense layer,\
          \ sigmoid activation, adam optimizer,  categorical_crossentropy loss function```\
          \ ok?\nif there's any advice, I would be appreciated.\n``` python\nimport\
          \ tensorflow as tf\nimport tf2onnx\n\n\ndef generate_mixed_modal(\n    \
          \    model_path,\n        feature_extraction_layer,\n        batch_size,\
          \  # count of images in each batch\n        # a list of (448, 448, 3) image\
          \ in shape of (batch_size, 448, 448, 3)\n        # can also use Horizontal\
          \ Flipping,  Rotation,  Cropping,  Color Jittering,  Gaussian Noise,  etc.\
          \ to increase the dataset?\n        new_data,\n        # a tag list in (batch_size,\
          \ num_classes) (like [[0,0,1], [0,1,0],...] when it is a 3 tag problem)\n\
          \        # maybe float value is also ok? using original prediction confidence\
          \ value?\n        new_labels,\n        num_classes,  # total tag number\n\
          \        num_epochs,  # train epochs, each epoch will train all the data\n\
          \        new_modal_name,\n):\n    full_model = tf.keras.models.load_model(model_path)\n\
          \    # get the feature extractor of the layer before last layer\n    feature_extractor\
          \ = tf.keras.models.Model(\n        full_model.inputs, full_model.get_layer(feature_extraction_layer[-2]).output\n\
          \    )\n\n    features = feature_extractor.predict(new_data)\n    print(features.shape)\n\
          \n    # dense layer & use sigmoid to predict multiple tags?\n    classifier\
          \ = tf.keras.models.Sequential([\n        tf.keras.layers.Dense(num_classes,\
          \ activation='sigmoid')\n    ])\n\n    # train the classifier\n    # use\
          \ adam to automatically adjust learning rate\n    classifier.compile(optimizer='adam',\
          \ loss='categorical_crossentropy', metrics=['accuracy'])\n    classifier.fit(features,\
          \ new_labels, epochs=num_epochs, batch_size=batch_size)\n\n    # combine\
          \ the feature extractor and classifier\n    new_model = tf.keras.models.Sequential([\n\
          \        feature_extractor,\n        classifier\n    ])\n\n    new_model.compile(optimizer='adam',\
          \ loss='categorical_crossentropy', metrics=['accuracy'])\n    tf.keras.models.save_model(new_model,\
          \ new_modal_name + '.pd')\n    # also save to onnx\n    tf2onnx.convert.from_keras(new_model,\
          \ output_path=new_modal_name + '.onnx')\n\n```"
        updatedAt: '2023-10-20T01:30:24.631Z'
      numEdits: 2
      reactions: []
    id: 6531d60a791d5a261150bd17
    type: comment
  author: kikouousya
  content: "I tried write one but I wander is ```Sequential modal, Dense layer, sigmoid\
    \ activation, adam optimizer,  categorical_crossentropy loss function``` ok?\n\
    if there's any advice, I would be appreciated.\n``` python\nimport tensorflow\
    \ as tf\nimport tf2onnx\n\n\ndef generate_mixed_modal(\n        model_path,\n\
    \        feature_extraction_layer,\n        batch_size,  # count of images in\
    \ each batch\n        # a list of (448, 448, 3) image in shape of (batch_size,\
    \ 448, 448, 3)\n        # can also use Horizontal Flipping,  Rotation,  Cropping,\
    \  Color Jittering,  Gaussian Noise,  etc. to increase the dataset?\n        new_data,\n\
    \        # a tag list in (batch_size, num_classes) (like [[0,0,1], [0,1,0],...]\
    \ when it is a 3 tag problem)\n        # maybe float value is also ok? using original\
    \ prediction confidence value?\n        new_labels,\n        num_classes,  # total\
    \ tag number\n        num_epochs,  # train epochs, each epoch will train all the\
    \ data\n        new_modal_name,\n):\n    full_model = tf.keras.models.load_model(model_path)\n\
    \    # get the feature extractor of the layer before last layer\n    feature_extractor\
    \ = tf.keras.models.Model(\n        full_model.inputs, full_model.get_layer(feature_extraction_layer[-2]).output\n\
    \    )\n\n    features = feature_extractor.predict(new_data)\n    print(features.shape)\n\
    \n    # dense layer & use sigmoid to predict multiple tags?\n    classifier =\
    \ tf.keras.models.Sequential([\n        tf.keras.layers.Dense(num_classes, activation='sigmoid')\n\
    \    ])\n\n    # train the classifier\n    # use adam to automatically adjust\
    \ learning rate\n    classifier.compile(optimizer='adam', loss='categorical_crossentropy',\
    \ metrics=['accuracy'])\n    classifier.fit(features, new_labels, epochs=num_epochs,\
    \ batch_size=batch_size)\n\n    # combine the feature extractor and classifier\n\
    \    new_model = tf.keras.models.Sequential([\n        feature_extractor,\n  \
    \      classifier\n    ])\n\n    new_model.compile(optimizer='adam', loss='categorical_crossentropy',\
    \ metrics=['accuracy'])\n    tf.keras.models.save_model(new_model, new_modal_name\
    \ + '.pd')\n    # also save to onnx\n    tf2onnx.convert.from_keras(new_model,\
    \ output_path=new_modal_name + '.onnx')\n\n```"
  created_at: 2023-10-20 00:21:14+00:00
  edited: true
  hidden: false
  id: 6531d60a791d5a261150bd17
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 2
repo_id: SmilingWolf/wd-v1-4-moat-tagger-v2
repo_type: model
status: open
target_branch: null
title: I really like this model and Im wandering how to train a modal like this.
