!!python/object:huggingface_hub.community.DiscussionWithDetails
author: Pingiotto
conflicting_files: null
created_at: 2023-08-11 13:43:00+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/2e19b0efd2e371d62a492c416f5d9ca1.svg
      fullname: Matthew Pace
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Pingiotto
      type: user
    createdAt: '2023-08-11T14:43:00.000Z'
    data:
      edited: false
      editors:
      - Pingiotto
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.2839198708534241
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/2e19b0efd2e371d62a492c416f5d9ca1.svg
          fullname: Matthew Pace
          isHf: false
          isPro: false
          name: Pingiotto
          type: user
        html: "<p>I realise this topic has been discussed before, but I have gone\
          \ through previous responses and none of those solutions worked for me.\
          \ I would like to set max_ncells to 'None' but I can only go as far as 6500.\
          \ I tried reducing cell_inds_to_perturb and forward_batch_size, but neither\
          \ was sufficient. The OOM occurs before saving disk so clearing memory more\
          \ often has no effect. I am using an AWS instance with 24GB GPU RAM. Thanks\
          \ in advance!</p>\n<pre><code>    isp = InSilicoPerturber(\n        perturb_type=\"\
          delete\",\n        perturb_rank_shift=None,\n        genes_to_perturb=genes,\n\
          \        combos=0,\n        anchor_gene=None,\n        model_type=\"CellClassifier\"\
          ,\n        num_classes=3,\n        emb_mode=\"cell\",\n        cell_emb_style=\"\
          mean_pool\",\n        filter_data={\"cell_type\":[\"Cardiomyocyte1\",\"\
          Cardiomyocyte2\",\"Cardiomyocyte3\"]},\n        cell_states_to_model={\n\
          \            'state_key': 'disease', \n            'start_state': 'dcm',\
          \ \n            'goal_state': 'nf', \n            'alt_states': ['hcm']\n\
          \        },\n        cell_inds_to_perturb=[{'start': 1, 'end': 1000}],\n\
          \        max_ncells=6500,\n        emb_layer=0,\n        forward_batch_size=3,\n\
          \        nproc=16\n    )\n\n    isp.perturb_data(\n        \"./CellClassifier_cardiomyopathies/\"\
          ,\n        \"./human_dcm_hcm_nf.dataset\",\n        \"./perturb_out/\",\n\
          \        \"prefix_\"\n    )\n</code></pre>\n<p>Error:</p>\n<pre><code>\u256D\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last)\
          \ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E\n\u2502 /home/ubuntu/Geneformer/examples/in_silico_perturbation.py:44\
          \ in &lt;module&gt;                        \u2502\n\u2502              \
          \                                                                      \
          \              \u2502\n\u2502   41                                     \
          \                                                        \u2502\n\u2502\
          \   42 cell_ind_ranges_list=[{'start': 1, 'end': 1000}]                \
          \                            \u2502\n\u2502   43 for x in cell_ind_ranges_list:\
          \                                                              \u2502\n\u2502\
          \ \u2771 44 \u2502   perform_perturb(x)                                \
          \                                      \u2502\n\u2502   45             \
          \                                                                      \
          \          \u2502\n\u2502   46 #with ProcessPoolExecutor(max_workers=len(cell_ind_ranges_list))\
          \ as executor:               \u2502\n\u2502   47 #    executor.map(perform_perturb,\
          \ cell_ind_ranges_list)                                    \u2502\n\u2502\
          \                                                                      \
          \                            \u2502\n\u2502 /home/ubuntu/Geneformer/examples/in_silico_perturbation.py:34\
          \ in perform_perturb                 \u2502\n\u2502                    \
          \                                                                      \
          \        \u2502\n\u2502   31 \u2502   )                                \
          \                                                       \u2502\n\u2502 \
          \  32 \u2502                                                           \
          \                                \u2502\n\u2502   33 \u2502   # outputs\
          \ intermediate files from in silico perturbation                       \
          \         \u2502\n\u2502 \u2771 34 \u2502   isp.perturb_data(          \
          \                                                             \u2502\n\u2502\
          \   35 \u2502   \u2502   \"./CellClassifier_cardiomyopathies/\",       \
          \                                        \u2502\n\u2502   36 \u2502   \u2502\
          \   \"/home/ubuntu/Geneformer/example_input_files/cell_classification/disease_classif\
          \    \u2502\n\u2502   37 \u2502   \u2502   \"./perturb_out/\",         \
          \                                                          \u2502\n\u2502\
          \                                                                      \
          \                            \u2502\n\u2502 /home/ubuntu/miniconda3/lib/python3.10/site-packages/geneformer/in_silico_perturber.py:958\
          \ in    \u2502\n\u2502 perturb_data                                    \
          \                                                 \u2502\n\u2502       \
          \                                                                      \
          \                     \u2502\n\u2502    955 \u2502   \u2502   \u2502   \u2502\
          \   \u2502   raise                                                     \
          \            \u2502\n\u2502    956 \u2502   \u2502   \u2502   # get dictionary\
          \ of average cell state embeddings for comparison              \u2502\n\u2502\
          \    957 \u2502   \u2502   \u2502   downsampled_data = downsample_and_sort(filtered_input_data,\
          \ self.max_ncells)  \u2502\n\u2502 \u2771  958 \u2502   \u2502   \u2502\
          \   state_embs_dict = get_cell_state_avg_embs(model,                   \
          \           \u2502\n\u2502    959 \u2502   \u2502   \u2502   \u2502   \u2502\
          \   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\
          \     downsampled_data,                   \u2502\n\u2502    960 \u2502 \
          \  \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\
          \   \u2502   \u2502   \u2502   \u2502     self.cell_states_to_model,   \
          \       \u2502\n\u2502    961 \u2502   \u2502   \u2502   \u2502   \u2502\
          \   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\
          \     layer_to_quant,                     \u2502\n\u2502               \
          \                                                                      \
          \             \u2502\n\u2502 /home/ubuntu/miniconda3/lib/python3.10/site-packages/geneformer/in_silico_perturber.py:303\
          \ in    \u2502\n\u2502 get_cell_state_avg_embs                         \
          \                                                 \u2502\n\u2502       \
          \                                                                      \
          \                     \u2502\n\u2502    300 \u2502   \u2502   \u2502   torch.cuda.empty_cache()\
          \                                                      \u2502\n\u2502  \
          \  301 \u2502   \u2502                                                 \
          \                                    \u2502\n\u2502    302 \u2502   \u2502\
          \   state_embs = torch.cat(state_embs_list)                            \
          \               \u2502\n\u2502 \u2771  303 \u2502   \u2502   avg_state_emb\
          \ = mean_nonpadding_embs(state_embs, torch.Tensor(original_lens).to(  \u2502\
          \n\u2502    304 \u2502   \u2502   avg_state_emb = torch.mean(avg_state_emb,\
          \ dim=0, keepdim=True)                    \u2502\n\u2502    305 \u2502 \
          \  \u2502   state_embs_dict[possible_state] = avg_state_emb            \
          \                       \u2502\n\u2502    306 \u2502   return state_embs_dict\
          \                                                                \u2502\n\
          \u2502                                                                 \
          \                                 \u2502\n\u2502 /home/ubuntu/miniconda3/lib/python3.10/site-packages/geneformer/in_silico_perturber.py:587\
          \ in    \u2502\n\u2502 mean_nonpadding_embs                            \
          \                                                 \u2502\n\u2502       \
          \                                                                      \
          \                     \u2502\n\u2502    584 \u2502   mask = mask.unsqueeze(2).expand_as(embs)\
          \                                              \u2502\n\u2502    585 \u2502\
          \                                                                      \
          \                   \u2502\n\u2502    586 \u2502   # use the mask to zero\
          \ out the embeddings in padded areas                             \u2502\n\
          \u2502 \u2771  587 \u2502   masked_embs = embs * mask.float()          \
          \                                           \u2502\n\u2502    588 \u2502\
          \                                                                      \
          \                   \u2502\n\u2502    589 \u2502   # sum and divide by the\
          \ lengths to get the mean of non-padding embs                   \u2502\n\
          \u2502    590 \u2502   mean_embs = masked_embs.sum(1) / original_lens.view(-1,\
          \ 1).float()                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\n</code></pre>\n"
        raw: "I realise this topic has been discussed before, but I have gone through\
          \ previous responses and none of those solutions worked for me. I would\
          \ like to set max_ncells to 'None' but I can only go as far as 6500. I tried\
          \ reducing cell_inds_to_perturb and forward_batch_size, but neither was\
          \ sufficient. The OOM occurs before saving disk so clearing memory more\
          \ often has no effect. I am using an AWS instance with 24GB GPU RAM. Thanks\
          \ in advance!\r\n\r\n\r\n```\r\n    isp = InSilicoPerturber(\r\n       \
          \ perturb_type=\"delete\",\r\n        perturb_rank_shift=None,\r\n     \
          \   genes_to_perturb=genes,\r\n        combos=0,\r\n        anchor_gene=None,\r\
          \n        model_type=\"CellClassifier\",\r\n        num_classes=3,\r\n \
          \       emb_mode=\"cell\",\r\n        cell_emb_style=\"mean_pool\",\r\n\
          \        filter_data={\"cell_type\":[\"Cardiomyocyte1\",\"Cardiomyocyte2\"\
          ,\"Cardiomyocyte3\"]},\r\n        cell_states_to_model={\r\n           \
          \ 'state_key': 'disease', \r\n            'start_state': 'dcm', \r\n   \
          \         'goal_state': 'nf', \r\n            'alt_states': ['hcm']\r\n\
          \        },\r\n        cell_inds_to_perturb=[{'start': 1, 'end': 1000}],\r\
          \n        max_ncells=6500,\r\n        emb_layer=0,\r\n        forward_batch_size=3,\r\
          \n        nproc=16\r\n    )\r\n\r\n    isp.perturb_data(\r\n        \"./CellClassifier_cardiomyopathies/\"\
          ,\r\n        \"./human_dcm_hcm_nf.dataset\",\r\n        \"./perturb_out/\"\
          ,\r\n        \"prefix_\"\r\n    )\r\n```\r\nError:\r\n```\r\n\u256D\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E\r\n\u2502 /home/ubuntu/Geneformer/examples/in_silico_perturbation.py:44\
          \ in <module>                        \u2502\r\n\u2502                  \
          \                                                                      \
          \          \u2502\r\n\u2502   41                                       \
          \                                                      \u2502\r\n\u2502\
          \   42 cell_ind_ranges_list=[{'start': 1, 'end': 1000}]                \
          \                            \u2502\r\n\u2502   43 for x in cell_ind_ranges_list:\
          \                                                              \u2502\r\n\
          \u2502 \u2771 44 \u2502   perform_perturb(x)                           \
          \                                           \u2502\r\n\u2502   45      \
          \                                                                      \
          \                 \u2502\r\n\u2502   46 #with ProcessPoolExecutor(max_workers=len(cell_ind_ranges_list))\
          \ as executor:               \u2502\r\n\u2502   47 #    executor.map(perform_perturb,\
          \ cell_ind_ranges_list)                                    \u2502\r\n\u2502\
          \                                                                      \
          \                            \u2502\r\n\u2502 /home/ubuntu/Geneformer/examples/in_silico_perturbation.py:34\
          \ in perform_perturb                 \u2502\r\n\u2502                  \
          \                                                                      \
          \          \u2502\r\n\u2502   31 \u2502   )                            \
          \                                                           \u2502\r\n\u2502\
          \   32 \u2502                                                          \
          \                                 \u2502\r\n\u2502   33 \u2502   # outputs\
          \ intermediate files from in silico perturbation                       \
          \         \u2502\r\n\u2502 \u2771 34 \u2502   isp.perturb_data(        \
          \                                                               \u2502\r\
          \n\u2502   35 \u2502   \u2502   \"./CellClassifier_cardiomyopathies/\",\
          \                                               \u2502\r\n\u2502   36 \u2502\
          \   \u2502   \"/home/ubuntu/Geneformer/example_input_files/cell_classification/disease_classif\
          \    \u2502\r\n\u2502   37 \u2502   \u2502   \"./perturb_out/\",       \
          \                                                            \u2502\r\n\u2502\
          \                                                                      \
          \                            \u2502\r\n\u2502 /home/ubuntu/miniconda3/lib/python3.10/site-packages/geneformer/in_silico_perturber.py:958\
          \ in    \u2502\r\n\u2502 perturb_data                                  \
          \                                                   \u2502\r\n\u2502   \
          \                                                                      \
          \                         \u2502\r\n\u2502    955 \u2502   \u2502   \u2502\
          \   \u2502   \u2502   raise                                            \
          \                     \u2502\r\n\u2502    956 \u2502   \u2502   \u2502 \
          \  # get dictionary of average cell state embeddings for comparison    \
          \          \u2502\r\n\u2502    957 \u2502   \u2502   \u2502   downsampled_data\
          \ = downsample_and_sort(filtered_input_data, self.max_ncells)  \u2502\r\n\
          \u2502 \u2771  958 \u2502   \u2502   \u2502   state_embs_dict = get_cell_state_avg_embs(model,\
          \                              \u2502\r\n\u2502    959 \u2502   \u2502 \
          \  \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\
          \   \u2502   \u2502   \u2502     downsampled_data,                   \u2502\
          \r\n\u2502    960 \u2502   \u2502   \u2502   \u2502   \u2502   \u2502  \
          \ \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502     self.cell_states_to_model,\
          \          \u2502\r\n\u2502    961 \u2502   \u2502   \u2502   \u2502   \u2502\
          \   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\
          \     layer_to_quant,                     \u2502\r\n\u2502             \
          \                                                                      \
          \               \u2502\r\n\u2502 /home/ubuntu/miniconda3/lib/python3.10/site-packages/geneformer/in_silico_perturber.py:303\
          \ in    \u2502\r\n\u2502 get_cell_state_avg_embs                       \
          \                                                   \u2502\r\n\u2502   \
          \                                                                      \
          \                         \u2502\r\n\u2502    300 \u2502   \u2502   \u2502\
          \   torch.cuda.empty_cache()                                           \
          \           \u2502\r\n\u2502    301 \u2502   \u2502                    \
          \                                                                 \u2502\
          \r\n\u2502    302 \u2502   \u2502   state_embs = torch.cat(state_embs_list)\
          \                                           \u2502\r\n\u2502 \u2771  303\
          \ \u2502   \u2502   avg_state_emb = mean_nonpadding_embs(state_embs, torch.Tensor(original_lens).to(\
          \  \u2502\r\n\u2502    304 \u2502   \u2502   avg_state_emb = torch.mean(avg_state_emb,\
          \ dim=0, keepdim=True)                    \u2502\r\n\u2502    305 \u2502\
          \   \u2502   state_embs_dict[possible_state] = avg_state_emb           \
          \                        \u2502\r\n\u2502    306 \u2502   return state_embs_dict\
          \                                                                \u2502\r\
          \n\u2502                                                               \
          \                                   \u2502\r\n\u2502 /home/ubuntu/miniconda3/lib/python3.10/site-packages/geneformer/in_silico_perturber.py:587\
          \ in    \u2502\r\n\u2502 mean_nonpadding_embs                          \
          \                                                   \u2502\r\n\u2502   \
          \                                                                      \
          \                         \u2502\r\n\u2502    584 \u2502   mask = mask.unsqueeze(2).expand_as(embs)\
          \                                              \u2502\r\n\u2502    585 \u2502\
          \                                                                      \
          \                   \u2502\r\n\u2502    586 \u2502   # use the mask to zero\
          \ out the embeddings in padded areas                             \u2502\r\
          \n\u2502 \u2771  587 \u2502   masked_embs = embs * mask.float()        \
          \                                             \u2502\r\n\u2502    588 \u2502\
          \                                                                      \
          \                   \u2502\r\n\u2502    589 \u2502   # sum and divide by\
          \ the lengths to get the mean of non-padding embs                   \u2502\
          \r\n\u2502    590 \u2502   mean_embs = masked_embs.sum(1) / original_lens.view(-1,\
          \ 1).float()                    \u2502\r\n\u2570\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
          \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\r\n```"
        updatedAt: '2023-08-11T14:43:00.042Z'
      numEdits: 0
      reactions: []
    id: 64d648f42fe2c112641414df
    type: comment
  author: Pingiotto
  content: "I realise this topic has been discussed before, but I have gone through\
    \ previous responses and none of those solutions worked for me. I would like to\
    \ set max_ncells to 'None' but I can only go as far as 6500. I tried reducing\
    \ cell_inds_to_perturb and forward_batch_size, but neither was sufficient. The\
    \ OOM occurs before saving disk so clearing memory more often has no effect. I\
    \ am using an AWS instance with 24GB GPU RAM. Thanks in advance!\r\n\r\n\r\n```\r\
    \n    isp = InSilicoPerturber(\r\n        perturb_type=\"delete\",\r\n       \
    \ perturb_rank_shift=None,\r\n        genes_to_perturb=genes,\r\n        combos=0,\r\
    \n        anchor_gene=None,\r\n        model_type=\"CellClassifier\",\r\n    \
    \    num_classes=3,\r\n        emb_mode=\"cell\",\r\n        cell_emb_style=\"\
    mean_pool\",\r\n        filter_data={\"cell_type\":[\"Cardiomyocyte1\",\"Cardiomyocyte2\"\
    ,\"Cardiomyocyte3\"]},\r\n        cell_states_to_model={\r\n            'state_key':\
    \ 'disease', \r\n            'start_state': 'dcm', \r\n            'goal_state':\
    \ 'nf', \r\n            'alt_states': ['hcm']\r\n        },\r\n        cell_inds_to_perturb=[{'start':\
    \ 1, 'end': 1000}],\r\n        max_ncells=6500,\r\n        emb_layer=0,\r\n  \
    \      forward_batch_size=3,\r\n        nproc=16\r\n    )\r\n\r\n    isp.perturb_data(\r\
    \n        \"./CellClassifier_cardiomyopathies/\",\r\n        \"./human_dcm_hcm_nf.dataset\"\
    ,\r\n        \"./perturb_out/\",\r\n        \"prefix_\"\r\n    )\r\n```\r\nError:\r\
    \n```\r\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u256E\r\n\u2502 /home/ubuntu/Geneformer/examples/in_silico_perturbation.py:44\
    \ in <module>                        \u2502\r\n\u2502                        \
    \                                                                          \u2502\
    \r\n\u2502   41                                                              \
    \                               \u2502\r\n\u2502   42 cell_ind_ranges_list=[{'start':\
    \ 1, 'end': 1000}]                                            \u2502\r\n\u2502\
    \   43 for x in cell_ind_ranges_list:                                        \
    \                      \u2502\r\n\u2502 \u2771 44 \u2502   perform_perturb(x)\
    \                                                                      \u2502\r\
    \n\u2502   45                                                                \
    \                             \u2502\r\n\u2502   46 #with ProcessPoolExecutor(max_workers=len(cell_ind_ranges_list))\
    \ as executor:               \u2502\r\n\u2502   47 #    executor.map(perform_perturb,\
    \ cell_ind_ranges_list)                                    \u2502\r\n\u2502  \
    \                                                                            \
    \                    \u2502\r\n\u2502 /home/ubuntu/Geneformer/examples/in_silico_perturbation.py:34\
    \ in perform_perturb                 \u2502\r\n\u2502                        \
    \                                                                          \u2502\
    \r\n\u2502   31 \u2502   )                                                   \
    \                                    \u2502\r\n\u2502   32 \u2502            \
    \                                                                            \
    \   \u2502\r\n\u2502   33 \u2502   # outputs intermediate files from in silico\
    \ perturbation                                \u2502\r\n\u2502 \u2771 34 \u2502\
    \   isp.perturb_data(                                                        \
    \               \u2502\r\n\u2502   35 \u2502   \u2502   \"./CellClassifier_cardiomyopathies/\"\
    ,                                               \u2502\r\n\u2502   36 \u2502 \
    \  \u2502   \"/home/ubuntu/Geneformer/example_input_files/cell_classification/disease_classif\
    \    \u2502\r\n\u2502   37 \u2502   \u2502   \"./perturb_out/\",             \
    \                                                      \u2502\r\n\u2502      \
    \                                                                            \
    \                \u2502\r\n\u2502 /home/ubuntu/miniconda3/lib/python3.10/site-packages/geneformer/in_silico_perturber.py:958\
    \ in    \u2502\r\n\u2502 perturb_data                                        \
    \                                             \u2502\r\n\u2502               \
    \                                                                            \
    \       \u2502\r\n\u2502    955 \u2502   \u2502   \u2502   \u2502   \u2502   raise\
    \                                                                 \u2502\r\n\u2502\
    \    956 \u2502   \u2502   \u2502   # get dictionary of average cell state embeddings\
    \ for comparison              \u2502\r\n\u2502    957 \u2502   \u2502   \u2502\
    \   downsampled_data = downsample_and_sort(filtered_input_data, self.max_ncells)\
    \  \u2502\r\n\u2502 \u2771  958 \u2502   \u2502   \u2502   state_embs_dict = get_cell_state_avg_embs(model,\
    \                              \u2502\r\n\u2502    959 \u2502   \u2502   \u2502\
    \   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\
    \   \u2502     downsampled_data,                   \u2502\r\n\u2502    960 \u2502\
    \   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\
    \   \u2502   \u2502   \u2502     self.cell_states_to_model,          \u2502\r\n\
    \u2502    961 \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\
    \   \u2502   \u2502   \u2502   \u2502   \u2502     layer_to_quant,           \
    \          \u2502\r\n\u2502                                                  \
    \                                                \u2502\r\n\u2502 /home/ubuntu/miniconda3/lib/python3.10/site-packages/geneformer/in_silico_perturber.py:303\
    \ in    \u2502\r\n\u2502 get_cell_state_avg_embs                             \
    \                                             \u2502\r\n\u2502               \
    \                                                                            \
    \       \u2502\r\n\u2502    300 \u2502   \u2502   \u2502   torch.cuda.empty_cache()\
    \                                                      \u2502\r\n\u2502    301\
    \ \u2502   \u2502                                                            \
    \                         \u2502\r\n\u2502    302 \u2502   \u2502   state_embs\
    \ = torch.cat(state_embs_list)                                           \u2502\
    \r\n\u2502 \u2771  303 \u2502   \u2502   avg_state_emb = mean_nonpadding_embs(state_embs,\
    \ torch.Tensor(original_lens).to(  \u2502\r\n\u2502    304 \u2502   \u2502   avg_state_emb\
    \ = torch.mean(avg_state_emb, dim=0, keepdim=True)                    \u2502\r\
    \n\u2502    305 \u2502   \u2502   state_embs_dict[possible_state] = avg_state_emb\
    \                                   \u2502\r\n\u2502    306 \u2502   return state_embs_dict\
    \                                                                \u2502\r\n\u2502\
    \                                                                            \
    \                      \u2502\r\n\u2502 /home/ubuntu/miniconda3/lib/python3.10/site-packages/geneformer/in_silico_perturber.py:587\
    \ in    \u2502\r\n\u2502 mean_nonpadding_embs                                \
    \                                             \u2502\r\n\u2502               \
    \                                                                            \
    \       \u2502\r\n\u2502    584 \u2502   mask = mask.unsqueeze(2).expand_as(embs)\
    \                                              \u2502\r\n\u2502    585 \u2502\
    \                                                                            \
    \             \u2502\r\n\u2502    586 \u2502   # use the mask to zero out the\
    \ embeddings in padded areas                             \u2502\r\n\u2502 \u2771\
    \  587 \u2502   masked_embs = embs * mask.float()                            \
    \                         \u2502\r\n\u2502    588 \u2502                     \
    \                                                                    \u2502\r\n\
    \u2502    589 \u2502   # sum and divide by the lengths to get the mean of non-padding\
    \ embs                   \u2502\r\n\u2502    590 \u2502   mean_embs = masked_embs.sum(1)\
    \ / original_lens.view(-1, 1).float()                    \u2502\r\n\u2570\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
    \u2500\u2500\u2500\u2500\u2500\u2500\u256F\r\n```"
  created_at: 2023-08-11 13:43:00+00:00
  edited: false
  hidden: false
  id: 64d648f42fe2c112641414df
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1671502872617-622d085c8d04fd29a9ccf169.png?w=200&h=200&f=face
      fullname: Christina Theodoris
      isHf: false
      isOrgMember: false
      isOwner: true
      isPro: false
      name: ctheodoris
      type: user
    createdAt: '2023-08-12T05:54:18.000Z'
    data:
      edited: false
      editors:
      - ctheodoris
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9205523729324341
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1671502872617-622d085c8d04fd29a9ccf169.png?w=200&h=200&f=face
          fullname: Christina Theodoris
          isHf: false
          isPro: false
          name: ctheodoris
          type: user
        html: "<p>Thank you for your interest in Geneformer and for your question!\
          \ In this case the OOM is from calculating the target embedding positions\
          \ for the cell states being modeled. When setting max_ncells to None, all\
          \ of the cells in the dataset are used to calculate these initial positions\
          \ even though the cell_inds_to_perturb subsets the cells used for the perturbation\
          \ tests. We will look into this memory error to see if it\u2019s possible\
          \ to obtain these initial embedding positions in a more memory preserving\
          \ manner, but in the meantime, you could obtain the goal embedding positions\
          \ separately and modify the code to supply them to each of your runs with\
          \ subsets of cells. At the end, you can put all the results into the same\
          \ directory for the stats module to analyze them together.</p>\n"
        raw: "Thank you for your interest in Geneformer and for your question! In\
          \ this case the OOM is from calculating the target embedding positions for\
          \ the cell states being modeled. When setting max_ncells to None, all of\
          \ the cells in the dataset are used to calculate these initial positions\
          \ even though the cell_inds_to_perturb subsets the cells used for the perturbation\
          \ tests. We will look into this memory error to see if it\u2019s possible\
          \ to obtain these initial embedding positions in a more memory preserving\
          \ manner, but in the meantime, you could obtain the goal embedding positions\
          \ separately and modify the code to supply them to each of your runs with\
          \ subsets of cells. At the end, you can put all the results into the same\
          \ directory for the stats module to analyze them together."
        updatedAt: '2023-08-12T05:54:18.294Z'
      numEdits: 0
      reactions: []
    id: 64d71e8a9fef656cfd187233
    type: comment
  author: ctheodoris
  content: "Thank you for your interest in Geneformer and for your question! In this\
    \ case the OOM is from calculating the target embedding positions for the cell\
    \ states being modeled. When setting max_ncells to None, all of the cells in the\
    \ dataset are used to calculate these initial positions even though the cell_inds_to_perturb\
    \ subsets the cells used for the perturbation tests. We will look into this memory\
    \ error to see if it\u2019s possible to obtain these initial embedding positions\
    \ in a more memory preserving manner, but in the meantime, you could obtain the\
    \ goal embedding positions separately and modify the code to supply them to each\
    \ of your runs with subsets of cells. At the end, you can put all the results\
    \ into the same directory for the stats module to analyze them together."
  created_at: 2023-08-12 04:54:18+00:00
  edited: false
  hidden: false
  id: 64d71e8a9fef656cfd187233
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/2e19b0efd2e371d62a492c416f5d9ca1.svg
      fullname: Matthew Pace
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Pingiotto
      type: user
    createdAt: '2023-08-15T13:17:28.000Z'
    data:
      edited: true
      editors:
      - Pingiotto
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.8330345749855042
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/2e19b0efd2e371d62a492c416f5d9ca1.svg
          fullname: Matthew Pace
          isHf: false
          isPro: false
          name: Pingiotto
          type: user
        html: "<p>As a quick fix:</p>\n<pre><code>downsampled_data = downsample_and_sort(filtered_input_data,\
          \ self.max_ncells)\nnum_shards = 40  # data will be split into 40\nshard_num=\
          \ 0  # which shard will be analysed\nshards = []\nfor i in range(num_shards):\n\
          \    shard = downsampled_data.shard(num_shards=num_shards, index=i)\n  \
          \  shards.append(shard)\nprint(f'shard num is {shard_num}')\ndownsampled_data\
          \ = shards[shard_num]\n</code></pre>\n<p>Here I'm splitting the data into\
          \ 40 'shards' and will analyse them separately. With my current set up (g4dn.metal\
          \ AWS) this will take an estimated 24 days though, so would greatly appreciate\
          \ any pointers to make this more efficient!</p>\n<p>Edit: Running the entire\
          \ dataset seems to be a little overkill. FDR and cosine shift values dont\
          \ change much after ~20% of the cells are analysed, which reduces the analysis\
          \ time significantly.</p>\n"
        raw: "As a quick fix:\n```\ndownsampled_data = downsample_and_sort(filtered_input_data,\
          \ self.max_ncells)\nnum_shards = 40  # data will be split into 40\nshard_num=\
          \ 0  # which shard will be analysed\nshards = []\nfor i in range(num_shards):\n\
          \    shard = downsampled_data.shard(num_shards=num_shards, index=i)\n  \
          \  shards.append(shard)\nprint(f'shard num is {shard_num}')\ndownsampled_data\
          \ = shards[shard_num]\n```\nHere I'm splitting the data into 40 'shards'\
          \ and will analyse them separately. With my current set up (g4dn.metal AWS)\
          \ this will take an estimated 24 days though, so would greatly appreciate\
          \ any pointers to make this more efficient!\n\nEdit: Running the entire\
          \ dataset seems to be a little overkill. FDR and cosine shift values dont\
          \ change much after ~20% of the cells are analysed, which reduces the analysis\
          \ time significantly."
        updatedAt: '2023-08-30T13:26:02.312Z'
      numEdits: 2
      reactions: []
    id: 64db7ae8a8829bc784f0745f
    type: comment
  author: Pingiotto
  content: "As a quick fix:\n```\ndownsampled_data = downsample_and_sort(filtered_input_data,\
    \ self.max_ncells)\nnum_shards = 40  # data will be split into 40\nshard_num=\
    \ 0  # which shard will be analysed\nshards = []\nfor i in range(num_shards):\n\
    \    shard = downsampled_data.shard(num_shards=num_shards, index=i)\n    shards.append(shard)\n\
    print(f'shard num is {shard_num}')\ndownsampled_data = shards[shard_num]\n```\n\
    Here I'm splitting the data into 40 'shards' and will analyse them separately.\
    \ With my current set up (g4dn.metal AWS) this will take an estimated 24 days\
    \ though, so would greatly appreciate any pointers to make this more efficient!\n\
    \nEdit: Running the entire dataset seems to be a little overkill. FDR and cosine\
    \ shift values dont change much after ~20% of the cells are analysed, which reduces\
    \ the analysis time significantly."
  created_at: 2023-08-15 12:17:28+00:00
  edited: true
  hidden: false
  id: 64db7ae8a8829bc784f0745f
  type: comment
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: /avatars/2e19b0efd2e371d62a492c416f5d9ca1.svg
      fullname: Matthew Pace
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Pingiotto
      type: user
    createdAt: '2023-08-30T13:27:47.000Z'
    data:
      status: closed
    id: 64ef43d3be0407983ab9019c
    type: status-change
  author: Pingiotto
  created_at: 2023-08-30 12:27:47+00:00
  id: 64ef43d3be0407983ab9019c
  new_status: closed
  type: status-change
is_pull_request: false
merge_commit_oid: null
num: 213
repo_id: ctheodoris/Geneformer
repo_type: model
status: closed
target_branch: null
title: In silico Perturbation Out of Memory
