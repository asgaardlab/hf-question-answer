!!python/object:huggingface_hub.community.DiscussionWithDetails
author: kamisama0101
conflicting_files: null
created_at: 2023-09-01 06:37:06+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/3a4c624068fc14088fb2375c1d9b890f.svg
      fullname: Account
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: kamisama0101
      type: user
    createdAt: '2023-09-01T07:37:06.000Z'
    data:
      edited: false
      editors:
      - kamisama0101
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7640441060066223
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/3a4c624068fc14088fb2375c1d9b890f.svg
          fullname: Account
          isHf: false
          isPro: false
          name: kamisama0101
          type: user
        html: '<p>When performing disease classification, we should modify the paths
          in the codes:<br>os.environ["LD_LIBRARY_PATH"] = "/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib"<br>runtime_env
          = {"conda": "base",<br>               "env_vars": {"LD_LIBRARY_PATH": "/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib"}}</p>

          <p>However, when I use "anaconda3", how can I identify the "/path/to" and
          "sw/lib" in my own environment?<br>Besides, why was the "/path/to/sw/lib"
          repeated twice? Is this related to some specific configuration?</p>

          <p>I''m still tortured by constant " Attempting to deserialize object on
          a CUDA device but torch.cuda.is_available() is False." from serialization.py
          and registry.py when running hyperparam_optimiz_for_disease_classifier.py,
          though "print(torch.cuda.is_available())" can return true separately. I
          wonder whether this problem can be caused by wrongly set runtime_env and
          os.environ.</p>

          '
        raw: "When performing disease classification, we should modify the paths in\
          \ the codes:\r\nos.environ[\"LD_LIBRARY_PATH\"] = \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"\
          \r\nruntime_env = {\"conda\": \"base\",\r\n               \"env_vars\":\
          \ {\"LD_LIBRARY_PATH\": \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"\
          }}\r\n\r\nHowever, when I use \"anaconda3\", how can I identify the \"/path/to\"\
          \ and \"sw/lib\" in my own environment?\r\nBesides, why was the \"/path/to/sw/lib\"\
          \ repeated twice? Is this related to some specific configuration?\r\n\r\n\
          I'm still tortured by constant \" Attempting to deserialize object on a\
          \ CUDA device but torch.cuda.is_available() is False.\" from serialization.py\
          \ and registry.py when running hyperparam_optimiz_for_disease_classifier.py,\
          \ though \"print(torch.cuda.is_available())\" can return true separately.\
          \ I wonder whether this problem can be caused by wrongly set runtime_env\
          \ and os.environ."
        updatedAt: '2023-09-01T07:37:06.853Z'
      numEdits: 0
      reactions: []
    id: 64f194a261bd9ed4ecec6a51
    type: comment
  author: kamisama0101
  content: "When performing disease classification, we should modify the paths in\
    \ the codes:\r\nos.environ[\"LD_LIBRARY_PATH\"] = \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"\
    \r\nruntime_env = {\"conda\": \"base\",\r\n               \"env_vars\": {\"LD_LIBRARY_PATH\"\
    : \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"}}\r\n\r\nHowever,\
    \ when I use \"anaconda3\", how can I identify the \"/path/to\" and \"sw/lib\"\
    \ in my own environment?\r\nBesides, why was the \"/path/to/sw/lib\" repeated\
    \ twice? Is this related to some specific configuration?\r\n\r\nI'm still tortured\
    \ by constant \" Attempting to deserialize object on a CUDA device but torch.cuda.is_available()\
    \ is False.\" from serialization.py and registry.py when running hyperparam_optimiz_for_disease_classifier.py,\
    \ though \"print(torch.cuda.is_available())\" can return true separately. I wonder\
    \ whether this problem can be caused by wrongly set runtime_env and os.environ."
  created_at: 2023-09-01 06:37:06+00:00
  edited: false
  hidden: false
  id: 64f194a261bd9ed4ecec6a51
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/94fd966421d599166f30dd00e28fe3bf.svg
      fullname: Madhavan Venkatesh
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: madhavanvenkatesh
      type: user
    createdAt: '2023-09-01T18:23:05.000Z'
    data:
      edited: true
      editors:
      - madhavanvenkatesh
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7753474116325378
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/94fd966421d599166f30dd00e28fe3bf.svg
          fullname: Madhavan Venkatesh
          isHf: false
          isPro: false
          name: madhavanvenkatesh
          type: user
        html: "<p>Setting os.environ[\"LD_LIBRARY_PATH\"]  is for when a module uses\
          \ shared object files (the library used until runtime, where it is needed)\
          \ or static libraries; \u2014 this is a step used to set up Python runtimes\
          \ on Linux. The goal with \"env_vars\" and \"LD_LIBRARY_PATH\" is to set\
          \ paths in which the Python interpreter looks for libraries platform-independently\
          \ during runtime; useful when interacting with compute clusters. </p>\n\
          <p>If this is not relevant to your system, a solution is to set up the conda\
          \ environment you already have and activate it before running the script.\
          \ Try instating a Python 3.10 conda environment before Ray 2.6.X installation.\
          \ You can install Ray through PyPi channels in your conda environment with\
          \ !pip install ray and !pip install ray[tune]. Then, you can alter the code\
          \ for your runtime, assuming the conda environment is activated. This lets\
          \ you comment out these lines:<br>   os.environ[\"CONDA_OVERRIDE_GLIBC\"\
          ] = \"2.56\" (12)<br>   os.environ[\"LD_LIBRARY_PATH\"] = \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"\
          \ (13)<br>   runtime_env = {\"conda\": \"base\", (22)<br>              \
          \    \"env_vars\": {\"LD_LIBRARY_PATH\": \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"\
          }} (23)<br>   ray.init(runtime_env=runtime_env) (24)</p>\n<p>You can now\
          \ use:<br>ray.init(); instead of  ray.init(runtime_env=runtime_env)</p>\n\
          <p>If ray.init() works, you may also skip lines 26-50. </p>\n"
        raw: "Setting os.environ[\"LD_LIBRARY_PATH\"]  is for when a module uses shared\
          \ object files (the library used until runtime, where it is needed) or static\
          \ libraries; \u2014 this is a step used to set up Python runtimes on Linux.\
          \ The goal with \"env_vars\" and \"LD_LIBRARY_PATH\" is to set paths in\
          \ which the Python interpreter looks for libraries platform-independently\
          \ during runtime; useful when interacting with compute clusters. \n\nIf\
          \ this is not relevant to your system, a solution is to set up the conda\
          \ environment you already have and activate it before running the script.\
          \ Try instating a Python 3.10 conda environment before Ray 2.6.X installation.\
          \ You can install Ray through PyPi channels in your conda environment with\
          \ !pip install ray and !pip install ray[tune]. Then, you can alter the code\
          \ for your runtime, assuming the conda environment is activated. This lets\
          \ you comment out these lines:\n   os.environ[\"CONDA_OVERRIDE_GLIBC\"]\
          \ = \"2.56\" (12)\n   os.environ[\"LD_LIBRARY_PATH\"] = \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"\
          \ (13)\n   runtime_env = {\"conda\": \"base\", (22)\n                  \"\
          env_vars\": {\"LD_LIBRARY_PATH\": \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"\
          }} (23)\n   ray.init(runtime_env=runtime_env) (24)\n\nYou can now use:\n\
          ray.init(); instead of  ray.init(runtime_env=runtime_env)\n\nIf ray.init()\
          \ works, you may also skip lines 26-50. "
        updatedAt: '2023-09-01T18:23:24.595Z'
      numEdits: 1
      reactions: []
    id: 64f22c090d19f5ae05f7e97a
    type: comment
  author: madhavanvenkatesh
  content: "Setting os.environ[\"LD_LIBRARY_PATH\"]  is for when a module uses shared\
    \ object files (the library used until runtime, where it is needed) or static\
    \ libraries; \u2014 this is a step used to set up Python runtimes on Linux. The\
    \ goal with \"env_vars\" and \"LD_LIBRARY_PATH\" is to set paths in which the\
    \ Python interpreter looks for libraries platform-independently during runtime;\
    \ useful when interacting with compute clusters. \n\nIf this is not relevant to\
    \ your system, a solution is to set up the conda environment you already have\
    \ and activate it before running the script. Try instating a Python 3.10 conda\
    \ environment before Ray 2.6.X installation. You can install Ray through PyPi\
    \ channels in your conda environment with !pip install ray and !pip install ray[tune].\
    \ Then, you can alter the code for your runtime, assuming the conda environment\
    \ is activated. This lets you comment out these lines:\n   os.environ[\"CONDA_OVERRIDE_GLIBC\"\
    ] = \"2.56\" (12)\n   os.environ[\"LD_LIBRARY_PATH\"] = \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"\
    \ (13)\n   runtime_env = {\"conda\": \"base\", (22)\n                  \"env_vars\"\
    : {\"LD_LIBRARY_PATH\": \"/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib\"\
    }} (23)\n   ray.init(runtime_env=runtime_env) (24)\n\nYou can now use:\nray.init();\
    \ instead of  ray.init(runtime_env=runtime_env)\n\nIf ray.init() works, you may\
    \ also skip lines 26-50. "
  created_at: 2023-09-01 17:23:05+00:00
  edited: true
  hidden: false
  id: 64f22c090d19f5ae05f7e97a
  type: comment
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1671502872617-622d085c8d04fd29a9ccf169.png?w=200&h=200&f=face
      fullname: Christina Theodoris
      isHf: false
      isOrgMember: false
      isOwner: true
      isPro: false
      name: ctheodoris
      type: user
    createdAt: '2023-09-01T18:39:05.000Z'
    data:
      status: closed
    id: 64f22fc9a8302f567bd54cf4
    type: status-change
  author: ctheodoris
  created_at: 2023-09-01 17:39:05+00:00
  id: 64f22fc9a8302f567bd54cf4
  new_status: closed
  type: status-change
is_pull_request: false
merge_commit_oid: null
num: 236
repo_id: ctheodoris/Geneformer
repo_type: model
status: closed
target_branch: null
title: what does "/path/to/miniconda3/lib:/path/to/sw/lib:/path/to/sw/lib" refer to?
