!!python/object:huggingface_hub.community.DiscussionWithDetails
author: VishnuBhanderi
conflicting_files: null
created_at: 2023-09-12 19:36:03+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/88a2c83c96c62f8d437973754f771f85.svg
      fullname: Vishnu Bhanderi
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: VishnuBhanderi
      type: user
    createdAt: '2023-09-12T20:36:03.000Z'
    data:
      edited: false
      editors:
      - VishnuBhanderi
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.480682909488678
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/88a2c83c96c62f8d437973754f771f85.svg
          fullname: Vishnu Bhanderi
          isHf: false
          isPro: false
          name: VishnuBhanderi
          type: user
        html: "<p>I am facing an issue while trying to get transcribed text in my\
          \ React native application. I am using this model through Interface API.\
          \ </p>\n<p>Here is my code. </p>\n<pre><code>    const startRecording =\
          \ async () =&gt; {\n      try {\n        if (isRecordingStopped) {\n   \
          \       const { status } = await Audio.requestPermissionsAsync();\n    \n\
          \          if (status !== \"granted\") {\n            console.error(\"Audio\
          \ recording permission not granted.\");\n            return;\n         \
          \ }\n    \n          const recordingObject = new Audio.Recording();\n  \
          \        await recordingObject.prepareToRecordAsync(\n            Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\n\
          \          );\n    \n          setRecording(recordingObject);\n        \
          \  setIsRecording(true);\n          setIsRecordingStopped(false);\n    \n\
          \          // Start the recording\n          await recordingObject.startAsync();\n\
          \        }\n      } catch (error) {\n        console.error(\"Error starting\
          \ recording:\", error);\n      }\n    };\n</code></pre>\n<p>Now, we are\
          \ stoping recording and saving recorded audio in audioData file.</p>\n<pre><code>\
          \    const stopRecording = async () =&gt; {\n      try {\n        if (isRecording)\
          \ {\n          // Stop the recording\n          await recording.stopAndUnloadAsync();\n\
          \          setIsRecording(false);\n          setIsRecordingStopped(true);\
          \ // Set it to true when recording is stopped\n    \n          const audioData\
          \ = recording.getURI();\n  \n          // Save the audio data to localStorage\n\
          \          localStorage.setItem(\"audioData\", audioData);\n    \n     \
          \     // After stopping the recording, transcribe the audio\n          await\
          \ transcribeAudio(audioData);\n        }\n      } catch (error) {\n    \
          \    console.error(\"Error stopping recording:\", error);\n      }\n   \
          \ };\n</code></pre>\n<p>Now we are using audioData as file in transcribeAudio\
          \ function.</p>\n<pre><code>    const transcribeAudio = async (audioData)\
          \ =&gt; {\n      try {\n        const response = await fetch(\"https://api-inference.huggingface.co/models/openai/whisper-large-v2\"\
          , {\n          method: \"POST\",\n          headers: {\n            Authorization:\
          \ \"Bearer XXXXXXXXXXXXXXXXXXXXXXXXXX\",\n          },\n          body:\
          \ audioData,\n        });\n    \n        if (response.ok) {\n          const\
          \ result = await response.json();\n          if (result &amp;&amp; result.length\
          \ &gt; 0) {\n            setTranscription(result[0].text);\n          }\
          \ else {\n            setTranscription(\"Transcription not available.\"\
          );\n          }\n        } else {\n          // Handle non-200 HTTP response\
          \ status\n          console.error(\"Error transcribing audio. HTTP Status:\"\
          , response.status);\n        }\n      } catch (error) {\n        console.error(\"\
          Error transcribing audio:\", error);\n      }\n    };\n</code></pre>\n<p>Please\
          \ suggest the solution</p>\n"
        raw: "I am facing an issue while trying to get transcribed text in my React\
          \ native application. I am using this model through Interface API. \r\n\r\
          \nHere is my code. \r\n\r\n```\r\n    const startRecording = async () =>\
          \ {\r\n      try {\r\n        if (isRecordingStopped) {\r\n          const\
          \ { status } = await Audio.requestPermissionsAsync();\r\n    \r\n      \
          \    if (status !== \"granted\") {\r\n            console.error(\"Audio\
          \ recording permission not granted.\");\r\n            return;\r\n     \
          \     }\r\n    \r\n          const recordingObject = new Audio.Recording();\r\
          \n          await recordingObject.prepareToRecordAsync(\r\n            Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\r\
          \n          );\r\n    \r\n          setRecording(recordingObject);\r\n \
          \         setIsRecording(true);\r\n          setIsRecordingStopped(false);\r\
          \n    \r\n          // Start the recording\r\n          await recordingObject.startAsync();\r\
          \n        }\r\n      } catch (error) {\r\n        console.error(\"Error\
          \ starting recording:\", error);\r\n      }\r\n    };\r\n  ```\r\nNow, we\
          \ are stoping recording and saving recorded audio in audioData file.\r\n\
          \r\n```\r\n    const stopRecording = async () => {\r\n      try {\r\n  \
          \      if (isRecording) {\r\n          // Stop the recording\r\n       \
          \   await recording.stopAndUnloadAsync();\r\n          setIsRecording(false);\r\
          \n          setIsRecordingStopped(true); // Set it to true when recording\
          \ is stopped\r\n    \r\n          const audioData = recording.getURI();\r\
          \n  \r\n          // Save the audio data to localStorage\r\n          localStorage.setItem(\"\
          audioData\", audioData);\r\n    \r\n          // After stopping the recording,\
          \ transcribe the audio\r\n          await transcribeAudio(audioData);\r\n\
          \        }\r\n      } catch (error) {\r\n        console.error(\"Error stopping\
          \ recording:\", error);\r\n      }\r\n    };\r\n```\r\nNow we are using\
          \ audioData as file in transcribeAudio function.\r\n```\r\n    const transcribeAudio\
          \ = async (audioData) => {\r\n      try {\r\n        const response = await\
          \ fetch(\"https://api-inference.huggingface.co/models/openai/whisper-large-v2\"\
          , {\r\n          method: \"POST\",\r\n          headers: {\r\n         \
          \   Authorization: \"Bearer XXXXXXXXXXXXXXXXXXXXXXXXXX\",\r\n          },\r\
          \n          body: audioData,\r\n        });\r\n    \r\n        if (response.ok)\
          \ {\r\n          const result = await response.json();\r\n          if (result\
          \ && result.length > 0) {\r\n            setTranscription(result[0].text);\r\
          \n          } else {\r\n            setTranscription(\"Transcription not\
          \ available.\");\r\n          }\r\n        } else {\r\n          // Handle\
          \ non-200 HTTP response status\r\n          console.error(\"Error transcribing\
          \ audio. HTTP Status:\", response.status);\r\n        }\r\n      } catch\
          \ (error) {\r\n        console.error(\"Error transcribing audio:\", error);\r\
          \n      }\r\n    };\r\n```\r\n\r\nPlease suggest the solution"
        updatedAt: '2023-09-12T20:36:03.833Z'
      numEdits: 0
      reactions: []
    id: 6500cbb37aa4d88f208635cb
    type: comment
  author: VishnuBhanderi
  content: "I am facing an issue while trying to get transcribed text in my React\
    \ native application. I am using this model through Interface API. \r\n\r\nHere\
    \ is my code. \r\n\r\n```\r\n    const startRecording = async () => {\r\n    \
    \  try {\r\n        if (isRecordingStopped) {\r\n          const { status } =\
    \ await Audio.requestPermissionsAsync();\r\n    \r\n          if (status !== \"\
    granted\") {\r\n            console.error(\"Audio recording permission not granted.\"\
    );\r\n            return;\r\n          }\r\n    \r\n          const recordingObject\
    \ = new Audio.Recording();\r\n          await recordingObject.prepareToRecordAsync(\r\
    \n            Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\r\n          );\r\n\
    \    \r\n          setRecording(recordingObject);\r\n          setIsRecording(true);\r\
    \n          setIsRecordingStopped(false);\r\n    \r\n          // Start the recording\r\
    \n          await recordingObject.startAsync();\r\n        }\r\n      } catch\
    \ (error) {\r\n        console.error(\"Error starting recording:\", error);\r\n\
    \      }\r\n    };\r\n  ```\r\nNow, we are stoping recording and saving recorded\
    \ audio in audioData file.\r\n\r\n```\r\n    const stopRecording = async () =>\
    \ {\r\n      try {\r\n        if (isRecording) {\r\n          // Stop the recording\r\
    \n          await recording.stopAndUnloadAsync();\r\n          setIsRecording(false);\r\
    \n          setIsRecordingStopped(true); // Set it to true when recording is stopped\r\
    \n    \r\n          const audioData = recording.getURI();\r\n  \r\n          //\
    \ Save the audio data to localStorage\r\n          localStorage.setItem(\"audioData\"\
    , audioData);\r\n    \r\n          // After stopping the recording, transcribe\
    \ the audio\r\n          await transcribeAudio(audioData);\r\n        }\r\n  \
    \    } catch (error) {\r\n        console.error(\"Error stopping recording:\"\
    , error);\r\n      }\r\n    };\r\n```\r\nNow we are using audioData as file in\
    \ transcribeAudio function.\r\n```\r\n    const transcribeAudio = async (audioData)\
    \ => {\r\n      try {\r\n        const response = await fetch(\"https://api-inference.huggingface.co/models/openai/whisper-large-v2\"\
    , {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization:\
    \ \"Bearer XXXXXXXXXXXXXXXXXXXXXXXXXX\",\r\n          },\r\n          body: audioData,\r\
    \n        });\r\n    \r\n        if (response.ok) {\r\n          const result\
    \ = await response.json();\r\n          if (result && result.length > 0) {\r\n\
    \            setTranscription(result[0].text);\r\n          } else {\r\n     \
    \       setTranscription(\"Transcription not available.\");\r\n          }\r\n\
    \        } else {\r\n          // Handle non-200 HTTP response status\r\n    \
    \      console.error(\"Error transcribing audio. HTTP Status:\", response.status);\r\
    \n        }\r\n      } catch (error) {\r\n        console.error(\"Error transcribing\
    \ audio:\", error);\r\n      }\r\n    };\r\n```\r\n\r\nPlease suggest the solution"
  created_at: 2023-09-12 19:36:03+00:00
  edited: false
  hidden: false
  id: 6500cbb37aa4d88f208635cb
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/88a2c83c96c62f8d437973754f771f85.svg
      fullname: Vishnu Bhanderi
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: VishnuBhanderi
      type: user
    createdAt: '2023-09-13T05:03:11.000Z'
    data:
      edited: false
      editors:
      - VishnuBhanderi
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.2479400783777237
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/88a2c83c96c62f8d437973754f771f85.svg
          fullname: Vishnu Bhanderi
          isHf: false
          isPro: false
          name: VishnuBhanderi
          type: user
        html: '<p>My Error Message : </p>

          <pre><code>E:\New folder\PersonalInterview\app\index.js:120     POST https://api-inference.huggingface.co/models/openai/whisper-large-v2
          503

          E:\New folder\PersonalInterview\node_modules\@expo\metro-runtime\build\error-overlay\LogBox.web.js:99
          Error transcribing audio. HTTP Status: 503

          </code></pre>

          '
        raw: "My Error Message : \n```\nE:\\New folder\\PersonalInterview\\app\\index.js:120\
          \     POST https://api-inference.huggingface.co/models/openai/whisper-large-v2\
          \ 503\nE:\\New folder\\PersonalInterview\\node_modules\\@expo\\metro-runtime\\\
          build\\error-overlay\\LogBox.web.js:99 Error transcribing audio. HTTP Status:\
          \ 503\n\n````"
        updatedAt: '2023-09-13T05:03:11.028Z'
      numEdits: 0
      reactions: []
    id: 6501428f13f1546526c9d8a9
    type: comment
  author: VishnuBhanderi
  content: "My Error Message : \n```\nE:\\New folder\\PersonalInterview\\app\\index.js:120\
    \     POST https://api-inference.huggingface.co/models/openai/whisper-large-v2\
    \ 503\nE:\\New folder\\PersonalInterview\\node_modules\\@expo\\metro-runtime\\\
    build\\error-overlay\\LogBox.web.js:99 Error transcribing audio. HTTP Status:\
    \ 503\n\n````"
  created_at: 2023-09-13 04:03:11+00:00
  edited: false
  hidden: false
  id: 6501428f13f1546526c9d8a9
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 68
repo_id: openai/whisper-large-v2
repo_type: model
status: open
target_branch: null
title: Error 503
