!!python/object:huggingface_hub.community.DiscussionWithDetails
author: christian-siagian
conflicting_files: null
created_at: 2022-08-24 22:02:59+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/675947b3b38207468338f2121f7ca8c0.svg
      fullname: Christian Siagian
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: christian-siagian
      type: user
    createdAt: '2022-08-24T23:02:59.000Z'
    data:
      edited: false
      editors:
      - christian-siagian
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/675947b3b38207468338f2121f7ca8c0.svg
          fullname: Christian Siagian
          isHf: false
          isPro: false
          name: christian-siagian
          type: user
        html: '<p>Hi I am trying to perform entity disambiguation, given a sentence
          and a wiki link.<br>An example (taken from Fig. 5, or page 11, of a survey
          paper <a rel="nofollow" href="https://content.iospress.com/download/semantic-web/sw222986?id=semantic-web%2Fsw222986">https://content.iospress.com/download/semantic-web/sw222986?id=semantic-web%2Fsw222986</a>)<br>Sentence:
          "Scott Young played for the Cleveland Browns", wiki link: <a rel="nofollow"
          href="https://en.wikipedia.org/wiki/Scott_Young_(American_football)">https://en.wikipedia.org/wiki/Scott_Young_(American_football)</a>
          or "Scott Young (American football)"</p>

          <p>I use the example code:<br>from transformers import LukeTokenizer, LukeForEntitySpanClassification,
          LukeModel, LukeForEntityPairClassification<br>text = "Scott Young played
          for the Cleveland Browns"<br>entity_spans = [(0, 11)]<br>entities = [ "Scott
          Young (American football)" ]<br>inputs = tokenizer(text, entities=entities,
          entity_spans=entity_spans, add_prefix_space=True, return_tensors="pt")<br>outputs
          = model(**inputs)<br>word_last_hidden_state = outputs.last_hidden_state<br>entity_last_hidden_state
          = outputs.entity_last_hidden_state</p>

          <p>Is there an easy way to check whether the disambiguation is correct,
          say the matching score should deteriorate if I were to pass in the title
          "Scott Young (English footballer)", instead?</p>

          <p>Thank you, in advance.</p>

          '
        raw: "Hi I am trying to perform entity disambiguation, given a sentence and\
          \ a wiki link.\r\nAn example (taken from Fig. 5, or page 11, of a survey\
          \ paper https://content.iospress.com/download/semantic-web/sw222986?id=semantic-web%2Fsw222986)\r\
          \nSentence: \"Scott Young played for the Cleveland Browns\", wiki link:\
          \ https://en.wikipedia.org/wiki/Scott_Young_(American_football) or \"Scott\
          \ Young (American football)\"\r\n\r\nI use the example code:\r\nfrom transformers\
          \ import LukeTokenizer, LukeForEntitySpanClassification, LukeModel, LukeForEntityPairClassification\r\
          \ntext = \"Scott Young played for the Cleveland Browns\"\r\nentity_spans\
          \ = [(0, 11)]\r\nentities = [ \"Scott Young (American football)\" ]\r\n\
          inputs = tokenizer(text, entities=entities, entity_spans=entity_spans, add_prefix_space=True,\
          \ return_tensors=\"pt\")\r\noutputs = model(**inputs)\r\nword_last_hidden_state\
          \ = outputs.last_hidden_state\r\nentity_last_hidden_state = outputs.entity_last_hidden_state\r\
          \n\r\nIs there an easy way to check whether the disambiguation is correct,\
          \ say the matching score should deteriorate if I were to pass in the title\
          \ \"Scott Young (English footballer)\", instead?\r\n\r\nThank you, in advance."
        updatedAt: '2022-08-24T23:02:59.025Z'
      numEdits: 0
      reactions: []
    id: 6306ae23cfbde33ef7dd67a6
    type: comment
  author: christian-siagian
  content: "Hi I am trying to perform entity disambiguation, given a sentence and\
    \ a wiki link.\r\nAn example (taken from Fig. 5, or page 11, of a survey paper\
    \ https://content.iospress.com/download/semantic-web/sw222986?id=semantic-web%2Fsw222986)\r\
    \nSentence: \"Scott Young played for the Cleveland Browns\", wiki link: https://en.wikipedia.org/wiki/Scott_Young_(American_football)\
    \ or \"Scott Young (American football)\"\r\n\r\nI use the example code:\r\nfrom\
    \ transformers import LukeTokenizer, LukeForEntitySpanClassification, LukeModel,\
    \ LukeForEntityPairClassification\r\ntext = \"Scott Young played for the Cleveland\
    \ Browns\"\r\nentity_spans = [(0, 11)]\r\nentities = [ \"Scott Young (American\
    \ football)\" ]\r\ninputs = tokenizer(text, entities=entities, entity_spans=entity_spans,\
    \ add_prefix_space=True, return_tensors=\"pt\")\r\noutputs = model(**inputs)\r\
    \nword_last_hidden_state = outputs.last_hidden_state\r\nentity_last_hidden_state\
    \ = outputs.entity_last_hidden_state\r\n\r\nIs there an easy way to check whether\
    \ the disambiguation is correct, say the matching score should deteriorate if\
    \ I were to pass in the title \"Scott Young (English footballer)\", instead?\r\
    \n\r\nThank you, in advance."
  created_at: 2022-08-24 22:02:59+00:00
  edited: false
  hidden: false
  id: 6306ae23cfbde33ef7dd67a6
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/ff1cdf6b1cf5890b8daba082b15466a7.svg
      fullname: Ryokan Ri
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: ryo0634
      type: user
    createdAt: '2022-08-26T03:42:20.000Z'
    data:
      edited: false
      editors:
      - ryo0634
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/ff1cdf6b1cf5890b8daba082b15466a7.svg
          fullname: Ryokan Ri
          isHf: false
          isPro: false
          name: ryo0634
          type: user
        html: "<p>Although LUKE is not designed for entity disambiguation, maybe you\
          \ could use masked entity prediction for that purpose.</p>\n<pre><code>from\
          \ transformers import LukeTokenizer, LukeForMaskedLM\nimport torch\n\ntokenizer\
          \ = LukeTokenizer.from_pretrained(\"studio-ousia/luke-base\")\nmodel = LukeForMaskedLM.from_pretrained(\"\
          studio-ousia/luke-base\")\n\n\ntext = \"Scott Young played for the Cleveland\
          \ Browns\"\nentity_spans = [(0, 11)]\nentities = [\"[MASK]\"]\ninputs =\
          \ tokenizer(text, entities=entities, entity_spans=entity_spans, add_prefix_space=True,\
          \ return_tensors=\"pt\")\noutputs = model(**inputs)\n\n\nidx2entity = {idx:\
          \ entity for entity, idx in tokenizer.entity_vocab.items()}\nfor predicted_entity_index\
          \ in torch.topk(outputs.entity_logits[0][0], k=10).indices:\n    print(idx2entity[int(predicted_entity_index)])\n\
          \noutput\n============\n[UNK]\nScott Mitchell (quarterback)\nVince Young\n\
          Scott Sharp\nScott Armstrong (wrestler)\nScott Stadium\nMark Aitchison Young\n\
          Scott Peterson\nScott Dixon\nScott Air Force Base\n</code></pre>\n<p>(It\
          \ seems the entity vocabulary does not cover the entity you gave though.)<br>Hope\
          \ it helps!</p>\n"
        raw: "Although LUKE is not designed for entity disambiguation, maybe you could\
          \ use masked entity prediction for that purpose.\n\n```\nfrom transformers\
          \ import LukeTokenizer, LukeForMaskedLM\nimport torch\n\ntokenizer = LukeTokenizer.from_pretrained(\"\
          studio-ousia/luke-base\")\nmodel = LukeForMaskedLM.from_pretrained(\"studio-ousia/luke-base\"\
          )\n\n\ntext = \"Scott Young played for the Cleveland Browns\"\nentity_spans\
          \ = [(0, 11)]\nentities = [\"[MASK]\"]\ninputs = tokenizer(text, entities=entities,\
          \ entity_spans=entity_spans, add_prefix_space=True, return_tensors=\"pt\"\
          )\noutputs = model(**inputs)\n\n\nidx2entity = {idx: entity for entity,\
          \ idx in tokenizer.entity_vocab.items()}\nfor predicted_entity_index in\
          \ torch.topk(outputs.entity_logits[0][0], k=10).indices:\n    print(idx2entity[int(predicted_entity_index)])\n\
          \noutput\n============\n[UNK]\nScott Mitchell (quarterback)\nVince Young\n\
          Scott Sharp\nScott Armstrong (wrestler)\nScott Stadium\nMark Aitchison Young\n\
          Scott Peterson\nScott Dixon\nScott Air Force Base\n```\n\n(It seems the\
          \ entity vocabulary does not cover the entity you gave though.)\nHope it\
          \ helps!"
        updatedAt: '2022-08-26T03:42:20.304Z'
      numEdits: 0
      reactions: []
    id: 6308411c161cfe1383a7eaba
    type: comment
  author: ryo0634
  content: "Although LUKE is not designed for entity disambiguation, maybe you could\
    \ use masked entity prediction for that purpose.\n\n```\nfrom transformers import\
    \ LukeTokenizer, LukeForMaskedLM\nimport torch\n\ntokenizer = LukeTokenizer.from_pretrained(\"\
    studio-ousia/luke-base\")\nmodel = LukeForMaskedLM.from_pretrained(\"studio-ousia/luke-base\"\
    )\n\n\ntext = \"Scott Young played for the Cleveland Browns\"\nentity_spans =\
    \ [(0, 11)]\nentities = [\"[MASK]\"]\ninputs = tokenizer(text, entities=entities,\
    \ entity_spans=entity_spans, add_prefix_space=True, return_tensors=\"pt\")\noutputs\
    \ = model(**inputs)\n\n\nidx2entity = {idx: entity for entity, idx in tokenizer.entity_vocab.items()}\n\
    for predicted_entity_index in torch.topk(outputs.entity_logits[0][0], k=10).indices:\n\
    \    print(idx2entity[int(predicted_entity_index)])\n\noutput\n============\n\
    [UNK]\nScott Mitchell (quarterback)\nVince Young\nScott Sharp\nScott Armstrong\
    \ (wrestler)\nScott Stadium\nMark Aitchison Young\nScott Peterson\nScott Dixon\n\
    Scott Air Force Base\n```\n\n(It seems the entity vocabulary does not cover the\
    \ entity you gave though.)\nHope it helps!"
  created_at: 2022-08-26 02:42:20+00:00
  edited: false
  hidden: false
  id: 6308411c161cfe1383a7eaba
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/675947b3b38207468338f2121f7ca8c0.svg
      fullname: Christian Siagian
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: christian-siagian
      type: user
    createdAt: '2022-08-26T20:35:44.000Z'
    data:
      edited: false
      editors:
      - christian-siagian
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/675947b3b38207468338f2121f7ca8c0.svg
          fullname: Christian Siagian
          isHf: false
          isPro: false
          name: christian-siagian
          type: user
        html: '<p>Thanks ryo064. Good to know.<br>For the above example, it''s be
          hard as there are many that played for Cleveland Brown.</p>

          <p>However, I saw that the original code has entity disambiguation (<a rel="nofollow"
          href="https://github.com/studio-ousia/luke/tree/master/examples/entity_disambiguation">https://github.com/studio-ousia/luke/tree/master/examples/entity_disambiguation</a>).<br>I
          will start from there.</p>

          '
        raw: 'Thanks ryo064. Good to know.

          For the above example, it''s be hard as there are many that played for Cleveland
          Brown.


          However, I saw that the original code has entity disambiguation (https://github.com/studio-ousia/luke/tree/master/examples/entity_disambiguation).

          I will start from there.


          '
        updatedAt: '2022-08-26T20:35:44.546Z'
      numEdits: 0
      reactions: []
      relatedEventId: 63092ea0b105f8675bd16909
    id: 63092ea0b105f8675bd16908
    type: comment
  author: christian-siagian
  content: 'Thanks ryo064. Good to know.

    For the above example, it''s be hard as there are many that played for Cleveland
    Brown.


    However, I saw that the original code has entity disambiguation (https://github.com/studio-ousia/luke/tree/master/examples/entity_disambiguation).

    I will start from there.


    '
  created_at: 2022-08-26 19:35:44+00:00
  edited: false
  hidden: false
  id: 63092ea0b105f8675bd16908
  type: comment
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: /avatars/675947b3b38207468338f2121f7ca8c0.svg
      fullname: Christian Siagian
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: christian-siagian
      type: user
    createdAt: '2022-08-26T20:35:44.000Z'
    data:
      status: closed
    id: 63092ea0b105f8675bd16909
    type: status-change
  author: christian-siagian
  created_at: 2022-08-26 19:35:44+00:00
  id: 63092ea0b105f8675bd16909
  new_status: closed
  type: status-change
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: /avatars/675947b3b38207468338f2121f7ca8c0.svg
      fullname: Christian Siagian
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: christian-siagian
      type: user
    createdAt: '2022-08-26T20:36:02.000Z'
    data:
      status: open
    id: 63092eb25cc6820c2365f222
    type: status-change
  author: christian-siagian
  created_at: 2022-08-26 19:36:02+00:00
  id: 63092eb25cc6820c2365f222
  new_status: open
  type: status-change
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: /avatars/675947b3b38207468338f2121f7ca8c0.svg
      fullname: Christian Siagian
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: christian-siagian
      type: user
    createdAt: '2022-09-02T02:08:18.000Z'
    data:
      status: closed
    id: 6311659207a768279028a4db
    type: status-change
  author: christian-siagian
  created_at: 2022-09-02 01:08:18+00:00
  id: 6311659207a768279028a4db
  new_status: closed
  type: status-change
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: studio-ousia/luke-base
repo_type: model
status: closed
target_branch: null
title: using Luke to Perform Entity Disambiguation
