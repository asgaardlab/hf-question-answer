!!python/object:huggingface_hub.community.DiscussionWithDetails
author: pcapazzi
conflicting_files: null
created_at: 2024-01-20 14:38:00+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/9e84a24619a7b92d5dafdc8e93fc2f59.svg
      fullname: Peter Capazzi
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: pcapazzi
      type: user
    createdAt: '2024-01-20T14:38:00.000Z'
    data:
      edited: true
      editors:
      - pcapazzi
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.8122278451919556
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/9e84a24619a7b92d5dafdc8e93fc2f59.svg
          fullname: Peter Capazzi
          isHf: false
          isPro: false
          name: pcapazzi
          type: user
        html: "<p>I created an endpoint to test with and each response includes an\
          \ attempt to duplicate what was written before. </p>\n<p>Example 1:</p>\n\
          <pre><code>               SELECT date_trunc('month', transaction_dt) AS\
          \ MONTH, SUM(transaction_amt) AS total_sales FROM sales WHERE date_part('year',\
          \ transaction_dt) = date_part('year', CURRENT_DATE) - 1 GROUP BY MONTH ORDER\
          \ BY MONTH DESC LIMIT 6;\n               \n               SELECT date_trunc('month',\
          \ transaction_dt) AS MONTH, SUM(\n</code></pre>\n<p>Example 2:</p>\n<pre><code>\
          \               SELECT date_trunc('month', transaction_dt) AS MONTH, SUM(transaction_amt)\
          \ AS total_sales FROM sales GROUP BY MONTH ORDER BY MONTH DESC LIMIT 6;\n\
          \               \n               SELECT date_trunc('month', transaction_dt)\
          \ AS MONTH, SUM(transaction_amt) AS total_sales FROM sales GROUP BY MONTH\
          \ ORDER BY MONTH DESC LIMIT 6;\n</code></pre>\n<p>The endpoint seems to\
          \ cut off abruptly in it's response (see 1st example). Most likely a token\
          \ limitation. I tried doubling the tokens but it failed to make the changes.\
          \ Still... I don't think that's a 1000 token response. The prompt wasn't\
          \ very long either:</p>\n<p>You are a Redshift SQL Developer for a clothing\
          \ retailer. Given the following schema provide the SQL that will answer\
          \ the question:<br>                   create table sales (<br>         \
          \              transaction_id bigint,<br>                       transaction_dt\
          \ date,<br>                       transaction_amt float<br>            \
          \           store_id int,<br>                       store_name varchar(50))</p>\n\
          <pre><code>               Question: How did your sales last month compare\
          \ against sales from the previous month for each store?  Indicate if the\
          \ difference was significant. Significance determine by  +/- 10%.\n</code></pre>\n"
        raw: "I created an endpoint to test with and each response includes an attempt\
          \ to duplicate what was written before. \n\nExample 1:\n\n             \
          \      SELECT date_trunc('month', transaction_dt) AS MONTH, SUM(transaction_amt)\
          \ AS total_sales FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
          \ CURRENT_DATE) - 1 GROUP BY MONTH ORDER BY MONTH DESC LIMIT 6;\n      \
          \             \n                   SELECT date_trunc('month', transaction_dt)\
          \ AS MONTH, SUM(\n\nExample 2:\n\n                   SELECT date_trunc('month',\
          \ transaction_dt) AS MONTH, SUM(transaction_amt) AS total_sales FROM sales\
          \ GROUP BY MONTH ORDER BY MONTH DESC LIMIT 6;\n                   \n   \
          \                SELECT date_trunc('month', transaction_dt) AS MONTH, SUM(transaction_amt)\
          \ AS total_sales FROM sales GROUP BY MONTH ORDER BY MONTH DESC LIMIT 6;\n\
          \nThe endpoint seems to cut off abruptly in it's response (see 1st example).\
          \ Most likely a token limitation. I tried doubling the tokens but it failed\
          \ to make the changes. Still... I don't think that's a 1000 token response.\
          \ The prompt wasn't very long either:\n\nYou are a Redshift SQL Developer\
          \ for a clothing retailer. Given the following schema provide the SQL that\
          \ will answer the question:\n                   create table sales (\n \
          \                      transaction_id bigint,\n                       transaction_dt\
          \ date,\n                       transaction_amt float\n                \
          \       store_id int,\n                       store_name varchar(50))\n\
          \                   \n                   Question: How did your sales last\
          \ month compare against sales from the previous month for each store?  Indicate\
          \ if the difference was significant. Significance determine by  +/- 10%."
        updatedAt: '2024-01-20T14:39:09.428Z'
      numEdits: 1
      reactions: []
    id: 65abdac82bf3e0cbbf806999
    type: comment
  author: pcapazzi
  content: "I created an endpoint to test with and each response includes an attempt\
    \ to duplicate what was written before. \n\nExample 1:\n\n                   SELECT\
    \ date_trunc('month', transaction_dt) AS MONTH, SUM(transaction_amt) AS total_sales\
    \ FROM sales WHERE date_part('year', transaction_dt) = date_part('year', CURRENT_DATE)\
    \ - 1 GROUP BY MONTH ORDER BY MONTH DESC LIMIT 6;\n                   \n     \
    \              SELECT date_trunc('month', transaction_dt) AS MONTH, SUM(\n\nExample\
    \ 2:\n\n                   SELECT date_trunc('month', transaction_dt) AS MONTH,\
    \ SUM(transaction_amt) AS total_sales FROM sales GROUP BY MONTH ORDER BY MONTH\
    \ DESC LIMIT 6;\n                   \n                   SELECT date_trunc('month',\
    \ transaction_dt) AS MONTH, SUM(transaction_amt) AS total_sales FROM sales GROUP\
    \ BY MONTH ORDER BY MONTH DESC LIMIT 6;\n\nThe endpoint seems to cut off abruptly\
    \ in it's response (see 1st example). Most likely a token limitation. I tried\
    \ doubling the tokens but it failed to make the changes. Still... I don't think\
    \ that's a 1000 token response. The prompt wasn't very long either:\n\nYou are\
    \ a Redshift SQL Developer for a clothing retailer. Given the following schema\
    \ provide the SQL that will answer the question:\n                   create table\
    \ sales (\n                       transaction_id bigint,\n                   \
    \    transaction_dt date,\n                       transaction_amt float\n    \
    \                   store_id int,\n                       store_name varchar(50))\n\
    \                   \n                   Question: How did your sales last month\
    \ compare against sales from the previous month for each store?  Indicate if the\
    \ difference was significant. Significance determine by  +/- 10%."
  created_at: 2024-01-20 14:38:00+00:00
  edited: true
  hidden: false
  id: 65abdac82bf3e0cbbf806999
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/9e84a24619a7b92d5dafdc8e93fc2f59.svg
      fullname: Peter Capazzi
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: pcapazzi
      type: user
    createdAt: '2024-01-20T17:14:21.000Z'
    data:
      edited: false
      editors:
      - pcapazzi
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.4762643575668335
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/9e84a24619a7b92d5dafdc8e93fc2f59.svg
          fullname: Peter Capazzi
          isHf: false
          isPro: false
          name: pcapazzi
          type: user
        html: "<p>The limit of the returned response was indeed tokens. This is my\
          \ first try with an inference endpoint. I increased the parameter for Max\
          \ New Tokens and received complete SQL. Then switched over to API and was\
          \ able to take the parameters and update the Python code. </p>\n<p>I switched\
          \ to 7b in case the multiple statements was something only experienced in\
          \ 34b alpha. But I still continue to get multiple SQL statements:<br>inputs:</p>\n\
          <p>Given the following schmea provide the SQL that will answer the question:</p>\n\
          <pre><code>               create table sales (\n                   transaction_id\
          \ bigint,\n                   transaction_dt date,\n                   transaction_amt\
          \ float,\n                   store_id int,\n                   store_name\
          \ varchar(50))\n               \n               Question: How did our sales\
          \ last month compare against sales from the previous month for each store?\n\
          </code></pre>\n<p>generated_text:</p>\n<pre><code>               SELECT\
          \ date_trunc('month', transaction_dt) AS MONTH, COUNT(*) AS sales_count\
          \ FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
          \ CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE\
          \ - interval '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH\
          \ ORDER BY MONTH;\n               \n               \"\"\"\n    ),\n\n  \
          \  \"\"\" SELECT date_trunc('month', transaction_dt) AS MONTH, COUNT(*)\
          \ AS sales_count FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
          \ CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE\
          \ - interval '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH\
          \ ORDER BY MONTH; \"\"\"\n\n\n    \"\"\" SELECT date_trunc('month', transaction_dt)\
          \ AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year', transaction_dt)\
          \ = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
          \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month')\
          \ GROUP BY MONTH ORDER BY MONTH; \"\"\"\n\n    \"\"\" SELECT date_trunc('month',\
          \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
          \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month',\
          \ transaction_dt) IN (CURRENT_DATE - interval '1 month', CURRENT_DATE -\
          \ interval '2 month') GROUP BY MONTH ORDER BY MONTH; \"\"\"\n\n    \"\"\"\
          \ SELECT date_trunc('month', transaction_dt) AS MONTH, COUNT(*) AS sales_count\
          \ FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
          \ CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE\
          \ - interval '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH\
          \ ORDER BY MONTH; \"\"\"\n\n    \"\"\" SELECT date_trunc('month', transaction_dt)\
          \ AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year', transaction_dt)\
          \ = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
          \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month')\
          \ GROUP BY MONTH ORDER BY MONTH; \"\"\"\n\n    \"\"\" SELECT date_trunc('month',\
          \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
          \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month',\
          \ transaction_dt) IN (CURRENT_DATE - interval '1 month', CURRENT_DATE -\
          \ interval '2 month') GROUP BY MONTH ORDER BY MONTH; \"\"\"\n\n    \"\"\"\
          \ SELECT date_trunc('month', transaction_dt) AS MONTH, COUNT(*) AS sales_count\
          \ FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
          \ CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE\
          \ - interval '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH\
          \ ORDER BY MONTH; \"\"\"\n\n    \"\"\" SELECT date_trunc('month', transaction_dt)\
          \ AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year', transaction_dt)\
          \ = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
          \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month')\
          \ GROUP BY MONTH ORDER BY MONTH; \"\"\"\n\n    \"\"\" SELECT date_trunc('month',\
          \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
          \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month',\
          \ transaction_dt) IN (CURRENT_DATE -\n</code></pre>\n"
        raw: "The limit of the returned response was indeed tokens. This is my first\
          \ try with an inference endpoint. I increased the parameter for Max New\
          \ Tokens and received complete SQL. Then switched over to API and was able\
          \ to take the parameters and update the Python code. \n\nI switched to 7b\
          \ in case the multiple statements was something only experienced in 34b\
          \ alpha. But I still continue to get multiple SQL statements:\ninputs:\n\
          \nGiven the following schmea provide the SQL that will answer the question:\n\
          \n                   create table sales (\n                       transaction_id\
          \ bigint,\n                       transaction_dt date,\n               \
          \        transaction_amt float,\n                       store_id int,\n\
          \                       store_name varchar(50))\n                   \n \
          \                  Question: How did our sales last month compare against\
          \ sales from the previous month for each store?\n\ngenerated_text:\n\n \
          \                  SELECT date_trunc('month', transaction_dt) AS MONTH,\
          \ COUNT(*) AS sales_count FROM sales WHERE date_part('year', transaction_dt)\
          \ = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
          \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month')\
          \ GROUP BY MONTH ORDER BY MONTH;\n                   \n                \
          \   \"\"\"\n        ),\n   \n        \"\"\" SELECT date_trunc('month', transaction_dt)\
          \ AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year', transaction_dt)\
          \ = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
          \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month')\
          \ GROUP BY MONTH ORDER BY MONTH; \"\"\"\n   \n   \n        \"\"\" SELECT\
          \ date_trunc('month', transaction_dt) AS MONTH, COUNT(*) AS sales_count\
          \ FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
          \ CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE\
          \ - interval '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH\
          \ ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
          \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
          \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month',\
          \ transaction_dt) IN (CURRENT_DATE - interval '1 month', CURRENT_DATE -\
          \ interval '2 month') GROUP BY MONTH ORDER BY MONTH; \"\"\"\n   \n     \
          \   \"\"\" SELECT date_trunc('month', transaction_dt) AS MONTH, COUNT(*)\
          \ AS sales_count FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
          \ CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE\
          \ - interval '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH\
          \ ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
          \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
          \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month',\
          \ transaction_dt) IN (CURRENT_DATE - interval '1 month', CURRENT_DATE -\
          \ interval '2 month') GROUP BY MONTH ORDER BY MONTH; \"\"\"\n   \n     \
          \   \"\"\" SELECT date_trunc('month', transaction_dt) AS MONTH, COUNT(*)\
          \ AS sales_count FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
          \ CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE\
          \ - interval '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH\
          \ ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
          \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
          \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month',\
          \ transaction_dt) IN (CURRENT_DATE - interval '1 month', CURRENT_DATE -\
          \ interval '2 month') GROUP BY MONTH ORDER BY MONTH; \"\"\"\n   \n     \
          \   \"\"\" SELECT date_trunc('month', transaction_dt) AS MONTH, COUNT(*)\
          \ AS sales_count FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
          \ CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE\
          \ - interval '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH\
          \ ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
          \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
          \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month',\
          \ transaction_dt) IN (CURRENT_DATE -"
        updatedAt: '2024-01-20T17:14:21.196Z'
      numEdits: 0
      reactions: []
    id: 65abff6dac588f2a1c75320d
    type: comment
  author: pcapazzi
  content: "The limit of the returned response was indeed tokens. This is my first\
    \ try with an inference endpoint. I increased the parameter for Max New Tokens\
    \ and received complete SQL. Then switched over to API and was able to take the\
    \ parameters and update the Python code. \n\nI switched to 7b in case the multiple\
    \ statements was something only experienced in 34b alpha. But I still continue\
    \ to get multiple SQL statements:\ninputs:\n\nGiven the following schmea provide\
    \ the SQL that will answer the question:\n\n                   create table sales\
    \ (\n                       transaction_id bigint,\n                       transaction_dt\
    \ date,\n                       transaction_amt float,\n                     \
    \  store_id int,\n                       store_name varchar(50))\n           \
    \        \n                   Question: How did our sales last month compare against\
    \ sales from the previous month for each store?\n\ngenerated_text:\n\n       \
    \            SELECT date_trunc('month', transaction_dt) AS MONTH, COUNT(*) AS\
    \ sales_count FROM sales WHERE date_part('year', transaction_dt) = date_part('year',\
    \ CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE - interval\
    \ '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH ORDER BY MONTH;\n\
    \                   \n                   \"\"\"\n        ),\n   \n        \"\"\
    \" SELECT date_trunc('month', transaction_dt) AS MONTH, COUNT(*) AS sales_count\
    \ FROM sales WHERE date_part('year', transaction_dt) = date_part('year', CURRENT_DATE)\
    \ AND date_part('month', transaction_dt) IN (CURRENT_DATE - interval '1 month',\
    \ CURRENT_DATE - interval '2 month') GROUP BY MONTH ORDER BY MONTH; \"\"\"\n \
    \  \n   \n        \"\"\" SELECT date_trunc('month', transaction_dt) AS MONTH,\
    \ COUNT(*) AS sales_count FROM sales WHERE date_part('year', transaction_dt) =\
    \ date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt) IN (CURRENT_DATE\
    \ - interval '1 month', CURRENT_DATE - interval '2 month') GROUP BY MONTH ORDER\
    \ BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month', transaction_dt)\
    \ AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year', transaction_dt)\
    \ = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt) IN\
    \ (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month') GROUP\
    \ BY MONTH ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
    \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
    \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
    \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month') GROUP\
    \ BY MONTH ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
    \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
    \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
    \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month') GROUP\
    \ BY MONTH ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
    \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
    \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
    \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month') GROUP\
    \ BY MONTH ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
    \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
    \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
    \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month') GROUP\
    \ BY MONTH ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
    \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
    \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
    \ IN (CURRENT_DATE - interval '1 month', CURRENT_DATE - interval '2 month') GROUP\
    \ BY MONTH ORDER BY MONTH; \"\"\"\n   \n        \"\"\" SELECT date_trunc('month',\
    \ transaction_dt) AS MONTH, COUNT(*) AS sales_count FROM sales WHERE date_part('year',\
    \ transaction_dt) = date_part('year', CURRENT_DATE) AND date_part('month', transaction_dt)\
    \ IN (CURRENT_DATE -"
  created_at: 2024-01-20 17:14:21+00:00
  edited: false
  hidden: false
  id: 65abff6dac588f2a1c75320d
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/fb44d0a95cd946b17a6a45e8a97142fc.svg
      fullname: Wong
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: jp-defog
      type: user
    createdAt: '2024-01-25T08:38:06.000Z'
    data:
      edited: false
      editors:
      - jp-defog
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7772534489631653
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/fb44d0a95cd946b17a6a45e8a97142fc.svg
          fullname: Wong
          isHf: false
          isPro: false
          name: jp-defog
          type: user
        html: "<p>Hi <span data-props=\"{&quot;user&quot;:&quot;pcapazzi&quot;}\"\
          \ data-target=\"UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\"\
          >\n\n<span class=\"inline-block\"><span class=\"contents\"><a href=\"/pcapazzi\"\
          >@<span class=\"underline\">pcapazzi</span></a></span>\n\n\t</span></span>\
          \ , you can try formatting your prompt like our test prompt here: <a rel=\"\
          nofollow\" href=\"https://github.com/defog-ai/sql-eval/blob/main/prompts/prompt.md\"\
          >https://github.com/defog-ai/sql-eval/blob/main/prompts/prompt.md</a><br>Hopefully\
          \ that'll give you better results!</p>\n"
        raw: 'Hi @pcapazzi , you can try formatting your prompt like our test prompt
          here: https://github.com/defog-ai/sql-eval/blob/main/prompts/prompt.md

          Hopefully that''ll give you better results!'
        updatedAt: '2024-01-25T08:38:06.187Z'
      numEdits: 0
      reactions: []
    id: 65b21deeb7aeef8fb1d59d97
    type: comment
  author: jp-defog
  content: 'Hi @pcapazzi , you can try formatting your prompt like our test prompt
    here: https://github.com/defog-ai/sql-eval/blob/main/prompts/prompt.md

    Hopefully that''ll give you better results!'
  created_at: 2024-01-25 08:38:06+00:00
  edited: false
  hidden: false
  id: 65b21deeb7aeef8fb1d59d97
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 8
repo_id: defog/sqlcoder-34b-alpha
repo_type: model
status: open
target_branch: null
title: Duplicated SQL Statements when running endpoint
