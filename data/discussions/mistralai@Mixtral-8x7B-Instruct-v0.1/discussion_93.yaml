!!python/object:huggingface_hub.community.DiscussionWithDetails
author: HuggySSO
conflicting_files: null
created_at: 2024-01-15 15:57:05+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/efb90a2d26e7056edcca8e366e9f7c18.svg
      fullname: Er
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: HuggySSO
      type: user
    createdAt: '2024-01-15T15:57:05.000Z'
    data:
      edited: false
      editors:
      - HuggySSO
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.6688305139541626
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/efb90a2d26e7056edcca8e366e9f7c18.svg
          fullname: Er
          isHf: false
          isPro: false
          name: HuggySSO
          type: user
        html: "<p>I am trying to run Mixtral on my local machine with 64gb ram and\
          \ a 4090. I use this minimal example: </p>\n<pre><code>from transformers\
          \ import AutoModelForCausalLM, AutoTokenizer\n\nmodel = AutoModelForCausalLM.from_pretrained(\"\
          mistralai/Mistral-7B-Instruct-v0.2\", load_in_4bit=True)\ntokenizer = AutoTokenizer.from_pretrained(\"\
          mistralai/Mistral-7B-Instruct-v0.2\")\n\nmessages = [\n    {\"role\": \"\
          user\", \"content\": \"Sprichst Du auch deutsch?\"}\n]\n\ninputs = tokenizer(messages,\
          \ return_tensors=\"pt\").to(0)\n\noutputs = model.generate(**inputs, max_new_tokens=20)\n\
          print(tokenizer.decode(outputs[0], skip_special_tokens=True))\n</code></pre>\n\
          <p>But get the following cuda warning (Other llms run with cuda )</p>\n\
          <p>CUDA_SETUP: WARNING! libcudart.so not found in any environmental path.\
          \ Searching in backup paths...<br>The following directories listed in your\
          \ path were found to be non-existent: {WindowsPath('/usr/local/cuda/lib64')}<br>DEBUG:\
          \ Possible options found for libcudart.so: set()<br>CUDA SETUP: PyTorch\
          \ settings found: CUDA_VERSION=118, Highest Compute Capability: 8.9.<br>CUDA\
          \ SETUP: To manually override the PyTorch CUDA version please see:<a rel=\"\
          nofollow\" href=\"https://github.com/TimDettmers/bitsandbytes/blob/main/how_to_use_nonpytorch_cuda.md\"\
          >https://github.com/TimDettmers/bitsandbytes/blob/main/how_to_use_nonpytorch_cuda.md</a><br>CUDA\
          \ SETUP: Loading binary C:\\Users...\\venv...\\lib\\site-packages\\bitsandbytes\\\
          libbitsandbytes_cuda118.so...<br>argument of type 'WindowsPath' is not iterable<br>CUDA\
          \ SETUP: Problem: The main issue seems to be that the main CUDA runtime\
          \ library was not detected.<br>CUDA SETUP: Solution 1: To solve the issue\
          \ the libcudart.so location needs to be added to the LD_LIBRARY_PATH variable<br>CUDA\
          \ SETUP: Solution 1a): Find the cuda runtime library via: find / -name libcudart.so\
          \ 2&gt;/dev/null<br>CUDA SETUP: Solution 1b): Once the library is found\
          \ add it to the LD_LIBRARY_PATH: export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:FOUND_PATH_FROM_1a<br>CUDA\
          \ SETUP: Solution 1c): For a permanent solution add the export from 1b into\
          \ your .bashrc file, located at ~/.bashrc<br>CUDA SETUP: Solution 2: If\
          \ no library was found in step 1a) you need to install CUDA.<br>CUDA SETUP:\
          \ Solution 2a): Download CUDA install script: wget <a rel=\"nofollow\" href=\"\
          https://raw.githubusercontent.com/TimDettmers/bitsandbytes/main/cuda_install.sh\"\
          >https://raw.githubusercontent.com/TimDettmers/bitsandbytes/main/cuda_install.sh</a><br>CUDA\
          \ SETUP: Solution 2b): Install desired CUDA version to desired location.\
          \ The syntax is bash cuda_install.sh CUDA_VERSION PATH_TO_INSTALL_INTO.<br>CUDA\
          \ SETUP: Solution 2b): For example, \"bash cuda_install.sh 113 ~/local/\"\
          \ will download CUDA 11.3 and install into the folder ~/local</p>\n"
        raw: "I am trying to run Mixtral on my local machine with 64gb ram and a 4090.\
          \ I use this minimal example: \r\n\r\n    from transformers import AutoModelForCausalLM,\
          \ AutoTokenizer\r\n\r\n    model = AutoModelForCausalLM.from_pretrained(\"\
          mistralai/Mistral-7B-Instruct-v0.2\", load_in_4bit=True)\r\n    tokenizer\
          \ = AutoTokenizer.from_pretrained(\"mistralai/Mistral-7B-Instruct-v0.2\"\
          )\r\n\r\n    messages = [\r\n        {\"role\": \"user\", \"content\": \"\
          Sprichst Du auch deutsch?\"}\r\n    ]\r\n\r\n    inputs = tokenizer(messages,\
          \ return_tensors=\"pt\").to(0)\r\n\r\n    outputs = model.generate(**inputs,\
          \ max_new_tokens=20)\r\n    print(tokenizer.decode(outputs[0], skip_special_tokens=True))\r\
          \n\r\nBut get the following cuda warning (Other llms run with cuda )\r\n\
          \r\nCUDA_SETUP: WARNING! libcudart.so not found in any environmental path.\
          \ Searching in backup paths...\r\nThe following directories listed in your\
          \ path were found to be non-existent: {WindowsPath('/usr/local/cuda/lib64')}\r\
          \nDEBUG: Possible options found for libcudart.so: set()\r\nCUDA SETUP: PyTorch\
          \ settings found: CUDA_VERSION=118, Highest Compute Capability: 8.9.\r\n\
          CUDA SETUP: To manually override the PyTorch CUDA version please see:https://github.com/TimDettmers/bitsandbytes/blob/main/how_to_use_nonpytorch_cuda.md\r\
          \nCUDA SETUP: Loading binary C:\\Users\\...\\venv\\...\\lib\\site-packages\\\
          bitsandbytes\\libbitsandbytes_cuda118.so...\r\nargument of type 'WindowsPath'\
          \ is not iterable\r\nCUDA SETUP: Problem: The main issue seems to be that\
          \ the main CUDA runtime library was not detected.\r\nCUDA SETUP: Solution\
          \ 1: To solve the issue the libcudart.so location needs to be added to the\
          \ LD_LIBRARY_PATH variable\r\nCUDA SETUP: Solution 1a): Find the cuda runtime\
          \ library via: find / -name libcudart.so 2>/dev/null\r\nCUDA SETUP: Solution\
          \ 1b): Once the library is found add it to the LD_LIBRARY_PATH: export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:FOUND_PATH_FROM_1a\r\
          \nCUDA SETUP: Solution 1c): For a permanent solution add the export from\
          \ 1b into your .bashrc file, located at ~/.bashrc\r\nCUDA SETUP: Solution\
          \ 2: If no library was found in step 1a) you need to install CUDA.\r\nCUDA\
          \ SETUP: Solution 2a): Download CUDA install script: wget https://raw.githubusercontent.com/TimDettmers/bitsandbytes/main/cuda_install.sh\r\
          \nCUDA SETUP: Solution 2b): Install desired CUDA version to desired location.\
          \ The syntax is bash cuda_install.sh CUDA_VERSION PATH_TO_INSTALL_INTO.\r\
          \nCUDA SETUP: Solution 2b): For example, \"bash cuda_install.sh 113 ~/local/\"\
          \ will download CUDA 11.3 and install into the folder ~/local\r\n"
        updatedAt: '2024-01-15T15:57:05.348Z'
      numEdits: 0
      reactions: []
    id: 65a555d141b6ef119cd5b7b7
    type: comment
  author: HuggySSO
  content: "I am trying to run Mixtral on my local machine with 64gb ram and a 4090.\
    \ I use this minimal example: \r\n\r\n    from transformers import AutoModelForCausalLM,\
    \ AutoTokenizer\r\n\r\n    model = AutoModelForCausalLM.from_pretrained(\"mistralai/Mistral-7B-Instruct-v0.2\"\
    , load_in_4bit=True)\r\n    tokenizer = AutoTokenizer.from_pretrained(\"mistralai/Mistral-7B-Instruct-v0.2\"\
    )\r\n\r\n    messages = [\r\n        {\"role\": \"user\", \"content\": \"Sprichst\
    \ Du auch deutsch?\"}\r\n    ]\r\n\r\n    inputs = tokenizer(messages, return_tensors=\"\
    pt\").to(0)\r\n\r\n    outputs = model.generate(**inputs, max_new_tokens=20)\r\
    \n    print(tokenizer.decode(outputs[0], skip_special_tokens=True))\r\n\r\nBut\
    \ get the following cuda warning (Other llms run with cuda )\r\n\r\nCUDA_SETUP:\
    \ WARNING! libcudart.so not found in any environmental path. Searching in backup\
    \ paths...\r\nThe following directories listed in your path were found to be non-existent:\
    \ {WindowsPath('/usr/local/cuda/lib64')}\r\nDEBUG: Possible options found for\
    \ libcudart.so: set()\r\nCUDA SETUP: PyTorch settings found: CUDA_VERSION=118,\
    \ Highest Compute Capability: 8.9.\r\nCUDA SETUP: To manually override the PyTorch\
    \ CUDA version please see:https://github.com/TimDettmers/bitsandbytes/blob/main/how_to_use_nonpytorch_cuda.md\r\
    \nCUDA SETUP: Loading binary C:\\Users\\...\\venv\\...\\lib\\site-packages\\bitsandbytes\\\
    libbitsandbytes_cuda118.so...\r\nargument of type 'WindowsPath' is not iterable\r\
    \nCUDA SETUP: Problem: The main issue seems to be that the main CUDA runtime library\
    \ was not detected.\r\nCUDA SETUP: Solution 1: To solve the issue the libcudart.so\
    \ location needs to be added to the LD_LIBRARY_PATH variable\r\nCUDA SETUP: Solution\
    \ 1a): Find the cuda runtime library via: find / -name libcudart.so 2>/dev/null\r\
    \nCUDA SETUP: Solution 1b): Once the library is found add it to the LD_LIBRARY_PATH:\
    \ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:FOUND_PATH_FROM_1a\r\nCUDA SETUP: Solution\
    \ 1c): For a permanent solution add the export from 1b into your .bashrc file,\
    \ located at ~/.bashrc\r\nCUDA SETUP: Solution 2: If no library was found in step\
    \ 1a) you need to install CUDA.\r\nCUDA SETUP: Solution 2a): Download CUDA install\
    \ script: wget https://raw.githubusercontent.com/TimDettmers/bitsandbytes/main/cuda_install.sh\r\
    \nCUDA SETUP: Solution 2b): Install desired CUDA version to desired location.\
    \ The syntax is bash cuda_install.sh CUDA_VERSION PATH_TO_INSTALL_INTO.\r\nCUDA\
    \ SETUP: Solution 2b): For example, \"bash cuda_install.sh 113 ~/local/\" will\
    \ download CUDA 11.3 and install into the folder ~/local\r\n"
  created_at: 2024-01-15 15:57:05+00:00
  edited: false
  hidden: false
  id: 65a555d141b6ef119cd5b7b7
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/ec3b470688444406e40d1ca6e1329d33.svg
      fullname: Edward
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: EddieJoeJohnson
      type: user
    createdAt: '2024-01-24T00:53:07.000Z'
    data:
      edited: false
      editors:
      - EddieJoeJohnson
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9742369651794434
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/ec3b470688444406e40d1ca6e1329d33.svg
          fullname: Edward
          isHf: false
          isPro: false
          name: EddieJoeJohnson
          type: user
        html: '<p>I am having the identical issue. CUDA/GPU was working for me in
          all other situations. Only now trying Mixtral I get the same error. I have
          tried old-school searching for libcudart.so on my entire HD and can''t find
          it anywhere.</p>

          '
        raw: 'I am having the identical issue. CUDA/GPU was working for me in all
          other situations. Only now trying Mixtral I get the same error. I have tried
          old-school searching for libcudart.so on my entire HD and can''t find it
          anywhere.

          '
        updatedAt: '2024-01-24T00:53:07.086Z'
      numEdits: 0
      reactions: []
    id: 65b05f73266937a1f987b24d
    type: comment
  author: EddieJoeJohnson
  content: 'I am having the identical issue. CUDA/GPU was working for me in all other
    situations. Only now trying Mixtral I get the same error. I have tried old-school
    searching for libcudart.so on my entire HD and can''t find it anywhere.

    '
  created_at: 2024-01-24 00:53:07+00:00
  edited: false
  hidden: false
  id: 65b05f73266937a1f987b24d
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 93
repo_id: mistralai/Mixtral-8x7B-Instruct-v0.1
repo_type: model
status: open
target_branch: null
title: Cuda Error
