!!python/object:huggingface_hub.community.DiscussionWithDetails
author: ratandhruv
conflicting_files: null
created_at: 2023-08-23 09:29:53+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/3cdd184d4bf70f513c85501e772ca61b.svg
      fullname: Dhruv
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ratandhruv
      type: user
    createdAt: '2023-08-23T10:29:53.000Z'
    data:
      edited: false
      editors:
      - ratandhruv
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7349333763122559
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/3cdd184d4bf70f513c85501e772ca61b.svg
          fullname: Dhruv
          isHf: false
          isPro: false
          name: ratandhruv
          type: user
        html: "<p>Thanks for sharing your model. I am trying to load some data from\
          \ csv. The rows have string values and float values for some columns. Idea\
          \ is to query on these float values and get results. </p>\n<pre><code>from\
          \ transformers import TapexTokenizer, BartForConditionalGeneration\nimport\
          \ pandas as pd\n\ntokenizer = TapexTokenizer.from_pretrained(\"microsoft/tapex-large-sql-execution\"\
          )\nmodel = BartForConditionalGeneration.from_pretrained(\"microsoft/tapex-large-sql-execution\"\
          )\n\ncsv_file_path = \"smallData.csv\"\ndata = pd.read_csv(csv_file_path)\n\
          \ #Convert all values to string to resolve error sequence item 4: expected\
          \ str instance, float found\nfor key, values in data.items():\n    data[key]\
          \ = [str(value) for value in values]\n\ntable = pd.DataFrame.from_dict(data)\n\
          \n# tapex accepts uncased input since it is pre-trained on the uncased corpus\n\
          query = \"Give me asins with protein_value below 111\"\nencoding = tokenizer(table=data,\
          \ query=query, return_tensors=\"pt\")\n\noutputs = model.generate(**encoding,max_length=1024)\n\
          \nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\n</code></pre>\n\
          <p>I convert the float values to string to resolve an error, but lose the\
          \ ability to query on numeric values. Such as Select products where float_value_YY\
          \ &lt; 75.0 -&gt; This does not understand 75.0 as its stored in string\
          \ fashion. </p>\n<p>In the examples, I see I am able to query over float\
          \ values as well. What can I do to fix this?</p>\n"
        raw: "Thanks for sharing your model. I am trying to load some data from csv.\
          \ The rows have string values and float values for some columns. Idea is\
          \ to query on these float values and get results. \r\n\r\n````\r\nfrom transformers\
          \ import TapexTokenizer, BartForConditionalGeneration\r\nimport pandas as\
          \ pd\r\n\r\ntokenizer = TapexTokenizer.from_pretrained(\"microsoft/tapex-large-sql-execution\"\
          )\r\nmodel = BartForConditionalGeneration.from_pretrained(\"microsoft/tapex-large-sql-execution\"\
          )\r\n\r\ncsv_file_path = \"smallData.csv\"\r\ndata = pd.read_csv(csv_file_path)\r\
          \n #Convert all values to string to resolve error sequence item 4: expected\
          \ str instance, float found\r\nfor key, values in data.items():\r\n    data[key]\
          \ = [str(value) for value in values]\r\n\r\ntable = pd.DataFrame.from_dict(data)\r\
          \n\r\n# tapex accepts uncased input since it is pre-trained on the uncased\
          \ corpus\r\nquery = \"Give me asins with protein_value below 111\"\r\nencoding\
          \ = tokenizer(table=data, query=query, return_tensors=\"pt\")\r\n\r\noutputs\
          \ = model.generate(**encoding,max_length=1024)\r\n\r\nprint(tokenizer.batch_decode(outputs,\
          \ skip_special_tokens=True))\r\n````\r\nI convert the float values to string\
          \ to resolve an error, but lose the ability to query on numeric values.\
          \ Such as Select products where float_value_YY < 75.0 -> This does not understand\
          \ 75.0 as its stored in string fashion. \r\n\r\nIn the examples, I see I\
          \ am able to query over float values as well. What can I do to fix this?\r\
          \n"
        updatedAt: '2023-08-23T10:29:53.878Z'
      numEdits: 0
      reactions: []
    id: 64e5dfa15f28a3fb758553af
    type: comment
  author: ratandhruv
  content: "Thanks for sharing your model. I am trying to load some data from csv.\
    \ The rows have string values and float values for some columns. Idea is to query\
    \ on these float values and get results. \r\n\r\n````\r\nfrom transformers import\
    \ TapexTokenizer, BartForConditionalGeneration\r\nimport pandas as pd\r\n\r\n\
    tokenizer = TapexTokenizer.from_pretrained(\"microsoft/tapex-large-sql-execution\"\
    )\r\nmodel = BartForConditionalGeneration.from_pretrained(\"microsoft/tapex-large-sql-execution\"\
    )\r\n\r\ncsv_file_path = \"smallData.csv\"\r\ndata = pd.read_csv(csv_file_path)\r\
    \n #Convert all values to string to resolve error sequence item 4: expected str\
    \ instance, float found\r\nfor key, values in data.items():\r\n    data[key] =\
    \ [str(value) for value in values]\r\n\r\ntable = pd.DataFrame.from_dict(data)\r\
    \n\r\n# tapex accepts uncased input since it is pre-trained on the uncased corpus\r\
    \nquery = \"Give me asins with protein_value below 111\"\r\nencoding = tokenizer(table=data,\
    \ query=query, return_tensors=\"pt\")\r\n\r\noutputs = model.generate(**encoding,max_length=1024)\r\
    \n\r\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\r\n````\r\
    \nI convert the float values to string to resolve an error, but lose the ability\
    \ to query on numeric values. Such as Select products where float_value_YY < 75.0\
    \ -> This does not understand 75.0 as its stored in string fashion. \r\n\r\nIn\
    \ the examples, I see I am able to query over float values as well. What can I\
    \ do to fix this?\r\n"
  created_at: 2023-08-23 09:29:53+00:00
  edited: false
  hidden: false
  id: 64e5dfa15f28a3fb758553af
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/612ee6a7b960e78c6d2319d4/2Hu9BaAyXbyh1vt0v1Qui.jpeg?w=200&h=200&f=face
      fullname: Qian Liu
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: SivilTaram
      type: user
    createdAt: '2023-08-24T02:02:42.000Z'
    data:
      edited: false
      editors:
      - SivilTaram
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9256016612052917
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/612ee6a7b960e78c6d2319d4/2Hu9BaAyXbyh1vt0v1Qui.jpeg?w=200&h=200&f=face
          fullname: Qian Liu
          isHf: false
          isPro: false
          name: SivilTaram
          type: user
        html: "<p><span data-props=\"{&quot;user&quot;:&quot;ratandhruv&quot;}\" data-target=\"\
          UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\">\n\n<span class=\"\
          inline-block\"><span class=\"contents\"><a href=\"/ratandhruv\">@<span class=\"\
          underline\">ratandhruv</span></a></span>\n\n\t</span></span> Thanks for\
          \ your interest on our work! Since the model only accepts string as the\
          \ input, so it seems okay for me to convert float values into strings to\
          \ feed into model. Since the model is already pre-trained on SQL execution\
          \ and it should be sensitive to the number values. In conclusion, it is\
          \ okay to convert float values into string.</p>\n"
        raw: '@ratandhruv Thanks for your interest on our work! Since the model only
          accepts string as the input, so it seems okay for me to convert float values
          into strings to feed into model. Since the model is already pre-trained
          on SQL execution and it should be sensitive to the number values. In conclusion,
          it is okay to convert float values into string.'
        updatedAt: '2023-08-24T02:02:42.969Z'
      numEdits: 0
      reactions: []
    id: 64e6ba42ae53e70cdaf78e91
    type: comment
  author: SivilTaram
  content: '@ratandhruv Thanks for your interest on our work! Since the model only
    accepts string as the input, so it seems okay for me to convert float values into
    strings to feed into model. Since the model is already pre-trained on SQL execution
    and it should be sensitive to the number values. In conclusion, it is okay to
    convert float values into string.'
  created_at: 2023-08-24 01:02:42+00:00
  edited: false
  hidden: false
  id: 64e6ba42ae53e70cdaf78e91
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/3cdd184d4bf70f513c85501e772ca61b.svg
      fullname: Dhruv
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ratandhruv
      type: user
    createdAt: '2023-08-24T05:34:06.000Z'
    data:
      edited: false
      editors:
      - ratandhruv
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7961190938949585
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/3cdd184d4bf70f513c85501e772ca61b.svg
          fullname: Dhruv
          isHf: false
          isPro: false
          name: ratandhruv
          type: user
        html: '<p>Somehow the model does not return correct data while comparing.
          Only when checking exact queries do I get the correct answer. </p>

          '
        raw: 'Somehow the model does not return correct data while comparing. Only
          when checking exact queries do I get the correct answer. '
        updatedAt: '2023-08-24T05:34:06.359Z'
      numEdits: 0
      reactions: []
    id: 64e6ebceee144dc4ebf955f2
    type: comment
  author: ratandhruv
  content: 'Somehow the model does not return correct data while comparing. Only when
    checking exact queries do I get the correct answer. '
  created_at: 2023-08-24 04:34:06+00:00
  edited: false
  hidden: false
  id: 64e6ebceee144dc4ebf955f2
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/612ee6a7b960e78c6d2319d4/2Hu9BaAyXbyh1vt0v1Qui.jpeg?w=200&h=200&f=face
      fullname: Qian Liu
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: SivilTaram
      type: user
    createdAt: '2023-08-24T05:59:39.000Z'
    data:
      edited: false
      editors:
      - SivilTaram
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9455240964889526
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/612ee6a7b960e78c6d2319d4/2Hu9BaAyXbyh1vt0v1Qui.jpeg?w=200&h=200&f=face
          fullname: Qian Liu
          isHf: false
          isPro: false
          name: SivilTaram
          type: user
        html: "<p><span data-props=\"{&quot;user&quot;:&quot;ratandhruv&quot;}\" data-target=\"\
          UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\">\n\n<span class=\"\
          inline-block\"><span class=\"contents\"><a href=\"/ratandhruv\">@<span class=\"\
          underline\">ratandhruv</span></a></span>\n\n\t</span></span> Can you try\
          \ more examples? If your table contains a lot of floating numbers, I would\
          \ recommend you to convert them into integers for the model to have a better\
          \ performance. And also, understanding numbers for current models are quite\
          \ challenging though. </p>\n"
        raw: '@ratandhruv Can you try more examples? If your table contains a lot
          of floating numbers, I would recommend you to convert them into integers
          for the model to have a better performance. And also, understanding numbers
          for current models are quite challenging though. '
        updatedAt: '2023-08-24T05:59:39.560Z'
      numEdits: 0
      reactions: []
    id: 64e6f1cb79630927bfc6efc6
    type: comment
  author: SivilTaram
  content: '@ratandhruv Can you try more examples? If your table contains a lot of
    floating numbers, I would recommend you to convert them into integers for the
    model to have a better performance. And also, understanding numbers for current
    models are quite challenging though. '
  created_at: 2023-08-24 04:59:39+00:00
  edited: false
  hidden: false
  id: 64e6f1cb79630927bfc6efc6
  type: comment
- !!python/object:huggingface_hub.community.DiscussionStatusChange
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/612ee6a7b960e78c6d2319d4/2Hu9BaAyXbyh1vt0v1Qui.jpeg?w=200&h=200&f=face
      fullname: Qian Liu
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: SivilTaram
      type: user
    createdAt: '2024-01-12T11:25:48.000Z'
    data:
      status: closed
    id: 65a121bc14ac6d6f818e3e5d
    type: status-change
  author: SivilTaram
  created_at: 2024-01-12 11:25:48+00:00
  id: 65a121bc14ac6d6f818e3e5d
  new_status: closed
  type: status-change
is_pull_request: false
merge_commit_oid: null
num: 3
repo_id: microsoft/tapex-large-finetuned-wtq
repo_type: model
status: closed
target_branch: null
title: 'How to query on float values in model? '
