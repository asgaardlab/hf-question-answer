!!python/object:huggingface_hub.community.DiscussionWithDetails
author: tusharsarde
conflicting_files: null
created_at: 2023-07-29 12:41:47+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/5f2cbacdf3e06f5082abfcba7b1755a6.svg
      fullname: Tushar sarde
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: tusharsarde
      type: user
    createdAt: '2023-07-29T13:41:47.000Z'
    data:
      edited: false
      editors:
      - tusharsarde
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5474256873130798
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/5f2cbacdf3e06f5082abfcba7b1755a6.svg
          fullname: Tushar sarde
          isHf: false
          isPro: false
          name: tusharsarde
          type: user
        html: "<p>For example I am using following model to predict sql query with\
          \ streamlit. </p>\n<p> if st.button(\"Predict\"):</p>\n<pre><code>    tok_model\
          \ = \"juierror/flan-t5-text2sql-with-schema\"\n    tokenizer,model = tokmod(tok_model)\n\
          \    \n    # text = \"what interface is measure indicator code = 72_HR_ABX\
          \ and version is 1 and source is TD\"\n    table_name = \"df_qna\"\n   \
          \ table_column = ['Patient_Name', 'Country', 'Disease', 'CUI', 'Snomed',\
          \ 'Oxygen_Rate','Med_Type', 'Admission_Date']\n    \n    txt_sql = inference(question=sql_txt,\
          \ table=table_column)\n    \n    \n    ### SQL Modification\n    sql_avg\
          \ = [\"AVG\",\"COUNT\",\"DISTINCT\",\"MAX\",\"MIN\",\"SUM\"]\n    txt_sql\
          \ = txt_sql.replace(\"table\",table_name)\n    sql_quotes = []\n    for\
          \ match in re.finditer(\"=\",txt_sql):\n        new_txt = txt_sql[match.span()[1]+1:]\n\
          \        try:\n            match2 = re.search(\"AND\",new_txt)\n       \
          \     sql_quotes.append((new_txt[:match2.span()[0]]).strip())\n        except:\n\
          \            sql_quotes.append(new_txt.strip())\n    \n    for i in sql_quotes:\n\
          \        qts = \"'\" + i + \"'\"\n        txt_sql = txt_sql.replace(i, qts)\n\
          \        \n    for r in sql_avg:\n        if r in txt_sql:\n           \
          \ rr = re.search(rf\"{r} (\\w+)\", txt_sql)\n            init = \" \" +\
          \ rr[1]\n            qts = \"(\" + rr[1] + \")\"\n            txt_sql =\
          \ txt_sql.replace(init,qts)\n        else:\n            pass\n        \n\
          \        \n    st.success(f\"{txt_sql}\")\n    all_students = sqldf(txt_sql)\n\
          \    \n    st.text(\"Output - \")\n    st.write(all_students)\n</code></pre>\n"
        raw: "For example I am using following model to predict sql query with streamlit.\
          \ \r\n\r\n\r\n if st.button(\"Predict\"):\r\n        \r\n        tok_model\
          \ = \"juierror/flan-t5-text2sql-with-schema\"\r\n        tokenizer,model\
          \ = tokmod(tok_model)\r\n        \r\n        # text = \"what interface is\
          \ measure indicator code = 72_HR_ABX and version is 1 and source is TD\"\
          \r\n        table_name = \"df_qna\"\r\n        table_column = ['Patient_Name',\
          \ 'Country', 'Disease', 'CUI', 'Snomed', 'Oxygen_Rate','Med_Type', 'Admission_Date']\r\
          \n        \r\n        txt_sql = inference(question=sql_txt, table=table_column)\r\
          \n        \r\n        \r\n        ### SQL Modification\r\n        sql_avg\
          \ = [\"AVG\",\"COUNT\",\"DISTINCT\",\"MAX\",\"MIN\",\"SUM\"]\r\n       \
          \ txt_sql = txt_sql.replace(\"table\",table_name)\r\n        sql_quotes\
          \ = []\r\n        for match in re.finditer(\"=\",txt_sql):\r\n         \
          \   new_txt = txt_sql[match.span()[1]+1:]\r\n            try:\r\n      \
          \          match2 = re.search(\"AND\",new_txt)\r\n                sql_quotes.append((new_txt[:match2.span()[0]]).strip())\r\
          \n            except:\r\n                sql_quotes.append(new_txt.strip())\r\
          \n        \r\n        for i in sql_quotes:\r\n            qts = \"'\" +\
          \ i + \"'\"\r\n            txt_sql = txt_sql.replace(i, qts)\r\n       \
          \     \r\n        for r in sql_avg:\r\n            if r in txt_sql:\r\n\
          \                rr = re.search(rf\"{r} (\\w+)\", txt_sql)\r\n         \
          \       init = \" \" + rr[1]\r\n                qts = \"(\" + rr[1] + \"\
          )\"\r\n                txt_sql = txt_sql.replace(init,qts)\r\n         \
          \   else:\r\n                pass\r\n            \r\n            \r\n  \
          \      st.success(f\"{txt_sql}\")\r\n        all_students = sqldf(txt_sql)\r\
          \n        \r\n        st.text(\"Output - \")\r\n        st.write(all_students)"
        updatedAt: '2023-07-29T13:41:47.246Z'
      numEdits: 0
      reactions: []
    id: 64c5171ba3f7a8107db06584
    type: comment
  author: tusharsarde
  content: "For example I am using following model to predict sql query with streamlit.\
    \ \r\n\r\n\r\n if st.button(\"Predict\"):\r\n        \r\n        tok_model = \"\
    juierror/flan-t5-text2sql-with-schema\"\r\n        tokenizer,model = tokmod(tok_model)\r\
    \n        \r\n        # text = \"what interface is measure indicator code = 72_HR_ABX\
    \ and version is 1 and source is TD\"\r\n        table_name = \"df_qna\"\r\n \
    \       table_column = ['Patient_Name', 'Country', 'Disease', 'CUI', 'Snomed',\
    \ 'Oxygen_Rate','Med_Type', 'Admission_Date']\r\n        \r\n        txt_sql =\
    \ inference(question=sql_txt, table=table_column)\r\n        \r\n        \r\n\
    \        ### SQL Modification\r\n        sql_avg = [\"AVG\",\"COUNT\",\"DISTINCT\"\
    ,\"MAX\",\"MIN\",\"SUM\"]\r\n        txt_sql = txt_sql.replace(\"table\",table_name)\r\
    \n        sql_quotes = []\r\n        for match in re.finditer(\"=\",txt_sql):\r\
    \n            new_txt = txt_sql[match.span()[1]+1:]\r\n            try:\r\n  \
    \              match2 = re.search(\"AND\",new_txt)\r\n                sql_quotes.append((new_txt[:match2.span()[0]]).strip())\r\
    \n            except:\r\n                sql_quotes.append(new_txt.strip())\r\n\
    \        \r\n        for i in sql_quotes:\r\n            qts = \"'\" + i + \"\
    '\"\r\n            txt_sql = txt_sql.replace(i, qts)\r\n            \r\n     \
    \   for r in sql_avg:\r\n            if r in txt_sql:\r\n                rr =\
    \ re.search(rf\"{r} (\\w+)\", txt_sql)\r\n                init = \" \" + rr[1]\r\
    \n                qts = \"(\" + rr[1] + \")\"\r\n                txt_sql = txt_sql.replace(init,qts)\r\
    \n            else:\r\n                pass\r\n            \r\n            \r\n\
    \        st.success(f\"{txt_sql}\")\r\n        all_students = sqldf(txt_sql)\r\
    \n        \r\n        st.text(\"Output - \")\r\n        st.write(all_students)"
  created_at: 2023-07-29 12:41:47+00:00
  edited: false
  hidden: false
  id: 64c5171ba3f7a8107db06584
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 1
repo_id: jasonvan/llama-2-13b-chat-text2sql-warmup-300
repo_type: model
status: open
target_branch: null
title: 'How to use this model ? '
