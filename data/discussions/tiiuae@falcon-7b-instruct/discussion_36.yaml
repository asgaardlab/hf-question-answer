!!python/object:huggingface_hub.community.DiscussionWithDetails
author: isaranto
conflicting_files: null
created_at: 2023-06-19 12:03:32+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/485093f42a1a298c595820ed70640a25.svg
      fullname: Ilias Sarantopoulos
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: isaranto
      type: user
    createdAt: '2023-06-19T13:03:32.000Z'
    data:
      edited: false
      editors:
      - isaranto
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.6081207990646362
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/485093f42a1a298c595820ed70640a25.svg
          fullname: Ilias Sarantopoulos
          isHf: false
          isPro: false
          name: isaranto
          type: user
        html: "<p>I am experiencing OOM errors while trying to run inference using\
          \ on a GPU with 16GB VRAM. While I manage to load the model it then maxes\
          \ out the memory when I try to generate samples.<br>Digging a bit into this\
          \ while doing some profiling on a different machine I found that the amount\
          \ of RAM is used on model.generate() function is 2x model size, something\
          \ I am not experiencing with other models. The amount of additional resources\
          \ requested seems like a copy of the model is loaded onto the same device.\
          \ Anyone experience anything similar?<br>This is the code I am profiling\
          \ with the results:</p>\n<pre><code>Line #    Mem usage    Increment  Occurrences\
          \   Line Contents\n=============================================================\n\
          \     8     84.0 MiB     84.0 MiB           1   <span data-props=\"{&quot;user&quot;:&quot;profile&quot;}\"\
          \ data-target=\"UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\"\
          >\n\n<span class=\"inline-block\"><span class=\"contents\"><a href=\"/profile\"\
          >@<span class=\"underline\">profile</span></a></span>\n\n\t</span></span>()\n\
          \     9                                         def predict():\n    10 \
          \    84.0 MiB      0.0 MiB           1       start = time.time()\n    11\
          \     84.0 MiB      0.0 MiB           1       model_path = \"falcon-7b-instruct\"\
          \n    12  16616.1 MiB  16532.1 MiB           2       model = AutoModelForCausalLM.from_pretrained(model_path,\
          \ local_files_only=True,\n    13     84.0 MiB      0.0 MiB           1 \
          \                                                   trust_remote_code=True,\
          \ low_cpu_mem_usage=True)\n    14  16616.2 MiB      0.1 MiB           1\
          \       print(f\"Memory Footprint {round(model.get_memory_footprint()/(1024*1024*1024),\
          \ 2)} GB\")\n    15  16616.2 MiB      0.0 MiB           1       print(f\"\
          Memory Footprint {round(model.get_memory_footprint(return_buffers=False)\
          \ / (1024 * 1024 * 1024), 2)} GB\")\n    16  16655.0 MiB     38.8 MiB  \
          \         2       tokenizer = AutoTokenizer.from_pretrained(model_path,\
          \ local_files_only=True,\n    17  16616.2 MiB      0.0 MiB           1 \
          \                                                low_cpu_mem_usage=True)\n\
          \    18  16655.0 MiB      0.0 MiB           1       print(f\"model loaded\
          \ in {time.time() - start}\")\n    19  16655.0 MiB      0.0 MiB        \
          \   1       prompt = \"Once upon a time \"\n    20  16655.0 MiB      0.0\
          \ MiB           1       result_length = 100\n    21  16655.0 MiB      0.0\
          \ MiB           1       start = time.time()\n    22  16656.0 MiB      1.1\
          \ MiB           1       inputs = tokenizer(prompt, return_tensors=\"pt\"\
          ).to(\"cpu\")\n    23  16656.0 MiB      0.0 MiB           1       result_length\
          \ = inputs[\"input_ids\"].size()[1] + result_length\n    24            \
          \                             \n    25  30170.0 MiB  13514.0 MiB       \
          \    2       outputs = model.generate(inputs[\"input_ids\"],\n    26  16656.0\
          \ MiB      0.0 MiB           1                              max_length=result_length,\n\
          \    27  16656.0 MiB      0.0 MiB           1                          \
          \    do_sample=True,\n    28  16656.0 MiB      0.0 MiB           1     \
          \                         top_k=50,\n    29  16656.0 MiB      0.0 MiB  \
          \         1                              top_p=0.9\n    30             \
          \                                                      )\n    31       \
          \                                  \n    32  30170.1 MiB      0.0 MiB  \
          \         1       response = tokenizer.decode(outputs[0])\n    33  30170.1\
          \ MiB      0.0 MiB           1       print(time.time() - start)\n    34\
          \  30170.1 MiB      0.0 MiB           1       print(response)\n</code></pre>\n"
        raw: "I am experiencing OOM errors while trying to run inference using on\
          \ a GPU with 16GB VRAM. While I manage to load the model it then maxes out\
          \ the memory when I try to generate samples.\r\nDigging a bit into this\
          \ while doing some profiling on a different machine I found that the amount\
          \ of RAM is used on model.generate() function is 2x model size, something\
          \ I am not experiencing with other models. The amount of additional resources\
          \ requested seems like a copy of the model is loaded onto the same device.\
          \ Anyone experience anything similar?\r\nThis is the code I am profiling\
          \ with the results:\r\n```\r\nLine #    Mem usage    Increment  Occurrences\
          \   Line Contents\r\n=============================================================\r\
          \n     8     84.0 MiB     84.0 MiB           1   @profile()\r\n     9  \
          \                                       def predict():\r\n    10     84.0\
          \ MiB      0.0 MiB           1       start = time.time()\r\n    11     84.0\
          \ MiB      0.0 MiB           1       model_path = \"falcon-7b-instruct\"\
          \r\n    12  16616.1 MiB  16532.1 MiB           2       model = AutoModelForCausalLM.from_pretrained(model_path,\
          \ local_files_only=True,\r\n    13     84.0 MiB      0.0 MiB           1\
          \                                                    trust_remote_code=True,\
          \ low_cpu_mem_usage=True)\r\n    14  16616.2 MiB      0.1 MiB          \
          \ 1       print(f\"Memory Footprint {round(model.get_memory_footprint()/(1024*1024*1024),\
          \ 2)} GB\")\r\n    15  16616.2 MiB      0.0 MiB           1       print(f\"\
          Memory Footprint {round(model.get_memory_footprint(return_buffers=False)\
          \ / (1024 * 1024 * 1024), 2)} GB\")\r\n    16  16655.0 MiB     38.8 MiB\
          \           2       tokenizer = AutoTokenizer.from_pretrained(model_path,\
          \ local_files_only=True,\r\n    17  16616.2 MiB      0.0 MiB           1\
          \                                                 low_cpu_mem_usage=True)\r\
          \n    18  16655.0 MiB      0.0 MiB           1       print(f\"model loaded\
          \ in {time.time() - start}\")\r\n    19  16655.0 MiB      0.0 MiB      \
          \     1       prompt = \"Once upon a time \"\r\n    20  16655.0 MiB    \
          \  0.0 MiB           1       result_length = 100\r\n    21  16655.0 MiB\
          \      0.0 MiB           1       start = time.time()\r\n    22  16656.0\
          \ MiB      1.1 MiB           1       inputs = tokenizer(prompt, return_tensors=\"\
          pt\").to(\"cpu\")\r\n    23  16656.0 MiB      0.0 MiB           1      \
          \ result_length = inputs[\"input_ids\"].size()[1] + result_length\r\n  \
          \  24                                         \r\n    25  30170.0 MiB  13514.0\
          \ MiB           2       outputs = model.generate(inputs[\"input_ids\"],\r\
          \n    26  16656.0 MiB      0.0 MiB           1                         \
          \     max_length=result_length,\r\n    27  16656.0 MiB      0.0 MiB    \
          \       1                              do_sample=True,\r\n    28  16656.0\
          \ MiB      0.0 MiB           1                              top_k=50,\r\n\
          \    29  16656.0 MiB      0.0 MiB           1                          \
          \    top_p=0.9\r\n    30                                               \
          \                    )\r\n    31                                       \
          \  \r\n    32  30170.1 MiB      0.0 MiB           1       response = tokenizer.decode(outputs[0])\r\
          \n    33  30170.1 MiB      0.0 MiB           1       print(time.time() -\
          \ start)\r\n    34  30170.1 MiB      0.0 MiB           1       print(response)\r\
          \n```"
        updatedAt: '2023-06-19T13:03:32.674Z'
      numEdits: 0
      reactions: []
    id: 6490522430d3f10da2b31a81
    type: comment
  author: isaranto
  content: "I am experiencing OOM errors while trying to run inference using on a\
    \ GPU with 16GB VRAM. While I manage to load the model it then maxes out the memory\
    \ when I try to generate samples.\r\nDigging a bit into this while doing some\
    \ profiling on a different machine I found that the amount of RAM is used on model.generate()\
    \ function is 2x model size, something I am not experiencing with other models.\
    \ The amount of additional resources requested seems like a copy of the model\
    \ is loaded onto the same device. Anyone experience anything similar?\r\nThis\
    \ is the code I am profiling with the results:\r\n```\r\nLine #    Mem usage \
    \   Increment  Occurrences   Line Contents\r\n=============================================================\r\
    \n     8     84.0 MiB     84.0 MiB           1   @profile()\r\n     9        \
    \                                 def predict():\r\n    10     84.0 MiB      0.0\
    \ MiB           1       start = time.time()\r\n    11     84.0 MiB      0.0 MiB\
    \           1       model_path = \"falcon-7b-instruct\"\r\n    12  16616.1 MiB\
    \  16532.1 MiB           2       model = AutoModelForCausalLM.from_pretrained(model_path,\
    \ local_files_only=True,\r\n    13     84.0 MiB      0.0 MiB           1     \
    \                                               trust_remote_code=True, low_cpu_mem_usage=True)\r\
    \n    14  16616.2 MiB      0.1 MiB           1       print(f\"Memory Footprint\
    \ {round(model.get_memory_footprint()/(1024*1024*1024), 2)} GB\")\r\n    15  16616.2\
    \ MiB      0.0 MiB           1       print(f\"Memory Footprint {round(model.get_memory_footprint(return_buffers=False)\
    \ / (1024 * 1024 * 1024), 2)} GB\")\r\n    16  16655.0 MiB     38.8 MiB      \
    \     2       tokenizer = AutoTokenizer.from_pretrained(model_path, local_files_only=True,\r\
    \n    17  16616.2 MiB      0.0 MiB           1                               \
    \                  low_cpu_mem_usage=True)\r\n    18  16655.0 MiB      0.0 MiB\
    \           1       print(f\"model loaded in {time.time() - start}\")\r\n    19\
    \  16655.0 MiB      0.0 MiB           1       prompt = \"Once upon a time \"\r\
    \n    20  16655.0 MiB      0.0 MiB           1       result_length = 100\r\n \
    \   21  16655.0 MiB      0.0 MiB           1       start = time.time()\r\n   \
    \ 22  16656.0 MiB      1.1 MiB           1       inputs = tokenizer(prompt, return_tensors=\"\
    pt\").to(\"cpu\")\r\n    23  16656.0 MiB      0.0 MiB           1       result_length\
    \ = inputs[\"input_ids\"].size()[1] + result_length\r\n    24                \
    \                         \r\n    25  30170.0 MiB  13514.0 MiB           2   \
    \    outputs = model.generate(inputs[\"input_ids\"],\r\n    26  16656.0 MiB  \
    \    0.0 MiB           1                              max_length=result_length,\r\
    \n    27  16656.0 MiB      0.0 MiB           1                              do_sample=True,\r\
    \n    28  16656.0 MiB      0.0 MiB           1                              top_k=50,\r\
    \n    29  16656.0 MiB      0.0 MiB           1                              top_p=0.9\r\
    \n    30                                                                   )\r\
    \n    31                                         \r\n    32  30170.1 MiB     \
    \ 0.0 MiB           1       response = tokenizer.decode(outputs[0])\r\n    33\
    \  30170.1 MiB      0.0 MiB           1       print(time.time() - start)\r\n \
    \   34  30170.1 MiB      0.0 MiB           1       print(response)\r\n```"
  created_at: 2023-06-19 12:03:32+00:00
  edited: false
  hidden: false
  id: 6490522430d3f10da2b31a81
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 36
repo_id: tiiuae/falcon-7b-instruct
repo_type: model
status: open
target_branch: null
title: Double amount of memory usage when calling generate function (inference)
