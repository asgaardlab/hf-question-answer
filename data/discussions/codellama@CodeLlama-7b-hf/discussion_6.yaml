!!python/object:huggingface_hub.community.DiscussionWithDetails
author: bigfacemiao
conflicting_files: null
created_at: 2023-08-25 09:18:12+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/b89aa474747ffe0152160b4abcd699a3.svg
      fullname: Qiiunan Liu
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: bigfacemiao
      type: user
    createdAt: '2023-08-25T10:18:12.000Z'
    data:
      edited: false
      editors:
      - bigfacemiao
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.48721006512641907
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/b89aa474747ffe0152160b4abcd699a3.svg
          fullname: Qiiunan Liu
          isHf: false
          isPro: false
          name: bigfacemiao
          type: user
        html: "<p>Download CodeLlama-7b-hf  model and test the results of the given\
          \ example as follows:</p>\n<p>sequences = pipeline(<br>    'import socket\\\
          n\\ndef ping_exponential_backoff(host: str):',<br>    do_sample=True,<br>\
          \    top_k=10,<br>    temperature=0.1,<br>    top_p=0.95,<br>    num_return_sequences=1,<br>\
          \    eos_token_id=tokenizer.eos_token_id,<br>    max_length=2000,<br>)</p>\n\
          <p>But the outputs of the model can not stop.</p>\n<p>import socket</p>\n\
          <p>def ping_exponential_backoff(host: str):<br>    \"\"\"<br>    Ping a\
          \ host with exponential backoff.<br>    :param host: The host to ping.<br>\
          \    :return: True if the host is reachable, False otherwise.<br>    \"\"\
          \"<br>    # Setup the parameters for the exponential backoff algorithm.<br>\
          \    max_attempts = 10<br>    initial_delay = 1<br>    delay_multiplier\
          \ = 2</p>\n<pre><code># Try to connect to the host.\nfor attempt in range(max_attempts):\n\
          \    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\
          \        s.settimeout(5)\n        s.connect((host, 80))\n        return\
          \ True\n    except Exception as e:\n        print(\"Attempt {}: {}\".format(attempt\
          \ + 1, e))\n        time.sleep(initial_delay * (delay_multiplier ** attempt))\n\
          \nreturn False\n</code></pre>\n<p>if <strong>name</strong> == \"<strong>main</strong>\"\
          :<br>    host = sys.argv[1]<br>    if ping_exponential_backoff(host):<br>\
          \        print(\"Host {} is up.\".format(host))<br>    else:<br>       \
          \ print(\"Host {} is down.\".format(host))</p>\n<h3 id=\"342-\u5F02\u6B65\
          \u7684\u91CD\u8BD5\u673A\u5236\">3.4.2. \u5F02\u6B65\u7684\u91CD\u8BD5\u673A\
          \u5236</h3>\n<p>\u5728\u4E0A\u4E00\u8282\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\
          \u4E86\u4E00\u4E2A\u7B80\u5355\u7684\u7B97\u6CD5\u6765\u5B9E\u73B0\u91CD\
          \u8BD5\u3002\u8FD9\u79CD\u65B9\u5F0F\u662F\u975E\u5E38\u6709\u6548\u7684\
          \uFF0C\u4F46\u662F\u5982\u679C\u4F60\u60F3\u8981\u66F4\u591A\u7684\u63A7\
          \u5236\uFF0C\u90A3\u4E48\u4F60\u53EF\u4EE5\u4F7F\u7528\u5F02\u6B65\u7684\
          \u91CD\u8BD5\u673A\u5236\u3002</p>\n<pre><code class=\"language-python\"\
          ><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\"\
          >from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"\
          hljs-type\">Optional</span>\n\n<span class=\"hljs-keyword\">async</span>\
          \ <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\"\
          >retry</span>(<span class=\"hljs-params\">func, *args, **kwargs</span>):\n\
          \    <span class=\"hljs-string\">\"\"\"</span>\n<span class=\"hljs-string\"\
          >    Retry an asynchronous function until it succeeds.</span>\n<span class=\"\
          hljs-string\">    :param func: The function to call.</span>\n<span class=\"\
          hljs-string\">    :param args: The positional arguments to pass to the function.</span>\n\
          <span class=\"hljs-string\">    :param kwargs: The keyword arguments to\
          \ pass to the function.</span>\n<span class=\"hljs-string\">    :return:\
          \ The result of the function.</span>\n<span class=\"hljs-string\">    \"\
          \"\"</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"\
          hljs-literal\">True</span>:\n        <span class=\"hljs-keyword\">try</span>:\n\
          \            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\"\
          >await</span> func(*args, **kwargs)\n        <span class=\"hljs-keyword\"\
          >except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n   \
          \         <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\"\
          >\"Exception: {}\"</span>.<span class=\"hljs-built_in\">format</span>(e))\n\
          \n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\"\
          >def</span> <span class=\"hljs-title function_\">main</span>():\n    <span\
          \ class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span>\
          \ <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-params\"\
          >url</span>):\n        <span class=\"hljs-string\">\"\"\"</span>\n<span\
          \ class=\"hljs-string\">        Fetch a URL.</span>\n<span class=\"hljs-string\"\
          >        :param url: The URL to fetch.</span>\n<span class=\"hljs-string\"\
          >        :return: The response from the server.</span>\n<span class=\"hljs-string\"\
          >        \"\"\"</span>\n        <span class=\"hljs-keyword\">async</span>\
          \ <span class=\"hljs-keyword\">with</span> aiohttp.ClientSession() <span\
          \ class=\"hljs-keyword\">as</span> session:\n            <span class=\"\
          hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> session.get(url)\
          \ <span class=\"hljs-keyword\">as</span> response:\n                <span\
          \ class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span>\
          \ response.text()\n\n    text = <span class=\"hljs-keyword\">await</span>\
          \ retry(fetch, <span class=\"hljs-string\">'https://www.google.com'</span>)\n\
          \    <span class=\"hljs-built_in\">print</span>(text)\n\nasyncio.run(main())\n\
          </code></pre>\n<h3 id=\"343-\u968F\u673A\u7684\u91CD\u8BD5\u673A\u5236\"\
          >3.4.3. \u968F\u673A\u7684\u91CD\u8BD5\u673A\u5236</h3>\n<p>\u5728\u4E0A\
          \u4E00\u8282\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u7B80\
          \u5355\u7684\u7B97\u6CD5\u6765\u5B9E\u73B0\u91CD\u8BD5\u3002\u8FD9\u79CD\
          \u65B9\u5F0F\u662F\u975E\u5E38\u6709\u6548\u7684\uFF0C\u4F46\u662F\u5982\
          \u679C\u4F60\u60F3\u8981\u66F4\u591A\u7684\u63A7\u5236\uFF0C\u90A3\u4E48\
          \u4F60\u53EF\u4EE5\u4F7F\u7528\u968F\u673A\u7684\u91CD\u8BD5\u673A\u5236\
          \u3002</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\"\
          >import</span> random\n<span class=\"hljs-keyword\">import</span> time\n\
          \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\"\
          >retry</span>(<span class=\"hljs-params\">func, *args, **kwargs</span>):\n\
          \    <span class=\"hljs-string\">\"\"\"</span>\n<span class=\"hljs-string\"\
          >    Retry a synchronous function until it succeeds.</span>\n<span class=\"\
          hljs-string\">    :param func: The function to call.</span>\n<span class=\"\
          hljs-string\">    :param args: The positional arguments to pass to the function.</span>\n\
          <span class=\"hljs-string\">    :param kwargs: The keyword arguments to\
          \ pass to the function.</span>\n<span class=\"hljs-string\">    :return:\
          \ The result of the function.</span>\n<span class=\"hljs-string\">    \"\
          \"\"</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"\
          hljs-literal\">True</span>:\n        <span class=\"hljs-keyword\">try</span>:\n\
          \            <span class=\"hljs-keyword\">return</span> func(*args, **kwargs)\n\
          \        <span class=\"hljs-keyword\">except</span> Exception <span class=\"\
          hljs-keyword\">as</span> e:\n            <span class=\"hljs-built_in\">print</span>(<span\
          \ class=\"hljs-string\">\"Exception: {}\"</span>.<span class=\"hljs-built_in\"\
          >format</span>(e))\n            time.sleep(random.uniform(<span class=\"\
          hljs-number\">0</span>, <span class=\"hljs-number\">1</span>))\n\n<span\
          \ class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\"\
          >\"__main__\"</span>:\n    <span class=\"hljs-keyword\">def</span> <span\
          \ class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-params\"\
          >url</span>):\n        <span class=\"hljs-string\">\"\"\"</span>\n<span\
          \ class=\"hljs-string\">        Fetch a URL.</span>\n<span class=\"hljs-string\"\
          >        :param url: The URL to fetch.</span>\n<span class=\"hljs-string\"\
          >        :return: The response from the server.</span>\n<span class=\"hljs-string\"\
          >        \"\"\"</span>\n        <span class=\"hljs-keyword\">with</span>\
          \ urllib.request.urlopen(url) <span class=\"hljs-keyword\">as</span> response:\n\
          \            <span class=\"hljs-keyword\">return</span> response.read().decode(<span\
          \ class=\"hljs-string\">'utf-8'</span>)\n\n    text = retry(fetch, <span\
          \ class=\"hljs-string\">'https://www.google.com'</span>)\n    <span class=\"\
          hljs-built_in\">print</span>(text)\n</code></pre>\n"
        raw: "Download CodeLlama-7b-hf  model and test the results of the given example\
          \ as follows:\r\n\r\nsequences = pipeline(\r\n    'import socket\\n\\ndef\
          \ ping_exponential_backoff(host: str):',\r\n    do_sample=True,\r\n    top_k=10,\r\
          \n    temperature=0.1,\r\n    top_p=0.95,\r\n    num_return_sequences=1,\r\
          \n    eos_token_id=tokenizer.eos_token_id,\r\n    max_length=2000,\r\n)\r\
          \n\r\nBut the outputs of the model can not stop.\r\n\r\n\r\nimport socket\r\
          \n\r\ndef ping_exponential_backoff(host: str):\r\n    \"\"\"\r\n    Ping\
          \ a host with exponential backoff.\r\n    :param host: The host to ping.\r\
          \n    :return: True if the host is reachable, False otherwise.\r\n    \"\
          \"\"\r\n    # Setup the parameters for the exponential backoff algorithm.\r\
          \n    max_attempts = 10\r\n    initial_delay = 1\r\n    delay_multiplier\
          \ = 2\r\n\r\n    # Try to connect to the host.\r\n    for attempt in range(max_attempts):\r\
          \n        try:\r\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\
          \n            s.settimeout(5)\r\n            s.connect((host, 80))\r\n \
          \           return True\r\n        except Exception as e:\r\n          \
          \  print(\"Attempt {}: {}\".format(attempt + 1, e))\r\n            time.sleep(initial_delay\
          \ * (delay_multiplier ** attempt))\r\n\r\n    return False\r\n\r\nif __name__\
          \ == \"__main__\":\r\n    host = sys.argv[1]\r\n    if ping_exponential_backoff(host):\r\
          \n        print(\"Host {} is up.\".format(host))\r\n    else:\r\n      \
          \  print(\"Host {} is down.\".format(host))\r\n\r\n### 3.4.2. \u5F02\u6B65\
          \u7684\u91CD\u8BD5\u673A\u5236\r\n\r\n\u5728\u4E0A\u4E00\u8282\u4E2D\uFF0C\
          \u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u7B80\u5355\u7684\u7B97\u6CD5\
          \u6765\u5B9E\u73B0\u91CD\u8BD5\u3002\u8FD9\u79CD\u65B9\u5F0F\u662F\u975E\
          \u5E38\u6709\u6548\u7684\uFF0C\u4F46\u662F\u5982\u679C\u4F60\u60F3\u8981\
          \u66F4\u591A\u7684\u63A7\u5236\uFF0C\u90A3\u4E48\u4F60\u53EF\u4EE5\u4F7F\
          \u7528\u5F02\u6B65\u7684\u91CD\u8BD5\u673A\u5236\u3002\r\n\r\n```python\r\
          \nimport asyncio\r\nfrom typing import Optional\r\n\r\nasync def retry(func,\
          \ *args, **kwargs):\r\n    \"\"\"\r\n    Retry an asynchronous function\
          \ until it succeeds.\r\n    :param func: The function to call.\r\n    :param\
          \ args: The positional arguments to pass to the function.\r\n    :param\
          \ kwargs: The keyword arguments to pass to the function.\r\n    :return:\
          \ The result of the function.\r\n    \"\"\"\r\n    while True:\r\n     \
          \   try:\r\n            return await func(*args, **kwargs)\r\n        except\
          \ Exception as e:\r\n            print(\"Exception: {}\".format(e))\r\n\r\
          \nasync def main():\r\n    async def fetch(url):\r\n        \"\"\"\r\n \
          \       Fetch a URL.\r\n        :param url: The URL to fetch.\r\n      \
          \  :return: The response from the server.\r\n        \"\"\"\r\n        async\
          \ with aiohttp.ClientSession() as session:\r\n            async with session.get(url)\
          \ as response:\r\n                return await response.text()\r\n\r\n \
          \   text = await retry(fetch, 'https://www.google.com')\r\n    print(text)\r\
          \n\r\nasyncio.run(main())\r\n```\r\n\r\n### 3.4.3. \u968F\u673A\u7684\u91CD\
          \u8BD5\u673A\u5236\r\n\r\n\u5728\u4E0A\u4E00\u8282\u4E2D\uFF0C\u6211\u4EEC\
          \u4F7F\u7528\u4E86\u4E00\u4E2A\u7B80\u5355\u7684\u7B97\u6CD5\u6765\u5B9E\
          \u73B0\u91CD\u8BD5\u3002\u8FD9\u79CD\u65B9\u5F0F\u662F\u975E\u5E38\u6709\
          \u6548\u7684\uFF0C\u4F46\u662F\u5982\u679C\u4F60\u60F3\u8981\u66F4\u591A\
          \u7684\u63A7\u5236\uFF0C\u90A3\u4E48\u4F60\u53EF\u4EE5\u4F7F\u7528\u968F\
          \u673A\u7684\u91CD\u8BD5\u673A\u5236\u3002\r\n\r\n```python\r\nimport random\r\
          \nimport time\r\n\r\ndef retry(func, *args, **kwargs):\r\n    \"\"\"\r\n\
          \    Retry a synchronous function until it succeeds.\r\n    :param func:\
          \ The function to call.\r\n    :param args: The positional arguments to\
          \ pass to the function.\r\n    :param kwargs: The keyword arguments to pass\
          \ to the function.\r\n    :return: The result of the function.\r\n    \"\
          \"\"\r\n    while True:\r\n        try:\r\n            return func(*args,\
          \ **kwargs)\r\n        except Exception as e:\r\n            print(\"Exception:\
          \ {}\".format(e))\r\n            time.sleep(random.uniform(0, 1))\r\n\r\n\
          if __name__ == \"__main__\":\r\n    def fetch(url):\r\n        \"\"\"\r\n\
          \        Fetch a URL.\r\n        :param url: The URL to fetch.\r\n     \
          \   :return: The response from the server.\r\n        \"\"\"\r\n       \
          \ with urllib.request.urlopen(url) as response:\r\n            return response.read().decode('utf-8')\r\
          \n\r\n    text = retry(fetch, 'https://www.google.com')\r\n    print(text)\r\
          \n```\r\n"
        updatedAt: '2023-08-25T10:18:12.289Z'
      numEdits: 0
      reactions: []
    id: 64e87fe4c5c7caadabfdf1b2
    type: comment
  author: bigfacemiao
  content: "Download CodeLlama-7b-hf  model and test the results of the given example\
    \ as follows:\r\n\r\nsequences = pipeline(\r\n    'import socket\\n\\ndef ping_exponential_backoff(host:\
    \ str):',\r\n    do_sample=True,\r\n    top_k=10,\r\n    temperature=0.1,\r\n\
    \    top_p=0.95,\r\n    num_return_sequences=1,\r\n    eos_token_id=tokenizer.eos_token_id,\r\
    \n    max_length=2000,\r\n)\r\n\r\nBut the outputs of the model can not stop.\r\
    \n\r\n\r\nimport socket\r\n\r\ndef ping_exponential_backoff(host: str):\r\n  \
    \  \"\"\"\r\n    Ping a host with exponential backoff.\r\n    :param host: The\
    \ host to ping.\r\n    :return: True if the host is reachable, False otherwise.\r\
    \n    \"\"\"\r\n    # Setup the parameters for the exponential backoff algorithm.\r\
    \n    max_attempts = 10\r\n    initial_delay = 1\r\n    delay_multiplier = 2\r\
    \n\r\n    # Try to connect to the host.\r\n    for attempt in range(max_attempts):\r\
    \n        try:\r\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\
    \n            s.settimeout(5)\r\n            s.connect((host, 80))\r\n       \
    \     return True\r\n        except Exception as e:\r\n            print(\"Attempt\
    \ {}: {}\".format(attempt + 1, e))\r\n            time.sleep(initial_delay * (delay_multiplier\
    \ ** attempt))\r\n\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n\
    \    host = sys.argv[1]\r\n    if ping_exponential_backoff(host):\r\n        print(\"\
    Host {} is up.\".format(host))\r\n    else:\r\n        print(\"Host {} is down.\"\
    .format(host))\r\n\r\n### 3.4.2. \u5F02\u6B65\u7684\u91CD\u8BD5\u673A\u5236\r\n\
    \r\n\u5728\u4E0A\u4E00\u8282\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\
    \u7B80\u5355\u7684\u7B97\u6CD5\u6765\u5B9E\u73B0\u91CD\u8BD5\u3002\u8FD9\u79CD\
    \u65B9\u5F0F\u662F\u975E\u5E38\u6709\u6548\u7684\uFF0C\u4F46\u662F\u5982\u679C\
    \u4F60\u60F3\u8981\u66F4\u591A\u7684\u63A7\u5236\uFF0C\u90A3\u4E48\u4F60\u53EF\
    \u4EE5\u4F7F\u7528\u5F02\u6B65\u7684\u91CD\u8BD5\u673A\u5236\u3002\r\n\r\n```python\r\
    \nimport asyncio\r\nfrom typing import Optional\r\n\r\nasync def retry(func, *args,\
    \ **kwargs):\r\n    \"\"\"\r\n    Retry an asynchronous function until it succeeds.\r\
    \n    :param func: The function to call.\r\n    :param args: The positional arguments\
    \ to pass to the function.\r\n    :param kwargs: The keyword arguments to pass\
    \ to the function.\r\n    :return: The result of the function.\r\n    \"\"\"\r\
    \n    while True:\r\n        try:\r\n            return await func(*args, **kwargs)\r\
    \n        except Exception as e:\r\n            print(\"Exception: {}\".format(e))\r\
    \n\r\nasync def main():\r\n    async def fetch(url):\r\n        \"\"\"\r\n   \
    \     Fetch a URL.\r\n        :param url: The URL to fetch.\r\n        :return:\
    \ The response from the server.\r\n        \"\"\"\r\n        async with aiohttp.ClientSession()\
    \ as session:\r\n            async with session.get(url) as response:\r\n    \
    \            return await response.text()\r\n\r\n    text = await retry(fetch,\
    \ 'https://www.google.com')\r\n    print(text)\r\n\r\nasyncio.run(main())\r\n\
    ```\r\n\r\n### 3.4.3. \u968F\u673A\u7684\u91CD\u8BD5\u673A\u5236\r\n\r\n\u5728\
    \u4E0A\u4E00\u8282\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u7B80\
    \u5355\u7684\u7B97\u6CD5\u6765\u5B9E\u73B0\u91CD\u8BD5\u3002\u8FD9\u79CD\u65B9\
    \u5F0F\u662F\u975E\u5E38\u6709\u6548\u7684\uFF0C\u4F46\u662F\u5982\u679C\u4F60\
    \u60F3\u8981\u66F4\u591A\u7684\u63A7\u5236\uFF0C\u90A3\u4E48\u4F60\u53EF\u4EE5\
    \u4F7F\u7528\u968F\u673A\u7684\u91CD\u8BD5\u673A\u5236\u3002\r\n\r\n```python\r\
    \nimport random\r\nimport time\r\n\r\ndef retry(func, *args, **kwargs):\r\n  \
    \  \"\"\"\r\n    Retry a synchronous function until it succeeds.\r\n    :param\
    \ func: The function to call.\r\n    :param args: The positional arguments to\
    \ pass to the function.\r\n    :param kwargs: The keyword arguments to pass to\
    \ the function.\r\n    :return: The result of the function.\r\n    \"\"\"\r\n\
    \    while True:\r\n        try:\r\n            return func(*args, **kwargs)\r\
    \n        except Exception as e:\r\n            print(\"Exception: {}\".format(e))\r\
    \n            time.sleep(random.uniform(0, 1))\r\n\r\nif __name__ == \"__main__\"\
    :\r\n    def fetch(url):\r\n        \"\"\"\r\n        Fetch a URL.\r\n       \
    \ :param url: The URL to fetch.\r\n        :return: The response from the server.\r\
    \n        \"\"\"\r\n        with urllib.request.urlopen(url) as response:\r\n\
    \            return response.read().decode('utf-8')\r\n\r\n    text = retry(fetch,\
    \ 'https://www.google.com')\r\n    print(text)\r\n```\r\n"
  created_at: 2023-08-25 09:18:12+00:00
  edited: false
  hidden: false
  id: 64e87fe4c5c7caadabfdf1b2
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 6
repo_id: codellama/CodeLlama-7b-hf
repo_type: model
status: open
target_branch: null
title: outputs not stop
