!!python/object:huggingface_hub.community.DiscussionWithDetails
author: pfeaster
conflicting_files: null
created_at: 2023-12-19 15:43:22+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/e2a3f58f3b8bbf1bb65adc1740e5dddd.svg
      fullname: Patrick Feaster
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: pfeaster
      type: user
    createdAt: '2023-12-19T15:43:22.000Z'
    data:
      edited: false
      editors:
      - pfeaster
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7609009742736816
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/e2a3f58f3b8bbf1bb65adc1740e5dddd.svg
          fullname: Patrick Feaster
          isHf: false
          isPro: false
          name: pfeaster
          type: user
        html: '<p>I''m trying to break up SDXL prompt generation into smaller steps
          for experimentation, and I''m running into a problem with generating the
          pooled prompt embedding.</p>

          <p>Here''s where  things seem to go wrong (final_raw_embedding consists
          of the looked-up 1280-value tensors for each of the 77 tokens plus the position
          embeddings):</p>

          <p>text_encoder_2=CLIPTextModelWithProjection.from_pretrained("stabilityai/stable-diffusion-xl-base-1.0",subfolder="text_encoder_2")<br>encoder_outputs
          = text_encoder_2.text_model.encoder(<br>            inputs_embeds=final_raw_embedding,<br>            attention_mask=None,<br>            causal_attention_mask=causal_attention_mask.to(torch_device),<br>            output_attentions=None,<br>            output_hidden_states=True,<br>            return_dict=None,<br>        )</p>

          <p>At this point, encoder_outputs.hidden_states[-2] gives me the correct
          second piece of the concatenated "regular" embedding.  Based on my reading
          of the SDXL pipeline script, I''d have thought encoder_outputs[0] would
          then give me the correct pooled embedding.</p>

          <p>But it doesn''t.  The usual output of text_encoder_2 (when it''s fed
          a text prompt directly) looks like this, with encoder_outputs[0] being a
          tensor of shape (1,1280):</p>

          <p>CLIPTextModelOutput(text_embeds=tensor([[-0.1136,  0.5139, -1.2741,  ...,
          -0.8194, -0.5301,  0.8064]],<br>       grad_fn=).....</p>

          <p>But instead I''m getting this, with encoder_outputs[0] having the wrong
          values and shape (1,77,1280):</p>

          <p>BaseModelOutput(last_hidden_state=tensor([[[ 0.1234, -0.5610,  0.3213,  ...,  0.2541,  0.3055,
          -0.1040],<br>         [-0.3271, -0.2220,  0.7678,  ...,  0.3586, -0.0037,  0.0753].....</p>

          <p>Can anyone point out what I''m doing wrong, or suggest how I could go
          about generating a correct pooled embedding from my final_raw_embedding?</p>

          '
        raw: "I'm trying to break up SDXL prompt generation into smaller steps for\
          \ experimentation, and I'm running into a problem with generating the pooled\
          \ prompt embedding.\r\n\r\nHere's where  things seem to go wrong (final_raw_embedding\
          \ consists of the looked-up 1280-value tensors for each of the 77 tokens\
          \ plus the position embeddings):\r\n\r\ntext_encoder_2=CLIPTextModelWithProjection.from_pretrained(\"\
          stabilityai/stable-diffusion-xl-base-1.0\",subfolder=\"text_encoder_2\"\
          )\r\nencoder_outputs = text_encoder_2.text_model.encoder(\r\n          \
          \  inputs_embeds=final_raw_embedding,\r\n            attention_mask=None,\r\
          \n            causal_attention_mask=causal_attention_mask.to(torch_device),\r\
          \n            output_attentions=None,\r\n            output_hidden_states=True,\r\
          \n            return_dict=None,\r\n        )\r\n\r\nAt this point, encoder_outputs.hidden_states[-2]\
          \ gives me the correct second piece of the concatenated \"regular\" embedding.\
          \  Based on my reading of the SDXL pipeline script, I'd have thought encoder_outputs[0]\
          \ would then give me the correct pooled embedding.\r\n\r\nBut it doesn't.\
          \  The usual output of text_encoder_2 (when it's fed a text prompt directly)\
          \ looks like this, with encoder_outputs[0] being a tensor of shape (1,1280):\r\
          \n\r\nCLIPTextModelOutput(text_embeds=tensor([[-0.1136,  0.5139, -1.2741,\
          \  ..., -0.8194, -0.5301,  0.8064]],\r\n       grad_fn=<MmBackward0>).....\r\
          \n\r\nBut instead I'm getting this, with encoder_outputs[0] having the wrong\
          \ values and shape (1,77,1280):\r\n\r\nBaseModelOutput(last_hidden_state=tensor([[[\
          \ 0.1234, -0.5610,  0.3213,  ...,  0.2541,  0.3055, -0.1040],\r\n      \
          \   [-0.3271, -0.2220,  0.7678,  ...,  0.3586, -0.0037,  0.0753].....\r\n\
          \r\nCan anyone point out what I'm doing wrong, or suggest how I could go\
          \ about generating a correct pooled embedding from my final_raw_embedding?"
        updatedAt: '2023-12-19T15:43:22.193Z'
      numEdits: 0
      reactions: []
    id: 6581ba1a6cee829b63c9c47d
    type: comment
  author: pfeaster
  content: "I'm trying to break up SDXL prompt generation into smaller steps for experimentation,\
    \ and I'm running into a problem with generating the pooled prompt embedding.\r\
    \n\r\nHere's where  things seem to go wrong (final_raw_embedding consists of the\
    \ looked-up 1280-value tensors for each of the 77 tokens plus the position embeddings):\r\
    \n\r\ntext_encoder_2=CLIPTextModelWithProjection.from_pretrained(\"stabilityai/stable-diffusion-xl-base-1.0\"\
    ,subfolder=\"text_encoder_2\")\r\nencoder_outputs = text_encoder_2.text_model.encoder(\r\
    \n            inputs_embeds=final_raw_embedding,\r\n            attention_mask=None,\r\
    \n            causal_attention_mask=causal_attention_mask.to(torch_device),\r\n\
    \            output_attentions=None,\r\n            output_hidden_states=True,\r\
    \n            return_dict=None,\r\n        )\r\n\r\nAt this point, encoder_outputs.hidden_states[-2]\
    \ gives me the correct second piece of the concatenated \"regular\" embedding.\
    \  Based on my reading of the SDXL pipeline script, I'd have thought encoder_outputs[0]\
    \ would then give me the correct pooled embedding.\r\n\r\nBut it doesn't.  The\
    \ usual output of text_encoder_2 (when it's fed a text prompt directly) looks\
    \ like this, with encoder_outputs[0] being a tensor of shape (1,1280):\r\n\r\n\
    CLIPTextModelOutput(text_embeds=tensor([[-0.1136,  0.5139, -1.2741,  ..., -0.8194,\
    \ -0.5301,  0.8064]],\r\n       grad_fn=<MmBackward0>).....\r\n\r\nBut instead\
    \ I'm getting this, with encoder_outputs[0] having the wrong values and shape\
    \ (1,77,1280):\r\n\r\nBaseModelOutput(last_hidden_state=tensor([[[ 0.1234, -0.5610,\
    \  0.3213,  ...,  0.2541,  0.3055, -0.1040],\r\n         [-0.3271, -0.2220,  0.7678,\
    \  ...,  0.3586, -0.0037,  0.0753].....\r\n\r\nCan anyone point out what I'm doing\
    \ wrong, or suggest how I could go about generating a correct pooled embedding\
    \ from my final_raw_embedding?"
  created_at: 2023-12-19 15:43:22+00:00
  edited: false
  hidden: false
  id: 6581ba1a6cee829b63c9c47d
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 132
repo_id: stabilityai/stable-diffusion-xl-base-1.0
repo_type: model
status: open
target_branch: null
title: Problem generating pooled prompt embedding
