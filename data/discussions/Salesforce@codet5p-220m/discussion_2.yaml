!!python/object:huggingface_hub.community.DiscussionWithDetails
author: Nadav-Timor
conflicting_files: null
created_at: 2023-06-26 01:21:34+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
      fullname: Nadav Timor
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nadav-Timor
      type: user
    createdAt: '2023-06-26T02:21:34.000Z'
    data:
      edited: true
      editors:
      - Nadav-Timor
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5950581431388855
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
          fullname: Nadav Timor
          isHf: false
          isPro: false
          name: Nadav-Timor
          type: user
        html: "<p>Would appreciate your guidance in reproducing the HumanEval scores\
          \ reported in the paper. Using <a rel=\"nofollow\" href=\"https://github.com/bigcode-project/bigcode-evaluation-harness\"\
          >BigCode's Eval Harness</a>, we got</p>\n<pre><code class=\"language-json\"\
          ><span class=\"hljs-attr\">\"humaneval\"</span><span class=\"hljs-punctuation\"\
          >:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"\
          hljs-attr\">\"pass@1\"</span><span class=\"hljs-punctuation\">:</span> <span\
          \ class=\"hljs-number\">5.000000000000004e-05</span><span class=\"hljs-punctuation\"\
          >,</span>\n    <span class=\"hljs-attr\">\"pass@10\"</span><span class=\"\
          hljs-punctuation\">:</span> <span class=\"hljs-number\">0.0005000000000000004</span><span\
          \ class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"\
          pass@100\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"\
          hljs-number\">0.005</span>\n  <span class=\"hljs-punctuation\">}</span>\
          \ \n</code></pre>\n<p>(params used: <code>--limit=100 --max_length_generation=256\
          \ --temperature=0.2 --n_samples=200 --batch_size=200</code>)</p>\n<p>Here\
          \ is an input from HumanEval followed by code generated by the model: (The\
          \ part of the generated code starts immediately after the end of the docstring.)</p>\n\
          <pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span>\
          \ typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\"\
          >List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"\
          hljs-title function_\">has_close_elements</span>(<span class=\"hljs-params\"\
          >numbers: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\"\
          >float</span>], threshold: <span class=\"hljs-built_in\">float</span></span>)\
          \ -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\"\
          >\"\"\" Check if in given list of numbers, are any two numbers closer to\
          \ each other than</span>\n<span class=\"hljs-string\">    given threshold.</span>\n\
          <span class=\"hljs-string\">    &gt;&gt;&gt; has_close_elements([1.0, 2.0,\
          \ 3.0], 0.5)</span>\n<span class=\"hljs-string\">    False</span>\n<span\
          \ class=\"hljs-string\">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0,\
          \ 4.0, 5.0, 2.0], 0.3)</span>\n<span class=\"hljs-string\">    True</span>\n\
          <span class=\"hljs-string\">    \"\"\"</span>r agreed to <span class=\"\
          hljs-keyword\">in</span> writing, software\n * distributed under the License\
          \ <span class=\"hljs-keyword\">is</span> distributed on an <span class=\"\
          hljs-string\">\"AS IS\"</span> BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS\
          \ OF ANY KIND, either express <span class=\"hljs-keyword\">or</span> implied.\n\
          \ * See the License <span class=\"hljs-keyword\">for</span> the specific\
          \ language governing permissions <span class=\"hljs-keyword\">and</span>\n\
          \ * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.<span\
          \ class=\"hljs-built_in\">map</span>;\n\n<span class=\"hljs-keyword\">import</span>\
          \ com.hazelcast.client.impl.protocol.ClientMessage;\n<span class=\"hljs-keyword\"\
          >import</span> com.hazelcast.client.impl.protocol.codec.MapMessageCodec;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.client.impl.protocol.task.AbstractMessageTask;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.client\n</code></pre>\n\
          <details>\n  <summary>Click here for additional examples:</summary>\n \n\
          <ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"language-python\"\
          ><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\"\
          >import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"\
          hljs-keyword\">def</span> <span class=\"hljs-title function_\">separate_paren_groups</span>(<span\
          \ class=\"hljs-params\">paren_string: <span class=\"hljs-built_in\">str</span></span>)\
          \ -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\"\
          >str</span>]:\n    <span class=\"hljs-string\">\"\"\" Input to this function\
          \ is a string containing multiple groups of nested parentheses. Your goal\
          \ is to</span>\n<span class=\"hljs-string\">    separate those group into\
          \ separate strings and return the list of those.</span>\n<span class=\"\
          hljs-string\">    Separate groups are balanced (each open brace is properly\
          \ closed) and not nested within each other</span>\n<span class=\"hljs-string\"\
          >    Ignore any spaces in the input string.</span>\n<span class=\"hljs-string\"\
          >    &gt;&gt;&gt; separate_paren_groups('( ) (( )) (( )( ))')</span>\n<span\
          \ class=\"hljs-string\">    ['()', '(())', '(()())']</span>\n<span class=\"\
          hljs-string\">    \"\"\"</span>express <span class=\"hljs-keyword\">or</span>\
          \ implied.\n * See the License <span class=\"hljs-keyword\">for</span> the\
          \ specific language governing permissions <span class=\"hljs-keyword\">and</span>\n\
          \ * limitations under the License.\n */\n\npackage com.hazelcast.internal.serialization;\n\
          \n<span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.SerializationService;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.SerializationServiceImpl;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.\n\
          </code></pre>\n<ol start=\"3\">\n<li></li>\n</ol>\n<pre><code class=\"language-python\"\
          ><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\"\
          >truncate_number</span>(<span class=\"hljs-params\">number: <span class=\"\
          hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\"\
          >float</span>:\n    <span class=\"hljs-string\">\"\"\" Given a positive\
          \ floating point number, it can be decomposed into</span>\n<span class=\"\
          hljs-string\">    and integer part (largest integer smaller than given number)\
          \ and decimals</span>\n<span class=\"hljs-string\">    (leftover part always\
          \ smaller than 1).</span>\n<span class=\"hljs-string\"></span>\n<span class=\"\
          hljs-string\">    Return the decimal part of the number.</span>\n<span class=\"\
          hljs-string\">    &gt;&gt;&gt; truncate_number(3.5)</span>\n<span class=\"\
          hljs-string\">    0.5</span>\n<span class=\"hljs-string\">    \"\"\"</span>iew;\n\
          <span class=\"hljs-keyword\">import</span> android.widget.Button;\n<span\
          \ class=\"hljs-keyword\">import</span> android.widget.EditText;\n<span class=\"\
          hljs-keyword\">import</span> android.widget.TextView;\n<span class=\"hljs-keyword\"\
          >import</span> android.widget.Toast;\n\n<span class=\"hljs-keyword\">import</span>\
          \ com.example.android.sunshine.R;\n<span class=\"hljs-keyword\">import</span>\
          \ com.example.android.sunshine.activity.MainActivity;\n<span class=\"hljs-keyword\"\
          >import</span> com.example.android.sunshine.activity.MainActivity.MainActivityListener;\n\
          <span class=\"hljs-keyword\">import</span> com.example.android.sunshine.activity.MainActivity.MainActivityListener.MainActivityListener;\n\
          <span class=\"hljs-keyword\">import</span> com.example.android.sunshine.activity.MainActivity.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.\n\
          </code></pre>\n<ol start=\"4\">\n<li></li>\n</ol>\n<pre><code class=\"language-python\"\
          ><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\"\
          >import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"\
          hljs-keyword\">def</span> <span class=\"hljs-title function_\">below_zero</span>(<span\
          \ class=\"hljs-params\">operations: <span class=\"hljs-type\">List</span>[<span\
          \ class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-built_in\"\
          >bool</span>:\n    <span class=\"hljs-string\">\"\"\" You're given a list\
          \ of deposit and withdrawal operations on a bank account that starts with</span>\n\
          <span class=\"hljs-string\">    zero balance. Your task is to detect if\
          \ at any point the balance of account fallls below zero, and</span>\n<span\
          \ class=\"hljs-string\">    at that point function should return True. Otherwise\
          \ it should return False.</span>\n<span class=\"hljs-string\">    &gt;&gt;&gt;\
          \ below_zero([1, 2, 3])</span>\n<span class=\"hljs-string\">    False</span>\n\
          <span class=\"hljs-string\">    &gt;&gt;&gt; below_zero([1, 2, -4, 5])</span>\n\
          <span class=\"hljs-string\">    True</span>\n<span class=\"hljs-string\"\
          >    \"\"\"</span>ndroid.sunshine.model.User.UserType;\n<span class=\"hljs-keyword\"\
          >import</span> com.example.android.sunshine.model.User.UserType.UserTypeType;\n\
          \npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\
          \ class_\">MainActivity</span> extends AppCompatActivity {\n\n<span class=\"\
          hljs-meta\">    <span data-props=\"{&quot;user&quot;:&quot;Override&quot;}\"\
          \ data-target=\"UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\"\
          >\n\n<span class=\"inline-block\"><span class=\"contents\"><a href=\"/Override\"\
          >@<span class=\"underline\">Override</span></a></span>\n\n\t</span></span></span>\n\
          \    protected void onCreate(Bundle savedInstanceState) {\n        <span\
          \ class=\"hljs-built_in\">super</span>.onCreate(savedInstanceState);\n \
          \       setContentView(R.layout.activity_main);\n\n        Button button\
          \ = (Button) findViewById(R.<span class=\"hljs-built_in\">id</span>.button);\n\
          \        button.setOnClickListener(new View.OnClickListener() {\n      \
          \     \n</code></pre>\n<ol start=\"5\">\n<li></li>\n</ol>\n<pre><code class=\"\
          language-python\"><span class=\"hljs-keyword\">from</span> typing <span\
          \ class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\
          \n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\"\
          >mean_absolute_deviation</span>(<span class=\"hljs-params\">numbers: <span\
          \ class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">float</span>]</span>)\
          \ -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"\
          hljs-string\">\"\"\" For a given list of input numbers, calculate Mean Absolute\
          \ Deviation</span>\n<span class=\"hljs-string\">    around the mean of this\
          \ dataset.</span>\n<span class=\"hljs-string\">    Mean Absolute Deviation\
          \ is the average absolute difference between each</span>\n<span class=\"\
          hljs-string\">    element and a centerpoint (mean in this case):</span>\n\
          <span class=\"hljs-string\">    MAD = average | x - x_mean |</span>\n<span\
          \ class=\"hljs-string\">    &gt;&gt;&gt; mean_absolute_deviation([1.0, 2.0,\
          \ 3.0, 4.0])</span>\n<span class=\"hljs-string\">    1.0</span>\n<span class=\"\
          hljs-string\">    \"\"\"</span>AS IS<span class=\"hljs-string\">\" BASIS,</span>\n\
          <span class=\"hljs-string\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\
          \ either express or implied.</span>\n<span class=\"hljs-string\"> * See\
          \ the License for the specific language governing permissions and</span>\n\
          <span class=\"hljs-string\"> * limitations under the License.</span>\n<span\
          \ class=\"hljs-string\"> */</span>\n<span class=\"hljs-string\"></span>\n\
          <span class=\"hljs-string\">package com.example.android.util;</span>\n<span\
          \ class=\"hljs-string\"></span>\n<span class=\"hljs-string\">import android.content.Context;</span>\n\
          <span class=\"hljs-string\">import android.graphics.Bitmap;</span>\n<span\
          \ class=\"hljs-string\">import android.graphics.BitmapFactory;</span>\n\
          <span class=\"hljs-string\">import android.graphics.Canvas;</span>\n<span\
          \ class=\"hljs-string\">import android.graphics.Color;</span>\n<span class=\"\
          hljs-string\">import android.graphics.Paint;</span>\n<span class=\"hljs-string\"\
          >import android.graphics.Rect;</span>\n<span class=\"hljs-string\">import\
          \ android.graphics.drawable.Drawable;</span>\n<span class=\"hljs-string\"\
          >import android.graphics.drawable.</span>\n</code></pre>\n<ol start=\"6\"\
          >\n<li></li>\n</ol>\n<pre><code class=\"language-python\"><span class=\"\
          hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span>\
          \ <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\"\
          >def</span> <span class=\"hljs-title function_\">intersperse</span>(<span\
          \ class=\"hljs-params\">numbers: <span class=\"hljs-type\">List</span>[<span\
          \ class=\"hljs-built_in\">int</span>], delimeter: <span class=\"hljs-built_in\"\
          >int</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"\
          hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">\"\"\" Insert\
          \ a number 'delimeter' between every two consecutive elements of input list\
          \ `numbers'</span>\n<span class=\"hljs-string\">    &gt;&gt;&gt; intersperse([],\
          \ 4)</span>\n<span class=\"hljs-string\">    []</span>\n<span class=\"hljs-string\"\
          >    &gt;&gt;&gt; intersperse([1, 2, 3], 4)</span>\n<span class=\"hljs-string\"\
          >    [1, 4, 2, 4, 3]</span>\n<span class=\"hljs-string\">    \"\"\"</span>icenses/LICENSE-<span\
          \ class=\"hljs-number\">2.0</span>\n *\n * Unless required by applicable\
          \ law <span class=\"hljs-keyword\">or</span> agreed to <span class=\"hljs-keyword\"\
          >in</span> writing, software\n * distributed under the License <span class=\"\
          hljs-keyword\">is</span> distributed on an <span class=\"hljs-string\">\"\
          AS IS\"</span> BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\
          \ either express <span class=\"hljs-keyword\">or</span> implied.\n * See\
          \ the License <span class=\"hljs-keyword\">for</span> the specific language\
          \ governing permissions <span class=\"hljs-keyword\">and</span>\n * limitations\
          \ under the License.\n */\n\npackage com.hazelcast.internal.serialization;\n\
          \n<span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.DefaultSerializationService;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.\n\
          </code></pre>\n<ol start=\"7\">\n<li></li>\n</ol>\n<pre><code class=\"language-python\"\
          ><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\"\
          >import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"\
          hljs-keyword\">def</span> <span class=\"hljs-title function_\">parse_nested_parens</span>(<span\
          \ class=\"hljs-params\">paren_string: <span class=\"hljs-built_in\">str</span></span>)\
          \ -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\"\
          >int</span>]:\n    <span class=\"hljs-string\">\"\"\" Input to this function\
          \ is a string represented multiple groups for nested parentheses separated\
          \ by spaces.</span>\n<span class=\"hljs-string\">    For each of the group,\
          \ output the deepest level of nesting of parentheses.</span>\n<span class=\"\
          hljs-string\">    E.g. (()()) has maximum two levels of nesting while ((()))\
          \ has three.</span>\n<span class=\"hljs-string\"></span>\n<span class=\"\
          hljs-string\">    &gt;&gt;&gt; parse_nested_parens('(()()) ((())) () ((())()())')</span>\n\
          <span class=\"hljs-string\">    [2, 3, 1, 3]</span>\n<span class=\"hljs-string\"\
          >    \"\"\"</span>AS IS<span class=\"hljs-string\">\" BASIS,</span>\n<span\
          \ class=\"hljs-string\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\
          \ either express or implied.</span>\n<span class=\"hljs-string\"> * See\
          \ the License for the specific language governing permissions and</span>\n\
          <span class=\"hljs-string\"> * limitations under the License.</span>\n<span\
          \ class=\"hljs-string\"> */</span>\n<span class=\"hljs-string\"></span>\n\
          <span class=\"hljs-string\">package com.hazelcast.internal.serialization;</span>\n\
          <span class=\"hljs-string\"></span>\n<span class=\"hljs-string\">import\
          \ com.hazelcast.internal.serialization.impl.DefaultSerializationService;</span>\n\
          <span class=\"hljs-string\">import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceFactory;</span>\n\
          <span class=\"hljs-string\">import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceFactoryBuilder;</span>\n\
          <span class=\"hljs-string\">import com.hazelcast.internal.serial</span>\n\
          </code></pre>\n<ol start=\"8\">\n<li></li>\n</ol>\n<pre><code class=\"language-python\"\
          ><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\"\
          >import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"\
          hljs-keyword\">def</span> <span class=\"hljs-title function_\">filter_by_substring</span>(<span\
          \ class=\"hljs-params\">strings: <span class=\"hljs-type\">List</span>[<span\
          \ class=\"hljs-built_in\">str</span>], substring: <span class=\"hljs-built_in\"\
          >str</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"\
          hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">\"\"\" Filter\
          \ an input list of strings only for ones that contain given substring</span>\n\
          <span class=\"hljs-string\">    &gt;&gt;&gt; filter_by_substring([], 'a')</span>\n\
          <span class=\"hljs-string\">    []</span>\n<span class=\"hljs-string\">\
          \    &gt;&gt;&gt; filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')</span>\n\
          <span class=\"hljs-string\">    ['abc', 'bacd', 'array']</span>\n<span class=\"\
          hljs-string\">    \"\"\"</span>y applicable law <span class=\"hljs-keyword\"\
          >or</span> agreed to <span class=\"hljs-keyword\">in</span> writing, software\n\
          \ * distributed under the License <span class=\"hljs-keyword\">is</span>\
          \ distributed on an <span class=\"hljs-string\">\"AS IS\"</span> BASIS,\n\
          \ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express <span class=\"\
          hljs-keyword\">or</span> implied.\n * See the License <span class=\"hljs-keyword\"\
          >for</span> the specific language governing permissions <span class=\"hljs-keyword\"\
          >and</span>\n * limitations under the License.\n */\n\npackage com.hazelcast.internal.partition;\n\
          \n<span class=\"hljs-keyword\">import</span> com.hazelcast.internal.partition.impl.PartitionServiceImpl;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.partition.impl.PartitionServicePartitionImpl;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.partition.impl.PartitionServicePartitionService;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.partition.impl.PartitionService\n\
          </code></pre>\n<p>Note that the results above are the first we got (no cherry-picking).</p>\n\
          </details>\n\n<p>Thanks!</p>\n"
        raw: "Would appreciate your guidance in reproducing the HumanEval scores reported\
          \ in the paper. Using [BigCode's Eval Harness](https://github.com/bigcode-project/bigcode-evaluation-harness),\
          \ we got\n```json\n\"humaneval\": {\n    \"pass@1\": 5.000000000000004e-05,\n\
          \    \"pass@10\": 0.0005000000000000004,\n    \"pass@100\": 0.005\n  } \n\
          ```\n(params used: `--limit=100 --max_length_generation=256 --temperature=0.2\
          \ --n_samples=200 --batch_size=200`)\n\nHere is an input from HumanEval\
          \ followed by code generated by the model: (The part of the generated code\
          \ starts immediately after the end of the docstring.)\n```python\nfrom typing\
          \ import List\n\n\ndef has_close_elements(numbers: List[float], threshold:\
          \ float) -> bool:\n    \"\"\" Check if in given list of numbers, are any\
          \ two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0,\
          \ 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0,\
          \ 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"r agreed to in writing, software\n\
          \ * distributed under the License is distributed on an \"AS IS\" BASIS,\n\
          \ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\
          \ * See the License for the specific language governing permissions and\n\
          \ * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\
          \nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapMessageCodec;\n\
          import com.hazelcast.client.impl.protocol.task.AbstractMessageTask;\nimport\
          \ com.hazelcast.client\n```\n\n<details>\n  <summary>Click here for additional\
          \ examples:</summary>\n \n2.\n```python\nfrom typing import List\n\n\ndef\
          \ separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input\
          \ to this function is a string containing multiple groups of nested parentheses.\
          \ Your goal is to\n    separate those group into separate strings and return\
          \ the list of those.\n    Separate groups are balanced (each open brace\
          \ is properly closed) and not nested within each other\n    Ignore any spaces\
          \ in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
          \    ['()', '(())', '(()())']\n    \"\"\"express or implied.\n * See the\
          \ License for the specific language governing permissions and\n * limitations\
          \ under the License.\n */\n\npackage com.hazelcast.internal.serialization;\n\
          \nimport com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n\
          import com.hazelcast.internal.serialization.impl.SerializationService;\n\
          import com.hazelcast.internal.serialization.impl.SerializationServiceImpl;\n\
          import com.hazelcast.internal.serialization.impl.\n```\n\n3.\n```python\n\
          def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
          \ floating point number, it can be decomposed into\n    and integer part\
          \ (largest integer smaller than given number) and decimals\n    (leftover\
          \ part always smaller than 1).\n\n    Return the decimal part of the number.\n\
          \    >>> truncate_number(3.5)\n    0.5\n    \"\"\"iew;\nimport android.widget.Button;\n\
          import android.widget.EditText;\nimport android.widget.TextView;\nimport\
          \ android.widget.Toast;\n\nimport com.example.android.sunshine.R;\nimport\
          \ com.example.android.sunshine.activity.MainActivity;\nimport com.example.android.sunshine.activity.MainActivity.MainActivityListener;\n\
          import com.example.android.sunshine.activity.MainActivity.MainActivityListener.MainActivityListener;\n\
          import com.example.android.sunshine.activity.MainActivity.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.\n\
          ```\n\n4.\n```python\nfrom typing import List\n\n\ndef below_zero(operations:\
          \ List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal\
          \ operations on a bank account that starts with\n    zero balance. Your\
          \ task is to detect if at any point the balance of account fallls below\
          \ zero, and\n    at that point function should return True. Otherwise it\
          \ should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>>\
          \ below_zero([1, 2, -4, 5])\n    True\n    \"\"\"ndroid.sunshine.model.User.UserType;\n\
          import com.example.android.sunshine.model.User.UserType.UserTypeType;\n\n\
          public class MainActivity extends AppCompatActivity {\n\n    @Override\n\
          \    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\
          \        setContentView(R.layout.activity_main);\n\n        Button button\
          \ = (Button) findViewById(R.id.button);\n        button.setOnClickListener(new\
          \ View.OnClickListener() {\n           \n```\n\n5.\n```python\nfrom typing\
          \ import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) ->\
          \ float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
          \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
          \ is the average absolute difference between each\n    element and a centerpoint\
          \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
          \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"AS IS\" BASIS,\n * WITHOUT WARRANTIES\
          \ OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License\
          \ for the specific language governing permissions and\n * limitations under\
          \ the License.\n */\n\npackage com.example.android.util;\n\nimport android.content.Context;\n\
          import android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\n\
          import android.graphics.Canvas;\nimport android.graphics.Color;\nimport\
          \ android.graphics.Paint;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\n\
          import android.graphics.drawable.\n```\n\n6.\n```python\nfrom typing import\
          \ List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\
          \    \"\"\" Insert a number 'delimeter' between every two consecutive elements\
          \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
          \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"icenses/LICENSE-2.0\n *\n *\
          \ Unless required by applicable law or agreed to in writing, software\n\
          \ * distributed under the License is distributed on an \"AS IS\" BASIS,\n\
          \ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\
          \ * See the License for the specific language governing permissions and\n\
          \ * limitations under the License.\n */\n\npackage com.hazelcast.internal.serialization;\n\
          \nimport com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n\
          import com.hazelcast.internal.serialization.impl.DefaultSerializationService;\n\
          import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder;\n\
          import com.hazelcast.internal.serialization.\n```\n\n7.\n```python\nfrom\
          \ typing import List\n\n\ndef parse_nested_parens(paren_string: str) ->\
          \ List[int]:\n    \"\"\" Input to this function is a string represented\
          \ multiple groups for nested parentheses separated by spaces.\n    For each\
          \ of the group, output the deepest level of nesting of parentheses.\n  \
          \  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\
          \n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3,\
          \ 1, 3]\n    \"\"\"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF\
          \ ANY KIND, either express or implied.\n * See the License for the specific\
          \ language governing permissions and\n * limitations under the License.\n\
          \ */\n\npackage com.hazelcast.internal.serialization;\n\nimport com.hazelcast.internal.serialization.impl.DefaultSerializationService;\n\
          import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceFactory;\n\
          import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceFactoryBuilder;\n\
          import com.hazelcast.internal.serial\n```\n\n8.\n```python\nfrom typing\
          \ import List\n\n\ndef filter_by_substring(strings: List[str], substring:\
          \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for\
          \ ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
          \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
          \    ['abc', 'bacd', 'array']\n    \"\"\"y applicable law or agreed to in\
          \ writing, software\n * distributed under the License is distributed on\
          \ an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\
          \ either express or implied.\n * See the License for the specific language\
          \ governing permissions and\n * limitations under the License.\n */\n\n\
          package com.hazelcast.internal.partition;\n\nimport com.hazelcast.internal.partition.impl.PartitionServiceImpl;\n\
          import com.hazelcast.internal.partition.impl.PartitionServicePartitionImpl;\n\
          import com.hazelcast.internal.partition.impl.PartitionServicePartitionService;\n\
          import com.hazelcast.internal.partition.impl.PartitionService\n```\n\nNote\
          \ that the results above are the first we got (no cherry-picking).\n</details>\n\
          \nThanks!"
        updatedAt: '2023-06-26T02:32:44.666Z'
      numEdits: 4
      reactions: []
    id: 6498f62e2ca6f96c8b8433bb
    type: comment
  author: Nadav-Timor
  content: "Would appreciate your guidance in reproducing the HumanEval scores reported\
    \ in the paper. Using [BigCode's Eval Harness](https://github.com/bigcode-project/bigcode-evaluation-harness),\
    \ we got\n```json\n\"humaneval\": {\n    \"pass@1\": 5.000000000000004e-05,\n\
    \    \"pass@10\": 0.0005000000000000004,\n    \"pass@100\": 0.005\n  } \n```\n\
    (params used: `--limit=100 --max_length_generation=256 --temperature=0.2 --n_samples=200\
    \ --batch_size=200`)\n\nHere is an input from HumanEval followed by code generated\
    \ by the model: (The part of the generated code starts immediately after the end\
    \ of the docstring.)\n```python\nfrom typing import List\n\n\ndef has_close_elements(numbers:\
    \ List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of\
    \ numbers, are any two numbers closer to each other than\n    given threshold.\n\
    \    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"r agreed to in writing,\
    \ software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\
    \ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\
    \ * See the License for the specific language governing permissions and\n * limitations\
    \ under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\
    \nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapMessageCodec;\n\
    import com.hazelcast.client.impl.protocol.task.AbstractMessageTask;\nimport com.hazelcast.client\n\
    ```\n\n<details>\n  <summary>Click here for additional examples:</summary>\n \n\
    2.\n```python\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string:\
    \ str) -> List[str]:\n    \"\"\" Input to this function is a string containing\
    \ multiple groups of nested parentheses. Your goal is to\n    separate those group\
    \ into separate strings and return the list of those.\n    Separate groups are\
    \ balanced (each open brace is properly closed) and not nested within each other\n\
    \    Ignore any spaces in the input string.\n    >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"express or implied.\n\
    \ * See the License for the specific language governing permissions and\n * limitations\
    \ under the License.\n */\n\npackage com.hazelcast.internal.serialization;\n\n\
    import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n\
    import com.hazelcast.internal.serialization.impl.SerializationService;\nimport\
    \ com.hazelcast.internal.serialization.impl.SerializationServiceImpl;\nimport\
    \ com.hazelcast.internal.serialization.impl.\n```\n\n3.\n```python\ndef truncate_number(number:\
    \ float) -> float:\n    \"\"\" Given a positive floating point number, it can\
    \ be decomposed into\n    and integer part (largest integer smaller than given\
    \ number) and decimals\n    (leftover part always smaller than 1).\n\n    Return\
    \ the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n   \
    \ \"\"\"iew;\nimport android.widget.Button;\nimport android.widget.EditText;\n\
    import android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.example.android.sunshine.R;\n\
    import com.example.android.sunshine.activity.MainActivity;\nimport com.example.android.sunshine.activity.MainActivity.MainActivityListener;\n\
    import com.example.android.sunshine.activity.MainActivity.MainActivityListener.MainActivityListener;\n\
    import com.example.android.sunshine.activity.MainActivity.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.MainActivityListener.\n\
    ```\n\n4.\n```python\nfrom typing import List\n\n\ndef below_zero(operations:\
    \ List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal\
    \ operations on a bank account that starts with\n    zero balance. Your task is\
    \ to detect if at any point the balance of account fallls below zero, and\n  \
    \  at that point function should return True. Otherwise it should return False.\n\
    \    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n\
    \    True\n    \"\"\"ndroid.sunshine.model.User.UserType;\nimport com.example.android.sunshine.model.User.UserType.UserTypeType;\n\
    \npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n   \
    \ protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\
    \        setContentView(R.layout.activity_main);\n\n        Button button = (Button)\
    \ findViewById(R.id.button);\n        button.setOnClickListener(new View.OnClickListener()\
    \ {\n           \n```\n\n5.\n```python\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers:\
    \ List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate\
    \ Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute\
    \ Deviation is the average absolute difference between each\n    element and a\
    \ centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>>\
    \ mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"AS IS\" BASIS,\n\
    \ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\
    \ * See the License for the specific language governing permissions and\n * limitations\
    \ under the License.\n */\n\npackage com.example.android.util;\n\nimport android.content.Context;\n\
    import android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport\
    \ android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\n\
    import android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport\
    \ android.graphics.drawable.\n```\n\n6.\n```python\nfrom typing import List\n\n\
    \ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\
    \ Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"icenses/LICENSE-2.0\n *\n * Unless\
    \ required by applicable law or agreed to in writing, software\n * distributed\
    \ under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES\
    \ OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for\
    \ the specific language governing permissions and\n * limitations under the License.\n\
    \ */\n\npackage com.hazelcast.internal.serialization;\n\nimport com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n\
    import com.hazelcast.internal.serialization.impl.DefaultSerializationService;\n\
    import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder;\n\
    import com.hazelcast.internal.serialization.\n```\n\n7.\n```python\nfrom typing\
    \ import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    For each of the group, output the\
    \ deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"AS IS\" BASIS,\n * WITHOUT WARRANTIES\
    \ OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for\
    \ the specific language governing permissions and\n * limitations under the License.\n\
    \ */\n\npackage com.hazelcast.internal.serialization;\n\nimport com.hazelcast.internal.serialization.impl.DefaultSerializationService;\n\
    import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceFactory;\n\
    import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceFactoryBuilder;\n\
    import com.hazelcast.internal.serial\n```\n\n8.\n```python\nfrom typing import\
    \ List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n\
    \    \"\"\" Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"y applicable\
    \ law or agreed to in writing, software\n * distributed under the License is distributed\
    \ on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\
    \ express or implied.\n * See the License for the specific language governing\
    \ permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.internal.partition;\n\
    \nimport com.hazelcast.internal.partition.impl.PartitionServiceImpl;\nimport com.hazelcast.internal.partition.impl.PartitionServicePartitionImpl;\n\
    import com.hazelcast.internal.partition.impl.PartitionServicePartitionService;\n\
    import com.hazelcast.internal.partition.impl.PartitionService\n```\n\nNote that\
    \ the results above are the first we got (no cherry-picking).\n</details>\n\n\
    Thanks!"
  created_at: 2023-06-26 01:21:34+00:00
  edited: true
  hidden: false
  id: 6498f62e2ca6f96c8b8433bb
  type: comment
- !!python/object:huggingface_hub.community.DiscussionTitleChange
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
      fullname: Nadav Timor
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nadav-Timor
      type: user
    createdAt: '2023-06-26T02:45:57.000Z'
    data:
      from: Issues to reproduce the HumanEval scores reported in the paper
      to: Challenges in Reproducing the HumanEval Scores Reported in the Paper
    id: 6498fbe50651355205f3005a
    type: title-change
  author: Nadav-Timor
  created_at: 2023-06-26 01:45:57+00:00
  id: 6498fbe50651355205f3005a
  new_title: Challenges in Reproducing the HumanEval Scores Reported in the Paper
  old_title: Issues to reproduce the HumanEval scores reported in the paper
  type: title-change
- !!python/object:huggingface_hub.community.DiscussionTitleChange
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
      fullname: Nadav Timor
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nadav-Timor
      type: user
    createdAt: '2023-06-26T02:46:15.000Z'
    data:
      from: Challenges in Reproducing the HumanEval Scores Reported in the Paper
      to: Challenges in reproducing the HumanEval scores reported in the paper
    id: 6498fbf7be8a821129165718
    type: title-change
  author: Nadav-Timor
  created_at: 2023-06-26 01:46:15+00:00
  id: 6498fbf7be8a821129165718
  new_title: Challenges in reproducing the HumanEval scores reported in the paper
  old_title: Challenges in Reproducing the HumanEval Scores Reported in the Paper
  type: title-change
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1632449169691-noauth.png?w=200&h=200&f=face
      fullname: Yue Wang
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: yuewang-sf
      type: user
    createdAt: '2023-06-26T03:31:17.000Z'
    data:
      edited: false
      editors:
      - yuewang-sf
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.8785419464111328
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1632449169691-noauth.png?w=200&h=200&f=face
          fullname: Yue Wang
          isHf: false
          isPro: false
          name: yuewang-sf
          type: user
        html: '<p>Hi there, please refer to our released scripts (see <a rel="nofollow"
          href="https://github.com/salesforce/CodeT5/tree/main/CodeT5%2B#humaneval">here</a>)
          to reproduce the HumanEval results.</p>

          '
        raw: Hi there, please refer to our released scripts (see [here](https://github.com/salesforce/CodeT5/tree/main/CodeT5%2B#humaneval))
          to reproduce the HumanEval results.
        updatedAt: '2023-06-26T03:31:17.054Z'
      numEdits: 0
      reactions: []
    id: 6499068589f0dcbecbbdad1c
    type: comment
  author: yuewang-sf
  content: Hi there, please refer to our released scripts (see [here](https://github.com/salesforce/CodeT5/tree/main/CodeT5%2B#humaneval))
    to reproduce the HumanEval results.
  created_at: 2023-06-26 02:31:17+00:00
  edited: false
  hidden: false
  id: 6499068589f0dcbecbbdad1c
  type: comment
- !!python/object:huggingface_hub.community.DiscussionTitleChange
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
      fullname: Nadav Timor
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nadav-Timor
      type: user
    createdAt: '2023-06-26T04:15:52.000Z'
    data:
      from: Challenges in reproducing the HumanEval scores reported in the paper
      to: Challenges in reproducing the HumanEval scores reported in the paper with
        BigCode Eval Harness
    id: 649910f8003ad4b5d62bdab6
    type: title-change
  author: Nadav-Timor
  created_at: 2023-06-26 03:15:52+00:00
  id: 649910f8003ad4b5d62bdab6
  new_title: Challenges in reproducing the HumanEval scores reported in the paper
    with BigCode Eval Harness
  old_title: Challenges in reproducing the HumanEval scores reported in the paper
  type: title-change
- !!python/object:huggingface_hub.community.DiscussionTitleChange
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
      fullname: Nadav Timor
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nadav-Timor
      type: user
    createdAt: '2023-06-26T04:16:02.000Z'
    data:
      from: Challenges in reproducing the HumanEval scores reported in the paper with
        BigCode Eval Harness
      to: Challenges in reproducing the HumanEval scores reported in the paper with
        BigCode's Eval Harness
    id: 649911023436cfb6bf6e1762
    type: title-change
  author: Nadav-Timor
  created_at: 2023-06-26 03:16:02+00:00
  id: 649911023436cfb6bf6e1762
  new_title: Challenges in reproducing the HumanEval scores reported in the paper
    with BigCode's Eval Harness
  old_title: Challenges in reproducing the HumanEval scores reported in the paper
    with BigCode Eval Harness
  type: title-change
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
      fullname: Nadav Timor
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nadav-Timor
      type: user
    createdAt: '2023-06-26T20:51:40.000Z'
    data:
      edited: true
      editors:
      - Nadav-Timor
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9437270164489746
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
          fullname: Nadav Timor
          isHf: false
          isPro: false
          name: Nadav-Timor
          type: user
        html: "<p>Hi <span data-props=\"{&quot;user&quot;:&quot;yuewang-sf&quot;}\"\
          \ data-target=\"UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\"\
          >\n\n<span class=\"inline-block\"><span class=\"contents\"><a href=\"/yuewang-sf\"\
          >@<span class=\"underline\">yuewang-sf</span></a></span>\n\n\t</span></span>,\
          \ thanks for the link.<br>Did you save the model's raw completions you compared\
          \ with OpenAI's ground truth?</p>\n"
        raw: "Hi @yuewang-sf, thanks for the link. \nDid you save the model's raw\
          \ completions you compared with OpenAI's ground truth?"
        updatedAt: '2023-06-26T21:27:26.061Z'
      numEdits: 2
      reactions: []
    id: 6499fa5c7fc3f692e39a9a50
    type: comment
  author: Nadav-Timor
  content: "Hi @yuewang-sf, thanks for the link. \nDid you save the model's raw completions\
    \ you compared with OpenAI's ground truth?"
  created_at: 2023-06-26 19:51:40+00:00
  edited: true
  hidden: false
  id: 6499fa5c7fc3f692e39a9a50
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
      fullname: Nadav Timor
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nadav-Timor
      type: user
    createdAt: '2023-06-26T22:04:41.000Z'
    data:
      edited: false
      editors:
      - Nadav-Timor
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.5734344124794006
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
          fullname: Nadav Timor
          isHf: false
          isPro: false
          name: Nadav-Timor
          type: user
        html: "<blockquote>\n<p>Would appreciate your guidance in reproducing the\
          \ HumanEval scores reported in the paper. Using <a rel=\"nofollow\" href=\"\
          https://github.com/bigcode-project/bigcode-evaluation-harness\">BigCode's\
          \ Eval Harness</a>, we got</p>\n<pre><code class=\"language-json\"><span\
          \ class=\"hljs-attr\">\"humaneval\"</span><span class=\"hljs-punctuation\"\
          >:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"\
          hljs-attr\">\"pass@1\"</span><span class=\"hljs-punctuation\">:</span> <span\
          \ class=\"hljs-number\">5.000000000000004e-05</span><span class=\"hljs-punctuation\"\
          >,</span>\n    <span class=\"hljs-attr\">\"pass@10\"</span><span class=\"\
          hljs-punctuation\">:</span> <span class=\"hljs-number\">0.0005000000000000004</span><span\
          \ class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"\
          pass@100\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"\
          hljs-number\">0.005</span>\n  <span class=\"hljs-punctuation\">}</span>\
          \ \n</code></pre>\n<p>(params used: <code>--limit=100 --max_length_generation=256\
          \ --temperature=0.2 --n_samples=200 --batch_size=200</code>)</p>\n</blockquote>\n\
          <p>Using the same codebase and execution params, <code>Salesforce/codegen-350M-mono</code>\
          \ received:</p>\n<pre><code class=\"language-json\"><span class=\"hljs-punctuation\"\
          >{</span>\n  <span class=\"hljs-attr\">\"humaneval\"</span><span class=\"\
          hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n\
          \    <span class=\"hljs-attr\">\"pass@1\"</span><span class=\"hljs-punctuation\"\
          >:</span> <span class=\"hljs-number\">0.21515</span><span class=\"hljs-punctuation\"\
          >,</span>\n    <span class=\"hljs-attr\">\"pass@10\"</span><span class=\"\
          hljs-punctuation\">:</span> <span class=\"hljs-number\">0.3201372339273634</span><span\
          \ class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"\
          pass@100\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"\
          hljs-number\">0.3812360762120558</span>\n  <span class=\"hljs-punctuation\"\
          >}</span>\n</code></pre>\n"
        raw: "> Would appreciate your guidance in reproducing the HumanEval scores\
          \ reported in the paper. Using [BigCode's Eval Harness](https://github.com/bigcode-project/bigcode-evaluation-harness),\
          \ we got\n> ```json\n> \"humaneval\": {\n>     \"pass@1\": 5.000000000000004e-05,\n\
          >     \"pass@10\": 0.0005000000000000004,\n>     \"pass@100\": 0.005\n>\
          \   } \n> ```\n> (params used: `--limit=100 --max_length_generation=256\
          \ --temperature=0.2 --n_samples=200 --batch_size=200`)\n\nUsing the same\
          \ codebase and execution params, `Salesforce/codegen-350M-mono` received:\n\
          ```json\n{\n  \"humaneval\": {\n    \"pass@1\": 0.21515,\n    \"pass@10\"\
          : 0.3201372339273634,\n    \"pass@100\": 0.3812360762120558\n  }\n```"
        updatedAt: '2023-06-26T22:04:41.582Z'
      numEdits: 0
      reactions: []
    id: 649a0b794aa9943f43e37040
    type: comment
  author: Nadav-Timor
  content: "> Would appreciate your guidance in reproducing the HumanEval scores reported\
    \ in the paper. Using [BigCode's Eval Harness](https://github.com/bigcode-project/bigcode-evaluation-harness),\
    \ we got\n> ```json\n> \"humaneval\": {\n>     \"pass@1\": 5.000000000000004e-05,\n\
    >     \"pass@10\": 0.0005000000000000004,\n>     \"pass@100\": 0.005\n>   } \n\
    > ```\n> (params used: `--limit=100 --max_length_generation=256 --temperature=0.2\
    \ --n_samples=200 --batch_size=200`)\n\nUsing the same codebase and execution\
    \ params, `Salesforce/codegen-350M-mono` received:\n```json\n{\n  \"humaneval\"\
    : {\n    \"pass@1\": 0.21515,\n    \"pass@10\": 0.3201372339273634,\n    \"pass@100\"\
    : 0.3812360762120558\n  }\n```"
  created_at: 2023-06-26 21:04:41+00:00
  edited: false
  hidden: false
  id: 649a0b794aa9943f43e37040
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1632449169691-noauth.png?w=200&h=200&f=face
      fullname: Yue Wang
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: yuewang-sf
      type: user
    createdAt: '2023-06-27T04:05:27.000Z'
    data:
      edited: false
      editors:
      - yuewang-sf
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9155594706535339
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1632449169691-noauth.png?w=200&h=200&f=face
          fullname: Yue Wang
          isHf: false
          isPro: false
          name: yuewang-sf
          type: user
        html: '<p>Hi Nadav, please refer to our response to this <a rel="nofollow"
          href="https://github.com/salesforce/CodeT5/issues/115">issue</a> at our
          CodeT5 repo. We do save the model''s raw completions and can release it
          soon.</p>

          '
        raw: Hi Nadav, please refer to our response to this [issue](https://github.com/salesforce/CodeT5/issues/115)
          at our CodeT5 repo. We do save the model's raw completions and can release
          it soon.
        updatedAt: '2023-06-27T04:05:27.727Z'
      numEdits: 0
      reactions: []
    id: 649a600708c3bee0db50e8be
    type: comment
  author: yuewang-sf
  content: Hi Nadav, please refer to our response to this [issue](https://github.com/salesforce/CodeT5/issues/115)
    at our CodeT5 repo. We do save the model's raw completions and can release it
    soon.
  created_at: 2023-06-27 03:05:27+00:00
  edited: false
  hidden: false
  id: 649a600708c3bee0db50e8be
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
      fullname: Nadav Timor
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nadav-Timor
      type: user
    createdAt: '2023-06-28T01:44:08.000Z'
    data:
      edited: true
      editors:
      - Nadav-Timor
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.6329227089881897
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
          fullname: Nadav Timor
          isHf: false
          isPro: false
          name: Nadav-Timor
          type: user
        html: "<p>Thanks <span data-props=\"{&quot;user&quot;:&quot;yuewang-sf&quot;}\"\
          \ data-target=\"UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\"\
          >\n\n<span class=\"inline-block\"><span class=\"contents\"><a href=\"/yuewang-sf\"\
          >@<span class=\"underline\">yuewang-sf</span></a></span>\n\n\t</span></span>!</p>\n\
          <p>Do you happen to know if Hugging Face's <a href=\"https://huggingface.co/docs/api-inference\"\
          >Inference API</a> is compatible with your method? In my try below, I got\
          \ the same result as I mentioned in my first message.</p>\n<pre><code class=\"\
          language-python\"><span class=\"hljs-keyword\">import</span> requests\n\n\
          API_URL = <span class=\"hljs-string\">\"https://api-inference.huggingface.co/models/Salesforce/codet5p-220m\"\
          </span>\nheaders = {<span class=\"hljs-string\">\"Authorization\"</span>:\
          \ <span class=\"hljs-string\">\"Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\
          </span>}\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\
          \ function_\">query</span>(<span class=\"hljs-params\">payload</span>):\n\
          \    response = requests.post(API_URL, headers=headers, json=payload)\n\
          \    <span class=\"hljs-keyword\">return</span> response.json()\n\nhumaneval_input_1\
          \ = <span class=\"hljs-string\">\"\"\"from typing import List</span>\n<span\
          \ class=\"hljs-string\"></span>\n<span class=\"hljs-string\"></span>\n<span\
          \ class=\"hljs-string\">def has_close_elements(numbers: List[float], threshold:\
          \ float) -&gt; bool:</span>\n<span class=\"hljs-string\">    \\\"\\\"\\\"\
          \ Check if in given list of numbers, are any two numbers closer to each\
          \ other than</span>\n<span class=\"hljs-string\">    given threshold.</span>\n\
          <span class=\"hljs-string\">    &gt;&gt;&gt; has_close_elements([1.0, 2.0,\
          \ 3.0], 0.5)</span>\n<span class=\"hljs-string\">    False</span>\n<span\
          \ class=\"hljs-string\">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0,\
          \ 4.0, 5.0, 2.0], 0.3)</span>\n<span class=\"hljs-string\">    True</span>\n\
          <span class=\"hljs-string\">    \\\"\\\"\\\"\"\"\"</span>\n    \noutput\
          \ = query({\n    <span class=\"hljs-string\">\"inputs\"</span>: humaneval_input_1,\n\
          \    <span class=\"hljs-string\">\"parameters\"</span>: {\n        <span\
          \ class=\"hljs-string\">\"temperature\"</span>: <span class=\"hljs-number\"\
          >0.2</span>,\n        <span class=\"hljs-string\">\"max_length\"</span>:\
          \ <span class=\"hljs-number\">256</span>,\n    },\n    <span class=\"hljs-string\"\
          >\"options\"</span>: {\n        <span class=\"hljs-string\">\"wait_for_model\"\
          </span>: <span class=\"hljs-literal\">True</span>\n    }\n})\n</code></pre>\n\
          <p>Then, <code>print(output[0][\"generated_text\"])</code> prints</p>\n\
          <pre><code class=\"language-python\">/*\n * Copyright (c) <span class=\"\
          hljs-number\">2008</span>-<span class=\"hljs-number\">2021</span>, Hazelcast,\
          \ Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version\
          \ <span class=\"hljs-number\">2.0</span> (the <span class=\"hljs-string\"\
          >\"License\"</span>);\n * you may <span class=\"hljs-keyword\">not</span>\
          \ use this file <span class=\"hljs-keyword\">except</span> <span class=\"\
          hljs-keyword\">in</span> compliance <span class=\"hljs-keyword\">with</span>\
          \ the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-<span\
          \ class=\"hljs-number\">2.0</span>\n *\n * Unless required by applicable\
          \ law <span class=\"hljs-keyword\">or</span> agreed to <span class=\"hljs-keyword\"\
          >in</span> writing, software\n * distributed under the License <span class=\"\
          hljs-keyword\">is</span> distributed on an <span class=\"hljs-string\">\"\
          AS IS\"</span> BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\
          \ either express <span class=\"hljs-keyword\">or</span> implied.\n * See\
          \ the License <span class=\"hljs-keyword\">for</span> the specific language\
          \ governing permissions <span class=\"hljs-keyword\">and</span>\n * limitations\
          \ under the License.\n */\n\npackage com.hazelcast.internal.serialization;\n\
          \n<span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.DefaultSerializationService;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.impl.DefaultSerializationServiceFactory;\n\
          <span class=\"hljs-keyword\">import</span> com.hazelcast.internal.serialization.\n\
          </code></pre>\n"
        raw: "Thanks @yuewang-sf!\n\nDo you happen to know if Hugging Face's [Inference\
          \ API](https://huggingface.co/docs/api-inference) is compatible with your\
          \ method? In my try below, I got the same result as I mentioned in my first\
          \ message.\n```python\nimport requests\n\nAPI_URL = \"https://api-inference.huggingface.co/models/Salesforce/codet5p-220m\"\
          \nheaders = {\"Authorization\": \"Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\
          }\n\ndef query(payload):\n\tresponse = requests.post(API_URL, headers=headers,\
          \ json=payload)\n\treturn response.json()\n\nhumaneval_input_1 = \"\"\"\
          from typing import List\n\n\ndef has_close_elements(numbers: List[float],\
          \ threshold: float) -> bool:\n    \\\"\\\"\\\" Check if in given list of\
          \ numbers, are any two numbers closer to each other than\n    given threshold.\n\
          \    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0,\
          \ 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \\\"\\\"\\\"\"\"\"\n\t\n\
          output = query({\n\t\"inputs\": humaneval_input_1,\n\t\"parameters\": {\n\
          \t\t\"temperature\": 0.2,\n\t\t\"max_length\": 256,\n    },\n\t\"options\"\
          : {\n\t\t\"wait_for_model\": True\n    }\n})\n```\nThen, `print(output[0][\"\
          generated_text\"])` prints\n```python\n/*\n * Copyright (c) 2008-2021, Hazelcast,\
          \ Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version\
          \ 2.0 (the \"License\");\n * you may not use this file except in compliance\
          \ with the License.\n * You may obtain a copy of the License at\n *\n *\
          \ http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by\
          \ applicable law or agreed to in writing, software\n * distributed under\
          \ the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES\
          \ OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License\
          \ for the specific language governing permissions and\n * limitations under\
          \ the License.\n */\n\npackage com.hazelcast.internal.serialization;\n\n\
          import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n\
          import com.hazelcast.internal.serialization.impl.DefaultSerializationService;\n\
          import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceFactory;\n\
          import com.hazelcast.internal.serialization.\n```"
        updatedAt: '2023-06-28T01:46:05.454Z'
      numEdits: 2
      reactions: []
    id: 649b9068d0b365aee091716b
    type: comment
  author: Nadav-Timor
  content: "Thanks @yuewang-sf!\n\nDo you happen to know if Hugging Face's [Inference\
    \ API](https://huggingface.co/docs/api-inference) is compatible with your method?\
    \ In my try below, I got the same result as I mentioned in my first message.\n\
    ```python\nimport requests\n\nAPI_URL = \"https://api-inference.huggingface.co/models/Salesforce/codet5p-220m\"\
    \nheaders = {\"Authorization\": \"Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\
    }\n\ndef query(payload):\n\tresponse = requests.post(API_URL, headers=headers,\
    \ json=payload)\n\treturn response.json()\n\nhumaneval_input_1 = \"\"\"from typing\
    \ import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float)\
    \ -> bool:\n    \\\"\\\"\\\" Check if in given list of numbers, are any two numbers\
    \ closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0], 0.3)\n    True\n    \\\"\\\"\\\"\"\"\"\n\t\noutput = query({\n\t\"\
    inputs\": humaneval_input_1,\n\t\"parameters\": {\n\t\t\"temperature\": 0.2,\n\
    \t\t\"max_length\": 256,\n    },\n\t\"options\": {\n\t\t\"wait_for_model\": True\n\
    \    }\n})\n```\nThen, `print(output[0][\"generated_text\"])` prints\n```python\n\
    /*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed\
    \ under the Apache License, Version 2.0 (the \"License\");\n * you may not use\
    \ this file except in compliance with the License.\n * You may obtain a copy of\
    \ the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless\
    \ required by applicable law or agreed to in writing, software\n * distributed\
    \ under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES\
    \ OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for\
    \ the specific language governing permissions and\n * limitations under the License.\n\
    \ */\n\npackage com.hazelcast.internal.serialization;\n\nimport com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n\
    import com.hazelcast.internal.serialization.impl.DefaultSerializationService;\n\
    import com.hazelcast.internal.serialization.impl.DefaultSerializationServiceFactory;\n\
    import com.hazelcast.internal.serialization.\n```"
  created_at: 2023-06-28 00:44:08+00:00
  edited: true
  hidden: false
  id: 649b9068d0b365aee091716b
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
      fullname: Nadav Timor
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Nadav-Timor
      type: user
    createdAt: '2023-07-11T03:08:43.000Z'
    data:
      edited: true
      editors:
      - Nadav-Timor
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.8953470587730408
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/1674221847840-62be5fc0c990a0a515da5f34.jpeg?w=200&h=200&f=face
          fullname: Nadav Timor
          isHf: false
          isPro: false
          name: Nadav-Timor
          type: user
        html: '<blockquote>

          <p>Hi Nadav, please refer to our response to this <a rel="nofollow" href="https://github.com/salesforce/CodeT5/issues/115">issue</a>
          at our CodeT5 repo. We do save the model''s raw completions and can release
          it soon.</p>

          </blockquote>

          <p>Our issue is with <code>Salesforce/codet5p-220m</code> and <code>Salesforce/codet5p-220m-py</code>.
          We''d appreciate it if you could share raw generations. Thank you!</p>

          '
        raw: '> Hi Nadav, please refer to our response to this [issue](https://github.com/salesforce/CodeT5/issues/115)
          at our CodeT5 repo. We do save the model''s raw completions and can release
          it soon.


          Our issue is with `Salesforce/codet5p-220m` and `Salesforce/codet5p-220m-py`.
          We''d appreciate it if you could share raw generations. Thank you!'
        updatedAt: '2023-07-11T03:10:14.134Z'
      numEdits: 2
      reactions:
      - count: 1
        reaction: "\U0001F44D"
        users:
        - bzz2
    id: 64acc7bbb7e4b2c1ce35bdaa
    type: comment
  author: Nadav-Timor
  content: '> Hi Nadav, please refer to our response to this [issue](https://github.com/salesforce/CodeT5/issues/115)
    at our CodeT5 repo. We do save the model''s raw completions and can release it
    soon.


    Our issue is with `Salesforce/codet5p-220m` and `Salesforce/codet5p-220m-py`.
    We''d appreciate it if you could share raw generations. Thank you!'
  created_at: 2023-07-11 02:08:43+00:00
  edited: true
  hidden: false
  id: 64acc7bbb7e4b2c1ce35bdaa
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 2
repo_id: Salesforce/codet5p-220m
repo_type: model
status: open
target_branch: null
title: Challenges in reproducing the HumanEval scores reported in the paper with BigCode's
  Eval Harness
