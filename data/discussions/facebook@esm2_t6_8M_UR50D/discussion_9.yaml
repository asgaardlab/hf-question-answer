!!python/object:huggingface_hub.community.DiscussionWithDetails
author: francescopatane
conflicting_files: null
created_at: 2023-05-13 09:49:16+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/8b98ef488b21c3de7813e73448fb8e3e.svg
      fullname: "Francesco Patan\xE8"
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: francescopatane
      type: user
    createdAt: '2023-05-13T10:49:16.000Z'
    data:
      edited: false
      editors:
      - francescopatane
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/8b98ef488b21c3de7813e73448fb8e3e.svg
          fullname: "Francesco Patan\xE8"
          isHf: false
          isPro: false
          name: francescopatane
          type: user
        html: '<p>hi ! i''m trying using captum in order to use integrated gradients.
          actually i''m using a finetuned model :</p>

          <p>model = EsmForSequenceClassification.from_pretrained("francescopatane/esm2_t6_8M_UR50D-xAI")</p>

          <p>in order to use integratedgradients, captum needs output from the model
          (class 0 or 1) and model input (embeddings) :</p>

          <p>lig = LayerIntegratedGradients(model_output, model_input)</p>

          <p>model_input must not be a simple tensor because captum needs to calculate
          a new embedding for every step from the input baseline, so i need a method
          to call the embedding layer directly (like model.bert.embeddings). i tried
          using model.esm.embeddings but this method gives me only the architecture
          layer. how can integrate embedding generation in a variable? thank you very
          much<br>Francesco, Ms</p>

          '
        raw: "hi ! i'm trying using captum in order to use integrated gradients. actually\
          \ i'm using a finetuned model :\r\n\r\nmodel = EsmForSequenceClassification.from_pretrained(\"\
          francescopatane/esm2_t6_8M_UR50D-xAI\")\r\n\r\nin order to use integratedgradients,\
          \ captum needs output from the model (class 0 or 1) and model input (embeddings)\
          \ :\r\n\r\nlig = LayerIntegratedGradients(model_output, model_input)\r\n\
          \r\nmodel_input must not be a simple tensor because captum needs to calculate\
          \ a new embedding for every step from the input baseline, so i need a method\
          \ to call the embedding layer directly (like model.bert.embeddings). i tried\
          \ using model.esm.embeddings but this method gives me only the architecture\
          \ layer. how can integrate embedding generation in a variable? thank you\
          \ very much\r\nFrancesco, Ms"
        updatedAt: '2023-05-13T10:49:16.593Z'
      numEdits: 0
      reactions: []
    id: 645f6b2c236b10b7011ae368
    type: comment
  author: francescopatane
  content: "hi ! i'm trying using captum in order to use integrated gradients. actually\
    \ i'm using a finetuned model :\r\n\r\nmodel = EsmForSequenceClassification.from_pretrained(\"\
    francescopatane/esm2_t6_8M_UR50D-xAI\")\r\n\r\nin order to use integratedgradients,\
    \ captum needs output from the model (class 0 or 1) and model input (embeddings)\
    \ :\r\n\r\nlig = LayerIntegratedGradients(model_output, model_input)\r\n\r\nmodel_input\
    \ must not be a simple tensor because captum needs to calculate a new embedding\
    \ for every step from the input baseline, so i need a method to call the embedding\
    \ layer directly (like model.bert.embeddings). i tried using model.esm.embeddings\
    \ but this method gives me only the architecture layer. how can integrate embedding\
    \ generation in a variable? thank you very much\r\nFrancesco, Ms"
  created_at: 2023-05-13 09:49:16+00:00
  edited: false
  hidden: false
  id: 645f6b2c236b10b7011ae368
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 9
repo_id: facebook/esm2_t6_8M_UR50D
repo_type: model
status: open
target_branch: null
title: 'accessing to embedding layer and generate embeddings step by step '
