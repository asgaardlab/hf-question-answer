!!python/object:huggingface_hub.community.DiscussionWithDetails
author: guyjacoby
conflicting_files: null
created_at: 2023-05-29 06:56:46+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/f5584f71335fa8314be7b01cc52b7fd3.svg
      fullname: Guy Jacoby
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: guyjacoby
      type: user
    createdAt: '2023-05-29T07:56:46.000Z'
    data:
      edited: false
      editors:
      - guyjacoby
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/f5584f71335fa8314be7b01cc52b7fd3.svg
          fullname: Guy Jacoby
          isHf: false
          isPro: false
          name: guyjacoby
          type: user
        html: '<p>Since this is a BERT-style model, shouldn''t there be a CLS token
          that I can use to get the embeddings of a snippet of code I input the model?<br>The
          accompanying tokenizer doesn''t have a CLS token in the vocabulary.<br>If
          I am misunderstanding something, is there a different way to get a "sentence
          level" embedding of code (e.g., python code) using this model?</p>

          <p>Thanks</p>

          '
        raw: "Since this is a BERT-style model, shouldn't there be a CLS token that\
          \ I can use to get the embeddings of a snippet of code I input the model?\r\
          \nThe accompanying tokenizer doesn't have a CLS token in the vocabulary.\r\
          \nIf I am misunderstanding something, is there a different way to get a\
          \ \"sentence level\" embedding of code (e.g., python code) using this model?\r\
          \n\r\nThanks"
        updatedAt: '2023-05-29T07:56:46.803Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\U0001F91D"
        users:
        - Bilibili
    id: 64745abea855203d8fe96182
    type: comment
  author: guyjacoby
  content: "Since this is a BERT-style model, shouldn't there be a CLS token that\
    \ I can use to get the embeddings of a snippet of code I input the model?\r\n\
    The accompanying tokenizer doesn't have a CLS token in the vocabulary.\r\nIf I\
    \ am misunderstanding something, is there a different way to get a \"sentence\
    \ level\" embedding of code (e.g., python code) using this model?\r\n\r\nThanks"
  created_at: 2023-05-29 06:56:46+00:00
  edited: false
  hidden: false
  id: 64745abea855203d8fe96182
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/cb5545adaf1cfe0166119c586f4ac9c8.svg
      fullname: "Jo\xE3o Monteiro"
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: joaomonteirof
      type: user
    createdAt: '2023-05-31T14:56:24.000Z'
    data:
      edited: false
      editors:
      - joaomonteirof
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/cb5545adaf1cfe0166119c586f4ac9c8.svg
          fullname: "Jo\xE3o Monteiro"
          isHf: false
          isPro: false
          name: joaomonteirof
          type: user
        html: '<p>Yes, you can get a sentence level embedding either at [CLS] or at
          the [SEP] at the end of the sentence, or even average representations at
          the last layer. In preliminary evaluations, we found that the output at
          [SEP] worked quite well. So, test inputs to be embedded should be formatted
          as: f"{CLS_TOKEN} {Sentence} {SEP_TOKEN}".</p>

          <p>Indeed, the uploaded tokenizer doesn''t have the special tokens, and
          you need to add them manually. This can be useful: <a rel="nofollow" href="https://github.com/bigcode-project/bigcode-encoder/blob/master/embedding_sandbox.ipynb">https://github.com/bigcode-project/bigcode-encoder/blob/master/embedding_sandbox.ipynb</a></p>

          '
        raw: 'Yes, you can get a sentence level embedding either at [CLS] or at the
          [SEP] at the end of the sentence, or even average representations at the
          last layer. In preliminary evaluations, we found that the output at [SEP]
          worked quite well. So, test inputs to be embedded should be formatted as:
          f"{CLS_TOKEN} {Sentence} {SEP_TOKEN}".


          Indeed, the uploaded tokenizer doesn''t have the special tokens, and you
          need to add them manually. This can be useful: https://github.com/bigcode-project/bigcode-encoder/blob/master/embedding_sandbox.ipynb'
        updatedAt: '2023-05-31T14:56:24.468Z'
      numEdits: 0
      reactions:
      - count: 2
        reaction: "\U0001F917"
        users:
        - guyjacoby
        - noobmldude
    id: 64776018f911e9e76c626e17
    type: comment
  author: joaomonteirof
  content: 'Yes, you can get a sentence level embedding either at [CLS] or at the
    [SEP] at the end of the sentence, or even average representations at the last
    layer. In preliminary evaluations, we found that the output at [SEP] worked quite
    well. So, test inputs to be embedded should be formatted as: f"{CLS_TOKEN} {Sentence}
    {SEP_TOKEN}".


    Indeed, the uploaded tokenizer doesn''t have the special tokens, and you need
    to add them manually. This can be useful: https://github.com/bigcode-project/bigcode-encoder/blob/master/embedding_sandbox.ipynb'
  created_at: 2023-05-31 13:56:24+00:00
  edited: false
  hidden: false
  id: 64776018f911e9e76c626e17
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/f5584f71335fa8314be7b01cc52b7fd3.svg
      fullname: Guy Jacoby
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: guyjacoby
      type: user
    createdAt: '2023-06-18T07:50:29.000Z'
    data:
      edited: true
      editors:
      - guyjacoby
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.7796873450279236
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/f5584f71335fa8314be7b01cc52b7fd3.svg
          fullname: Guy Jacoby
          isHf: false
          isPro: false
          name: guyjacoby
          type: user
        html: '<p>Thank you for the help!</p>

          <p>Do you have a recommendation regarding how to deal with embedding longer-than-context
          documents? </p>

          <p>I''ve read of a few approaches, from simple chunking (just slice every
          context size), to "semantic" chunking (splitting on function/class def etc.).
          And then, either keeping multiple embeddings for a single document (splitting
          a document to multiple documents), or aggregating the chunk embeddings (e.g,
          mean, sum, etc.) to get a single embedding...</p>

          <p>Any thoughts?</p>

          '
        raw: "Thank you for the help!\n\nDo you have a recommendation regarding how\
          \ to deal with embedding longer-than-context documents? \n\nI've read of\
          \ a few approaches, from simple chunking (just slice every context size),\
          \ to \"semantic\" chunking (splitting on function/class def etc.). And then,\
          \ either keeping multiple embeddings for a single document (splitting a\
          \ document to multiple documents), or aggregating the chunk embeddings (e.g,\
          \ mean, sum, etc.) to get a single embedding...\n\nAny thoughts?"
        updatedAt: '2023-06-18T08:31:10.057Z'
      numEdits: 1
      reactions: []
    id: 648eb745a3090498da53844e
    type: comment
  author: guyjacoby
  content: "Thank you for the help!\n\nDo you have a recommendation regarding how\
    \ to deal with embedding longer-than-context documents? \n\nI've read of a few\
    \ approaches, from simple chunking (just slice every context size), to \"semantic\"\
    \ chunking (splitting on function/class def etc.). And then, either keeping multiple\
    \ embeddings for a single document (splitting a document to multiple documents),\
    \ or aggregating the chunk embeddings (e.g, mean, sum, etc.) to get a single embedding...\n\
    \nAny thoughts?"
  created_at: 2023-06-18 06:50:29+00:00
  edited: true
  hidden: false
  id: 648eb745a3090498da53844e
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/cb5545adaf1cfe0166119c586f4ac9c8.svg
      fullname: "Jo\xE3o Monteiro"
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: joaomonteirof
      type: user
    createdAt: '2023-06-20T11:37:00.000Z'
    data:
      edited: false
      editors:
      - joaomonteirof
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9650933742523193
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/cb5545adaf1cfe0166119c586f4ac9c8.svg
          fullname: "Jo\xE3o Monteiro"
          isHf: false
          isPro: false
          name: joaomonteirof
          type: user
        html: '<p>I haven''t tried it myself so not sure if it would be the best approach,
          but the first thing I''d personally try would be a sliding window with overlap
          (e.g., a 512 tokens window with a 256 tokens step). Mean pooling on top
          of chunk embeddings would yield a single embedding out of the entire document
          if that''s needed.</p>

          '
        raw: I haven't tried it myself so not sure if it would be the best approach,
          but the first thing I'd personally try would be a sliding window with overlap
          (e.g., a 512 tokens window with a 256 tokens step). Mean pooling on top
          of chunk embeddings would yield a single embedding out of the entire document
          if that's needed.
        updatedAt: '2023-06-20T11:37:00.212Z'
      numEdits: 0
      reactions: []
    id: 64918f5c55017e6ac52b1cbd
    type: comment
  author: joaomonteirof
  content: I haven't tried it myself so not sure if it would be the best approach,
    but the first thing I'd personally try would be a sliding window with overlap
    (e.g., a 512 tokens window with a 256 tokens step). Mean pooling on top of chunk
    embeddings would yield a single embedding out of the entire document if that's
    needed.
  created_at: 2023-06-20 10:37:00+00:00
  edited: false
  hidden: false
  id: 64918f5c55017e6ac52b1cbd
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/f5584f71335fa8314be7b01cc52b7fd3.svg
      fullname: Guy Jacoby
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: guyjacoby
      type: user
    createdAt: '2023-06-20T11:56:11.000Z'
    data:
      edited: false
      editors:
      - guyjacoby
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9622506499290466
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/f5584f71335fa8314be7b01cc52b7fd3.svg
          fullname: Guy Jacoby
          isHf: false
          isPro: false
          name: guyjacoby
          type: user
        html: '<p>Thanks for replying, and great work! :)</p>

          '
        raw: Thanks for replying, and great work! :)
        updatedAt: '2023-06-20T11:56:11.851Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\U0001F91D"
        users:
        - joaomonteirof
    id: 649193db3851bb17dfab4f8d
    type: comment
  author: guyjacoby
  content: Thanks for replying, and great work! :)
  created_at: 2023-06-20 10:56:11+00:00
  edited: false
  hidden: false
  id: 649193db3851bb17dfab4f8d
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/b71781a3824f7547897f159a10a99851.svg
      fullname: Jeffrey Svajlenko
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: jeffsvajlenko
      type: user
    createdAt: '2023-07-17T19:59:30.000Z'
    data:
      edited: false
      editors:
      - jeffsvajlenko
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9001277685165405
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/b71781a3824f7547897f159a10a99851.svg
          fullname: Jeffrey Svajlenko
          isHf: false
          isPro: false
          name: jeffsvajlenko
          type: user
        html: "<p>I am giving the <code>embedding_sandbox.ipynb</code> a try and running\
          \ into some peculiarities using the embeddings for Code-Code comparison.</p>\n\
          <p>With the following example sentences from the notebook:</p>\n<pre><code>input_sentences\
          \ = [\n    \"Hello world!!\",\n    \"def my_sum(a, b): return a+b\"\n]\n\
          </code></pre>\n<p>I am getting a cosine similarity between these sentences\
          \ as:</p>\n<p>StarEncoder - 0.9923<br>CodeBert - 0.9893<br>Unixcoder - 0.2749\
          \ (I added this one using the CodeBert embedder class).</p>\n<p>The Unixcoder\
          \ result is what I expected as the sentences are not similar, but both StarEncoder\
          \ and CodeBert have an unexpectedly high similarity.  I tried different\
          \ pooling strategies without much change.</p>\n<p>I was wondering if it\
          \ is expected that the embeddings from StarEncoder are not intended for\
          \ differentiating similar vs dissimilar code, or if it looks like I have\
          \ an issue in my setup (e.g., using the wrong checkpoint, etc).</p>\n"
        raw: "I am giving the `embedding_sandbox.ipynb` a try and running into some\
          \ peculiarities using the embeddings for Code-Code comparison.\n\nWith the\
          \ following example sentences from the notebook:\n```\ninput_sentences =\
          \ [\n    \"Hello world!!\",\n    \"def my_sum(a, b): return a+b\"\n]\n```\n\
          \nI am getting a cosine similarity between these sentences as:\n\nStarEncoder\
          \ - 0.9923\nCodeBert - 0.9893\nUnixcoder - 0.2749 (I added this one using\
          \ the CodeBert embedder class).\n\nThe Unixcoder result is what I expected\
          \ as the sentences are not similar, but both StarEncoder and CodeBert have\
          \ an unexpectedly high similarity.  I tried different pooling strategies\
          \ without much change.\n\nI was wondering if it is expected that the embeddings\
          \ from StarEncoder are not intended for differentiating similar vs dissimilar\
          \ code, or if it looks like I have an issue in my setup (e.g., using the\
          \ wrong checkpoint, etc)."
        updatedAt: '2023-07-17T19:59:30.449Z'
      numEdits: 0
      reactions: []
    id: 64b59da25b4a27b5dd0c4951
    type: comment
  author: jeffsvajlenko
  content: "I am giving the `embedding_sandbox.ipynb` a try and running into some\
    \ peculiarities using the embeddings for Code-Code comparison.\n\nWith the following\
    \ example sentences from the notebook:\n```\ninput_sentences = [\n    \"Hello\
    \ world!!\",\n    \"def my_sum(a, b): return a+b\"\n]\n```\n\nI am getting a cosine\
    \ similarity between these sentences as:\n\nStarEncoder - 0.9923\nCodeBert - 0.9893\n\
    Unixcoder - 0.2749 (I added this one using the CodeBert embedder class).\n\nThe\
    \ Unixcoder result is what I expected as the sentences are not similar, but both\
    \ StarEncoder and CodeBert have an unexpectedly high similarity.  I tried different\
    \ pooling strategies without much change.\n\nI was wondering if it is expected\
    \ that the embeddings from StarEncoder are not intended for differentiating similar\
    \ vs dissimilar code, or if it looks like I have an issue in my setup (e.g., using\
    \ the wrong checkpoint, etc)."
  created_at: 2023-07-17 18:59:30+00:00
  edited: false
  hidden: false
  id: 64b59da25b4a27b5dd0c4951
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/cb5545adaf1cfe0166119c586f4ac9c8.svg
      fullname: "Jo\xE3o Monteiro"
      isHf: false
      isOrgMember: true
      isOwner: false
      isPro: false
      name: joaomonteirof
      type: user
    createdAt: '2023-07-24T13:22:29.000Z'
    data:
      edited: false
      editors:
      - joaomonteirof
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.9231314659118652
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/cb5545adaf1cfe0166119c586f4ac9c8.svg
          fullname: "Jo\xE3o Monteiro"
          isHf: false
          isPro: false
          name: joaomonteirof
          type: user
        html: '<p>Hello,</p>

          <p>Please note that different similarity scoring rules will have different
          ranges and they will not necessarily spread across the entire [-1,1] interval
          for instance. For retrieval applications, only the ranking of scores measured
          between a query and a set of candidates would be useful, and the individual
          values of scores are not that informative and not directly comparable across
          scorers. To illustrate that, I added a plot with 95% confidence intervals
          of similarity scores for all queries against all candidates in the retrieval
          task in <a rel="nofollow" href="https://github.com/bigcode-project/bigcode-encoder/blob/master/c2c_search_eval.ipynb">https://github.com/bigcode-project/bigcode-encoder/blob/master/c2c_search_eval.ipynb</a>.
          See below that the effective range of the scores is rather small. If scores
          need to have a given range or lie in a specific interval, then they need
          to be post processed (e.g., final_score = (score - min_score) / (max_score
          - min_score)).</p>

          <p><a rel="nofollow" href="https://cdn-uploads.huggingface.co/production/uploads/63347fed495073b88704cf02/xIEsXtTeOqWl7UGzLBh9b.png"><img
          alt="image.png" src="https://cdn-uploads.huggingface.co/production/uploads/63347fed495073b88704cf02/xIEsXtTeOqWl7UGzLBh9b.png"></a></p>

          <p>Also, I just noticed that embeddings from CodeBERT were not being normalized
          and we were scoring that model with inner products rather than cosine similarities.
          That''s fixed now.</p>

          '
        raw: 'Hello,


          Please note that different similarity scoring rules will have different
          ranges and they will not necessarily spread across the entire [-1,1] interval
          for instance. For retrieval applications, only the ranking of scores measured
          between a query and a set of candidates would be useful, and the individual
          values of scores are not that informative and not directly comparable across
          scorers. To illustrate that, I added a plot with 95% confidence intervals
          of similarity scores for all queries against all candidates in the retrieval
          task in https://github.com/bigcode-project/bigcode-encoder/blob/master/c2c_search_eval.ipynb.
          See below that the effective range of the scores is rather small. If scores
          need to have a given range or lie in a specific interval, then they need
          to be post processed (e.g., final_score = (score - min_score) / (max_score
          - min_score)).


          ![image.png](https://cdn-uploads.huggingface.co/production/uploads/63347fed495073b88704cf02/xIEsXtTeOqWl7UGzLBh9b.png)


          Also, I just noticed that embeddings from CodeBERT were not being normalized
          and we were scoring that model with inner products rather than cosine similarities.
          That''s fixed now.'
        updatedAt: '2023-07-24T13:22:29.444Z'
      numEdits: 0
      reactions:
      - count: 2
        reaction: "\U0001F44D"
        users:
        - jeffsvajlenko
        - limcheekin
    id: 64be7b15c733e8552ff41f85
    type: comment
  author: joaomonteirof
  content: 'Hello,


    Please note that different similarity scoring rules will have different ranges
    and they will not necessarily spread across the entire [-1,1] interval for instance.
    For retrieval applications, only the ranking of scores measured between a query
    and a set of candidates would be useful, and the individual values of scores are
    not that informative and not directly comparable across scorers. To illustrate
    that, I added a plot with 95% confidence intervals of similarity scores for all
    queries against all candidates in the retrieval task in https://github.com/bigcode-project/bigcode-encoder/blob/master/c2c_search_eval.ipynb.
    See below that the effective range of the scores is rather small. If scores need
    to have a given range or lie in a specific interval, then they need to be post
    processed (e.g., final_score = (score - min_score) / (max_score - min_score)).


    ![image.png](https://cdn-uploads.huggingface.co/production/uploads/63347fed495073b88704cf02/xIEsXtTeOqWl7UGzLBh9b.png)


    Also, I just noticed that embeddings from CodeBERT were not being normalized and
    we were scoring that model with inner products rather than cosine similarities.
    That''s fixed now.'
  created_at: 2023-07-24 12:22:29+00:00
  edited: false
  hidden: false
  id: 64be7b15c733e8552ff41f85
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/6400c075f4ff62c2617023f7/DNrK0LTDuj9ZEpXl0_k_A.jpeg?w=200&h=200&f=face
      fullname: SebastianBoo
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: SebastianBodza
      type: user
    createdAt: '2023-08-09T13:45:35.000Z'
    data:
      edited: false
      editors:
      - SebastianBodza
      hidden: false
      identifiedLanguage:
        language: en
        probability: 0.8275970220565796
      isReport: false
      latest:
        author:
          avatarUrl: https://aeiljuispo.cloudimg.io/v7/https://cdn-uploads.huggingface.co/production/uploads/6400c075f4ff62c2617023f7/DNrK0LTDuj9ZEpXl0_k_A.jpeg?w=200&h=200&f=face
          fullname: SebastianBoo
          isHf: false
          isPro: false
          name: SebastianBodza
          type: user
        html: "<p><span data-props=\"{&quot;user&quot;:&quot;jeffsvajlenko&quot;}\"\
          \ data-target=\"UserMention\" class=\"SVELTE_PARTIAL_HYDRATER contents\"\
          >\n\n<span class=\"inline-block\"><span class=\"contents\"><a href=\"/jeffsvajlenko\"\
          >@<span class=\"underline\">jeffsvajlenko</span></a></span>\n\n\t</span></span>\
          \ Would you mind sharing the Code for the Unixcoder? I am using qdrant with\
          \ bge-large-en and I am getting weirdly high emeddings of &gt;&gt;0.85 for\
          \ almost everything i compare. </p>\n"
        raw: '@jeffsvajlenko Would you mind sharing the Code for the Unixcoder? I
          am using qdrant with bge-large-en and I am getting weirdly high emeddings
          of >>0.85 for almost everything i compare. '
        updatedAt: '2023-08-09T13:45:35.469Z'
      numEdits: 0
      reactions: []
    id: 64d3987f2ad1d0608d88ca84
    type: comment
  author: SebastianBodza
  content: '@jeffsvajlenko Would you mind sharing the Code for the Unixcoder? I am
    using qdrant with bge-large-en and I am getting weirdly high emeddings of >>0.85
    for almost everything i compare. '
  created_at: 2023-08-09 12:45:35+00:00
  edited: false
  hidden: false
  id: 64d3987f2ad1d0608d88ca84
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 3
repo_id: bigcode/starencoder
repo_type: model
status: open
target_branch: null
title: Getting code snippet embeddings?
