!!python/object:huggingface_hub.community.DiscussionWithDetails
author: Fodellm
conflicting_files: null
created_at: 2022-11-24 20:27:38+00:00
diff: null
endpoint: https://huggingface.co
events:
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/f94b38daeaba3d513415da3ff35a5a06.svg
      fullname: Matthew Fodell
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: Fodellm
      type: user
    createdAt: '2022-11-24T20:27:38.000Z'
    data:
      edited: true
      editors:
      - Fodellm
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/f94b38daeaba3d513415da3ff35a5a06.svg
          fullname: Matthew Fodell
          isHf: false
          isPro: false
          name: Fodellm
          type: user
        html: '<p>Greetings,</p>

          <pre><code> Big fan of the work you all are doing, and the community that''s
          developing around Stable Diffusion!

          </code></pre>

          <p>I was THRILLED to discover that v2 of the .ckpt had come out, so I downloaded
          it &amp; stuck it in my stable-diffusion models directory (within the directory
          for the aforementioned UI, which I''ve come to really love) the same way
          I did with other previous models, such as when updating from v1.4 to v1.5...
          Only to find that it didn''t work.</p>

          <p> This wasn''t a huge surprise, v2 being hosted in an entirely different
          repository, having different .yaml files &amp; other components to consider
          besides the model .ckpt itself. But I''m hoping that it''s as simple as
          sticking a couple of those other such files into the appropriate directories
          to get it generating images with v2. </p>

          <p>So:</p>

          <ol>

          <li><p>Is this the case? If so, which files are necessary and where should
          they be installed in the UI directory?</p>

          </li>

          <li><p>What do I need to do to get it up and running on the new model? </p>

          <p>  I''d really rather not have to downgrade to using cmd line/Python and
          putting in a million arguments by hand for each batch if I don''t have to,
          when I already set up two different GUIs and they work so splendidly (at
          least with v1.5 and 1.4). I''m psyched to try out the new model, and I''m
          sure many others are in the same boat, so I thought it was worth asking
          about here.</p>

          </li>

          </ol>

          <p>Thanks for any assistance!</p>

          '
        raw: "Greetings,\n\n     Big fan of the work you all are doing, and the community\
          \ that's developing around Stable Diffusion!\nI was THRILLED to discover\
          \ that v2 of the .ckpt had come out, so I downloaded it & stuck it in my\
          \ stable-diffusion models directory (within the directory for the aforementioned\
          \ UI, which I've come to really love) the same way I did with other previous\
          \ models, such as when updating from v1.4 to v1.5... Only to find that it\
          \ didn't work.\n\n This wasn't a huge surprise, v2 being hosted in an entirely\
          \ different repository, having different .yaml files & other components\
          \ to consider besides the model .ckpt itself. But I'm hoping that it's as\
          \ simple as sticking a couple of those other such files into the appropriate\
          \ directories to get it generating images with v2. \n\nSo:\n\n1. Is this\
          \ the case? If so, which files are necessary and where should they be installed\
          \ in the UI directory?\n\n2. What do I need to do to get it up and running\
          \ on the new model? \n\n     I'd really rather not have to downgrade to\
          \ using cmd line/Python and putting in a million arguments by hand for each\
          \ batch if I don't have to, when I already set up two different GUIs and\
          \ they work so splendidly (at least with v1.5 and 1.4). I'm psyched to try\
          \ out the new model, and I'm sure many others are in the same boat, so I\
          \ thought it was worth asking about here.\n\nThanks for any assistance!"
        updatedAt: '2022-11-24T20:28:57.878Z'
      numEdits: 1
      reactions: []
    id: 637fd3ba42cedbc20c78a4b9
    type: comment
  author: Fodellm
  content: "Greetings,\n\n     Big fan of the work you all are doing, and the community\
    \ that's developing around Stable Diffusion!\nI was THRILLED to discover that\
    \ v2 of the .ckpt had come out, so I downloaded it & stuck it in my stable-diffusion\
    \ models directory (within the directory for the aforementioned UI, which I've\
    \ come to really love) the same way I did with other previous models, such as\
    \ when updating from v1.4 to v1.5... Only to find that it didn't work.\n\n This\
    \ wasn't a huge surprise, v2 being hosted in an entirely different repository,\
    \ having different .yaml files & other components to consider besides the model\
    \ .ckpt itself. But I'm hoping that it's as simple as sticking a couple of those\
    \ other such files into the appropriate directories to get it generating images\
    \ with v2. \n\nSo:\n\n1. Is this the case? If so, which files are necessary and\
    \ where should they be installed in the UI directory?\n\n2. What do I need to\
    \ do to get it up and running on the new model? \n\n     I'd really rather not\
    \ have to downgrade to using cmd line/Python and putting in a million arguments\
    \ by hand for each batch if I don't have to, when I already set up two different\
    \ GUIs and they work so splendidly (at least with v1.5 and 1.4). I'm psyched to\
    \ try out the new model, and I'm sure many others are in the same boat, so I thought\
    \ it was worth asking about here.\n\nThanks for any assistance!"
  created_at: 2022-11-24 20:27:38+00:00
  edited: true
  hidden: false
  id: 637fd3ba42cedbc20c78a4b9
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/aa454f884da6b7e1b512f58a13ffa811.svg
      fullname: Adam R
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: atommouse
      type: user
    createdAt: '2022-11-25T02:55:43.000Z'
    data:
      edited: false
      editors:
      - atommouse
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/aa454f884da6b7e1b512f58a13ffa811.svg
          fullname: Adam R
          isHf: false
          isPro: false
          name: atommouse
          type: user
        html: '<p>There is a guide on YouTube by Nerdy Rodent on how to install this
          locally.<br><a rel="nofollow" href="https://www.youtube.com/watch?v=rN8D0pQJ7SY">https://www.youtube.com/watch?v=rN8D0pQJ7SY</a></p>

          '
        raw: 'There is a guide on YouTube by Nerdy Rodent on how to install this locally.

          https://www.youtube.com/watch?v=rN8D0pQJ7SY'
        updatedAt: '2022-11-25T02:55:43.306Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\U0001F44D"
        users:
        - tomhitto
    id: 63802eaff6d1901fcab0b428
    type: comment
  author: atommouse
  content: 'There is a guide on YouTube by Nerdy Rodent on how to install this locally.

    https://www.youtube.com/watch?v=rN8D0pQJ7SY'
  created_at: 2022-11-25 02:55:43+00:00
  edited: false
  hidden: false
  id: 63802eaff6d1901fcab0b428
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/f1b45b7b194414d83da491190d5e2700.svg
      fullname: Ira Abramov
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: ia42
      type: user
    createdAt: '2022-11-25T10:34:25.000Z'
    data:
      edited: false
      editors:
      - ia42
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/f1b45b7b194414d83da491190d5e2700.svg
          fullname: Ira Abramov
          isHf: false
          isPro: false
          name: ia42
          type: user
        html: '<p>This is a bit easier to explain if you speak a little python, but
          I can try...<br>the ckpt files are not code or bits of images, they are
          a frozen state of objects in a running bit of software. python, like all
          object oriented languages, has during runtime lots of "objects" it manages
          in memory. In this case those objects are nodes in a huge array of ML. in
          very very oversimplified terms, you know those boxes with staggered pegs
          that you drop a ball at the top and see where it lands on the bottom, and
          each time it lands in a different place? ML is kind of like that, but the
          software ingests images and then fine tunes the pegs so the balls fall where
          you want them. some pegs need to be larger or smaller or square or triangular
          or tilted, etc. Once this box of altered pegs gives you good results you
          freeze it and put it on the website.</p>

          <p>now back to computer terms: you have objects, they are tiny areas of
          memory with numbers representing the fine tuned numbers we arrived at, and
          they can now be written into a file. it could be as wasteful as XML, JSON
          or YAML, or they can be dumped in a more compressed form like a python pickle.  now
          anyone with the same version of python and the pickle library can import
          that file and hey-presto you have the objects in memory again. you can keep
          training it and dump it again, or you can run prompts through it (again,
          I am over-simplifying it here, not getting into GAN and stuff). However
          if you have a different version of python the format could change. if you
          have a new version of the software and now each node object has 12 parameters
          instead of 8 or 10, the pickled data is kind of meaningless. you have to
          retrain. you can''t read the content of the old object into the code of
          the new object because they are most probably not compatible.</p>

          <p>so unless Stability adds some special code to allow backward compatibility
          (which is painful and makes no practical sense in development time) it just
          won''t happen. new versions that break the object definition will inevitably
          come with new pickles. you can also see it''s almost 50% bigger. meaning
          more nodes of fatter nodes, because more features or higher accuracy.</p>

          '
        raw: 'This is a bit easier to explain if you speak a little python, but I
          can try...

          the ckpt files are not code or bits of images, they are a frozen state of
          objects in a running bit of software. python, like all object oriented languages,
          has during runtime lots of "objects" it manages in memory. In this case
          those objects are nodes in a huge array of ML. in very very oversimplified
          terms, you know those boxes with staggered pegs that you drop a ball at
          the top and see where it lands on the bottom, and each time it lands in
          a different place? ML is kind of like that, but the software ingests images
          and then fine tunes the pegs so the balls fall where you want them. some
          pegs need to be larger or smaller or square or triangular or tilted, etc.
          Once this box of altered pegs gives you good results you freeze it and put
          it on the website.


          now back to computer terms: you have objects, they are tiny areas of memory
          with numbers representing the fine tuned numbers we arrived at, and they
          can now be written into a file. it could be as wasteful as XML, JSON or
          YAML, or they can be dumped in a more compressed form like a python pickle.  now
          anyone with the same version of python and the pickle library can import
          that file and hey-presto you have the objects in memory again. you can keep
          training it and dump it again, or you can run prompts through it (again,
          I am over-simplifying it here, not getting into GAN and stuff). However
          if you have a different version of python the format could change. if you
          have a new version of the software and now each node object has 12 parameters
          instead of 8 or 10, the pickled data is kind of meaningless. you have to
          retrain. you can''t read the content of the old object into the code of
          the new object because they are most probably not compatible.


          so unless Stability adds some special code to allow backward compatibility
          (which is painful and makes no practical sense in development time) it just
          won''t happen. new versions that break the object definition will inevitably
          come with new pickles. you can also see it''s almost 50% bigger. meaning
          more nodes of fatter nodes, because more features or higher accuracy.'
        updatedAt: '2022-11-25T10:34:25.823Z'
      numEdits: 0
      reactions:
      - count: 1
        reaction: "\u2764\uFE0F"
        users:
        - organised
    id: 63809a31baf95d9e3bfd3816
    type: comment
  author: ia42
  content: 'This is a bit easier to explain if you speak a little python, but I can
    try...

    the ckpt files are not code or bits of images, they are a frozen state of objects
    in a running bit of software. python, like all object oriented languages, has
    during runtime lots of "objects" it manages in memory. In this case those objects
    are nodes in a huge array of ML. in very very oversimplified terms, you know those
    boxes with staggered pegs that you drop a ball at the top and see where it lands
    on the bottom, and each time it lands in a different place? ML is kind of like
    that, but the software ingests images and then fine tunes the pegs so the balls
    fall where you want them. some pegs need to be larger or smaller or square or
    triangular or tilted, etc. Once this box of altered pegs gives you good results
    you freeze it and put it on the website.


    now back to computer terms: you have objects, they are tiny areas of memory with
    numbers representing the fine tuned numbers we arrived at, and they can now be
    written into a file. it could be as wasteful as XML, JSON or YAML, or they can
    be dumped in a more compressed form like a python pickle.  now anyone with the
    same version of python and the pickle library can import that file and hey-presto
    you have the objects in memory again. you can keep training it and dump it again,
    or you can run prompts through it (again, I am over-simplifying it here, not getting
    into GAN and stuff). However if you have a different version of python the format
    could change. if you have a new version of the software and now each node object
    has 12 parameters instead of 8 or 10, the pickled data is kind of meaningless.
    you have to retrain. you can''t read the content of the old object into the code
    of the new object because they are most probably not compatible.


    so unless Stability adds some special code to allow backward compatibility (which
    is painful and makes no practical sense in development time) it just won''t happen.
    new versions that break the object definition will inevitably come with new pickles.
    you can also see it''s almost 50% bigger. meaning more nodes of fatter nodes,
    because more features or higher accuracy.'
  created_at: 2022-11-25 10:34:25+00:00
  edited: false
  hidden: false
  id: 63809a31baf95d9e3bfd3816
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/824dbcea3f8c4d449e209b325bea03ad.svg
      fullname: fambaa
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: fambaa
      type: user
    createdAt: '2022-11-26T21:28:13.000Z'
    data:
      edited: false
      editors:
      - fambaa
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/824dbcea3f8c4d449e209b325bea03ad.svg
          fullname: fambaa
          isHf: false
          isPro: false
          name: fambaa
          type: user
        html: '<p>There is already a rudimentary implementation for automatic1111,
          check the github.<br>Aparently there is also a workaround to make the 512
          inpainting model work with it, have to look in the SD reddit for that</p>

          '
        raw: "There is already a rudimentary implementation for automatic1111, check\
          \ the github. \nAparently there is also a workaround to make the 512 inpainting\
          \ model work with it, have to look in the SD reddit for that"
        updatedAt: '2022-11-26T21:28:13.735Z'
      numEdits: 0
      reactions: []
    id: 638284edbd4212a078714c90
    type: comment
  author: fambaa
  content: "There is already a rudimentary implementation for automatic1111, check\
    \ the github. \nAparently there is also a workaround to make the 512 inpainting\
    \ model work with it, have to look in the SD reddit for that"
  created_at: 2022-11-26 21:28:13+00:00
  edited: false
  hidden: false
  id: 638284edbd4212a078714c90
  type: comment
- !!python/object:huggingface_hub.community.DiscussionComment
  _event:
    author:
      avatarUrl: /avatars/77cbc0a8f431fe2f28d78716072fe691.svg
      fullname: Dale Rose
      isHf: false
      isOrgMember: false
      isOwner: false
      isPro: false
      name: drose25
      type: user
    createdAt: '2022-12-05T11:25:08.000Z'
    data:
      edited: false
      editors:
      - drose25
      hidden: false
      isReport: false
      latest:
        author:
          avatarUrl: /avatars/77cbc0a8f431fe2f28d78716072fe691.svg
          fullname: Dale Rose
          isHf: false
          isPro: false
          name: drose25
          type: user
        html: '<p>The cmdr2 version now has a SD2.0 beta version.  You can check the
          git or Discord for more details.</p>

          '
        raw: The cmdr2 version now has a SD2.0 beta version.  You can check the git
          or Discord for more details.
        updatedAt: '2022-12-05T11:25:08.250Z'
      numEdits: 0
      reactions: []
    id: 638dd514bb255c6a0fefd380
    type: comment
  author: drose25
  content: The cmdr2 version now has a SD2.0 beta version.  You can check the git
    or Discord for more details.
  created_at: 2022-12-05 11:25:08+00:00
  edited: false
  hidden: false
  id: 638dd514bb255c6a0fefd380
  type: comment
is_pull_request: false
merge_commit_oid: null
num: 9
repo_id: stabilityai/stable-diffusion-2
repo_type: model
status: open
target_branch: null
title: Getting SD v2 running in Stable Diffusion UIs (specifically Stable-Diffusion-UI
  by github user cmdr2)
